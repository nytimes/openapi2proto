syntax = "proto3";

package kubernetes;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

message ConnectCoreV1DeleteNamespacedPodProxyRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1DeleteNamespacedPodProxyWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1DeleteNamespacedServiceProxyRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1DeleteNamespacedServiceProxyWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1DeleteNodeProxyRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1DeleteNodeProxyWithPathRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1GetNamespacedPodAttachRequest {
    // The container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 1;

    // name of the Pod
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
    bool stderr = 4;

    // Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 5;

    // Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
    bool stdout = 6;

    // TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
    bool tty = 7;
}

message ConnectCoreV1GetNamespacedPodExecRequest {
    // Command is the remote command to execute. argv array. Not executed within a shell.
    string command = 1;

    // Container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 2;

    // name of the Pod
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Redirect the standard error stream of the pod for this call. Defaults to true.
    bool stderr = 5;

    // Redirect the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 6;

    // Redirect the standard output stream of the pod for this call. Defaults to true.
    bool stdout = 7;

    // TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
    bool tty = 8;
}

message ConnectCoreV1GetNamespacedPodPortforwardRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // List of ports to forward Required when using WebSockets
    int32 ports = 3;
}

message ConnectCoreV1GetNamespacedPodProxyRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1GetNamespacedPodProxyWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1GetNamespacedServiceProxyRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1GetNamespacedServiceProxyWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1GetNodeProxyRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1GetNodeProxyWithPathRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PatchNamespacedPodProxyRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PatchNamespacedPodProxyWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PatchNamespacedServiceProxyRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PatchNamespacedServiceProxyWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PatchNodeProxyRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PatchNodeProxyWithPathRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PostNamespacedPodAttachRequest {
    // The container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 1;

    // name of the Pod
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
    bool stderr = 4;

    // Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 5;

    // Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
    bool stdout = 6;

    // TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
    bool tty = 7;
}

message ConnectCoreV1PostNamespacedPodExecRequest {
    // Command is the remote command to execute. argv array. Not executed within a shell.
    string command = 1;

    // Container in which to execute the command. Defaults to only container if there is only one container in the pod.
    string container = 2;

    // name of the Pod
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Redirect the standard error stream of the pod for this call. Defaults to true.
    bool stderr = 5;

    // Redirect the standard input stream of the pod for this call. Defaults to false.
    bool stdin = 6;

    // Redirect the standard output stream of the pod for this call. Defaults to true.
    bool stdout = 7;

    // TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
    bool tty = 8;
}

message ConnectCoreV1PostNamespacedPodPortforwardRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // List of ports to forward Required when using WebSockets
    int32 ports = 3;
}

message ConnectCoreV1PostNamespacedPodProxyRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PostNamespacedPodProxyWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PostNamespacedServiceProxyRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PostNamespacedServiceProxyWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PostNodeProxyRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PostNodeProxyWithPathRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PutNamespacedPodProxyRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PutNamespacedPodProxyWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the URL path to use for the current proxy request to pod.
    string path = 3;
}

message ConnectCoreV1PutNamespacedServiceProxyRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PutNamespacedServiceProxyWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
    string path = 3;
}

message ConnectCoreV1PutNodeProxyRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message ConnectCoreV1PutNodeProxyWithPathRequest {
    // name of the Node
    string name = 1;

    // Path is the URL path to use for the current proxy request to node.
    string path = 2;
}

message CreateApiextensionsV1beta1CustomResourceDefinitionRequest {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateApiregistrationV1beta1ApiServiceRequest {
    IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAppsV1beta1NamespacedControllerRevisionRequest {
    IoK8sApiAppsV1beta1ControllerRevision body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAppsV1beta1NamespacedDeploymentRequest {
    IoK8sApiAppsV1beta1Deployment body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAppsV1beta1NamespacedDeploymentRollbackRequest {
    IoK8sApiAppsV1beta1DeploymentRollback body = 1;

    // name of the DeploymentRollback
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message CreateAppsV1beta1NamespacedStatefulSetRequest {
    IoK8sApiAppsV1beta1StatefulSet body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAppsV1beta2NamespacedControllerRevisionRequest {
    IoK8sApiAppsV1beta2ControllerRevision body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAppsV1beta2NamespacedDaemonSetRequest {
    IoK8sApiAppsV1beta2DaemonSet body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAppsV1beta2NamespacedDeploymentRequest {
    IoK8sApiAppsV1beta2Deployment body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAppsV1beta2NamespacedReplicaSetRequest {
    IoK8sApiAppsV1beta2ReplicaSet body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAppsV1beta2NamespacedStatefulSetRequest {
    IoK8sApiAppsV1beta2StatefulSet body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAuthenticationV1TokenReviewRequest {
    IoK8sApiAuthenticationV1TokenReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAuthenticationV1beta1TokenReviewRequest {
    IoK8sApiAuthenticationV1beta1TokenReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1LocalSubjectAccessReview body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAuthorizationV1SelfSubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1SelfSubjectAccessReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAuthorizationV1SelfSubjectRulesReviewRequest {
    IoK8sApiAuthorizationV1SelfSubjectRulesReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAuthorizationV1SubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1SubjectAccessReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAuthorizationV1beta1SelfSubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAuthorizationV1beta1SelfSubjectRulesReviewRequest {
    IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAuthorizationV1beta1SubjectAccessReviewRequest {
    IoK8sApiAuthorizationV1beta1SubjectAccessReview body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV1HorizontalPodAutoscaler body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateBatchV1NamespacedJobRequest {
    IoK8sApiBatchV1Job body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateBatchV1beta1NamespacedCronJobRequest {
    IoK8sApiBatchV1beta1CronJob body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCertificatesV1beta1CertificateSigningRequestRequest {
    IoK8sApiCertificatesV1beta1CertificateSigningRequest body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateCoreV1NamespaceRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateCoreV1NamespacedBindingRequest {
    IoK8sApiCoreV1Binding body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedConfigMapRequest {
    IoK8sApiCoreV1ConfigMap body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedEndpointsRequest {
    IoK8sApiCoreV1Endpoints body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedEventRequest {
    IoK8sApiCoreV1Event body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedLimitRangeRequest {
    IoK8sApiCoreV1LimitRange body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApiCoreV1PersistentVolumeClaim body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedPodBindingRequest {
    IoK8sApiCoreV1Binding body = 1;

    // name of the Binding
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message CreateCoreV1NamespacedPodEvictionRequest {
    IoK8sApiPolicyV1beta1Eviction body = 1;

    // name of the Eviction
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message CreateCoreV1NamespacedPodRequest {
    IoK8sApiCoreV1Pod body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedPodTemplateRequest {
    IoK8sApiCoreV1PodTemplate body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedReplicationControllerRequest {
    IoK8sApiCoreV1ReplicationController body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedResourceQuotaRequest {
    IoK8sApiCoreV1ResourceQuota body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedSecretRequest {
    IoK8sApiCoreV1Secret body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedServiceAccountRequest {
    IoK8sApiCoreV1ServiceAccount body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NamespacedServiceRequest {
    IoK8sApiCoreV1Service body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateCoreV1NodeRequest {
    IoK8sApiCoreV1Node body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateCoreV1PersistentVolumeRequest {
    IoK8sApiCoreV1PersistentVolume body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateExtensionsV1beta1NamespacedDaemonSetRequest {
    IoK8sApiExtensionsV1beta1DaemonSet body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateExtensionsV1beta1NamespacedDeploymentRequest {
    IoK8sApiExtensionsV1beta1Deployment body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateExtensionsV1beta1NamespacedDeploymentRollbackRequest {
    IoK8sApiExtensionsV1beta1DeploymentRollback body = 1;

    // name of the DeploymentRollback
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message CreateExtensionsV1beta1NamespacedIngressRequest {
    IoK8sApiExtensionsV1beta1Ingress body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateExtensionsV1beta1NamespacedNetworkPolicyRequest {
    IoK8sApiExtensionsV1beta1NetworkPolicy body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateExtensionsV1beta1NamespacedReplicaSetRequest {
    IoK8sApiExtensionsV1beta1ReplicaSet body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateExtensionsV1beta1PodSecurityPolicyRequest {
    IoK8sApiExtensionsV1beta1PodSecurityPolicy body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApiNetworkingV1NetworkPolicy body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreatePolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    IoK8sApiPolicyV1beta1PodDisruptionBudget body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApiRbacV1ClusterRoleBinding body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApiRbacV1ClusterRole body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApiRbacV1RoleBinding body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApiRbacV1Role body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    IoK8sApiRbacV1beta1ClusterRoleBinding body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateRbacAuthorizationV1beta1ClusterRoleRequest {
    IoK8sApiRbacV1beta1ClusterRole body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    IoK8sApiRbacV1beta1RoleBinding body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateRbacAuthorizationV1beta1NamespacedRoleRequest {
    IoK8sApiRbacV1beta1Role body = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message CreateStorageV1StorageClassRequest {
    IoK8sApiStorageV1StorageClass body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message CreateStorageV1beta1StorageClassRequest {
    IoK8sApiStorageV1beta1StorageClass body = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteApiextensionsV1beta1CustomResourceDefinitionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the CustomResourceDefinition
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteApiregistrationV1beta1ApiServiceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the APIService
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteApiregistrationV1beta1CollectionApiServiceRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteAppsV1beta1CollectionNamespacedControllerRevisionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta1CollectionNamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta1CollectionNamespacedStatefulSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta1NamespacedControllerRevisionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ControllerRevision
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAppsV1beta1NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Deployment
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAppsV1beta1NamespacedStatefulSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the StatefulSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAppsV1beta2CollectionNamespacedControllerRevisionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta2CollectionNamespacedDaemonSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta2CollectionNamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta2CollectionNamespacedReplicaSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta2CollectionNamespacedStatefulSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAppsV1beta2NamespacedControllerRevisionRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ControllerRevision
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAppsV1beta2NamespacedDaemonSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the DaemonSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAppsV1beta2NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Deployment
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAppsV1beta2NamespacedReplicaSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ReplicaSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAppsV1beta2NamespacedStatefulSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the StatefulSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the HorizontalPodAutoscaler
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the HorizontalPodAutoscaler
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteBatchV1CollectionNamespacedJobRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteBatchV1NamespacedJobRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Job
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteBatchV1beta1CollectionNamespacedCronJobRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteBatchV1beta1NamespacedCronJobRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the CronJob
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCertificatesV1beta1CertificateSigningRequestRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the CertificateSigningRequest
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteCertificatesV1beta1CollectionCertificateSigningRequestRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteCoreV1CollectionNamespacedConfigMapRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedEndpointsRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedEventRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedLimitRangeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedPodRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedPodTemplateRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedReplicationControllerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedResourceQuotaRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedSecretRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNamespacedServiceAccountRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteCoreV1CollectionNodeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteCoreV1CollectionPersistentVolumeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteCoreV1NamespaceRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Namespace
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteCoreV1NamespacedConfigMapRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ConfigMap
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedEndpointsRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Endpoints
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Event
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedLimitRangeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the LimitRange
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the PersistentVolumeClaim
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedPodRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Pod
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedPodTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the PodTemplate
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedReplicationControllerRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ReplicationController
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedResourceQuotaRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ResourceQuota
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedSecretRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Secret
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedServiceAccountRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ServiceAccount
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteCoreV1NamespacedServiceRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message DeleteCoreV1NodeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Node
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteCoreV1PersistentVolumeRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the PersistentVolume
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteExtensionsV1beta1CollectionNamespacedDaemonSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteExtensionsV1beta1CollectionNamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteExtensionsV1beta1CollectionNamespacedIngressRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteExtensionsV1beta1CollectionNamespacedReplicaSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteExtensionsV1beta1CollectionPodSecurityPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteExtensionsV1beta1NamespacedDaemonSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the DaemonSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteExtensionsV1beta1NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Deployment
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteExtensionsV1beta1NamespacedIngressRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Ingress
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteExtensionsV1beta1NamespacedNetworkPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the NetworkPolicy
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteExtensionsV1beta1NamespacedReplicaSetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ReplicaSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteExtensionsV1beta1PodSecurityPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the PodSecurityPolicy
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteNetworkingV1CollectionNamespacedNetworkPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the NetworkPolicy
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeletePolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the PodDisruptionBudget
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ClusterRoleBinding
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ClusterRole
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteRbacAuthorizationV1CollectionClusterRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteRbacAuthorizationV1CollectionNamespacedRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the RoleBinding
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Role
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ClusterRoleBinding
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteRbacAuthorizationV1beta1ClusterRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the ClusterRole
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteRbacAuthorizationV1beta1CollectionClusterRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message DeleteRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the RoleBinding
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteRbacAuthorizationV1beta1NamespacedRoleRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the Role
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 7;
}

message DeleteStorageV1CollectionStorageClassRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteStorageV1StorageClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the StorageClass
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

message DeleteStorageV1beta1CollectionStorageClassRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message DeleteStorageV1beta1StorageClassRequest {
    IoK8sApimachineryPkgApisMetaV1DeleteOptions body = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int32 gracePeriodSeconds = 2;

    // name of the StorageClass
    string name = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

// DEPRECATED - This group version of ControllerRevision is deprecated by apps/v1beta2/ControllerRevision. See the release notes for more information. ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
message IoK8sApiAppsV1beta1ControllerRevision {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Data is the serialized representation of the state.
    IoK8sApimachineryPkgRuntimeRawExtension data = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // Revision indicates the revision of the state represented by Data.
    int64 revision = 5;
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
message IoK8sApiAppsV1beta1ControllerRevisionList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of ControllerRevisions
    repeated IoK8sApiAppsV1beta1ControllerRevision items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.
message IoK8sApiAppsV1beta1Deployment {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the Deployment.
    IoK8sApiAppsV1beta1DeploymentSpec spec = 4;

    // Most recently observed status of the Deployment.
    IoK8sApiAppsV1beta1DeploymentStatus status = 5;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message IoK8sApiAppsV1beta1DeploymentCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // The last time this condition was updated.
    string lastUpdateTime = 2;

    // A human readable message indicating details about the transition.
    string message = 3;

    // The reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of deployment condition.
    string type = 6;
}

// DeploymentList is a list of Deployments.
message IoK8sApiAppsV1beta1DeploymentList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of Deployments.
    repeated IoK8sApiAppsV1beta1Deployment items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
message IoK8sApiAppsV1beta1DeploymentRollback {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Required: This must match the Name of a deployment.
    string name = 3;

    // The config of this deployment rollback.
    IoK8sApiAppsV1beta1RollbackConfig rollbackTo = 4;

    // The annotations to be updated to a deployment
    map<string, string> updatedAnnotations = 5;
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
message IoK8sApiAppsV1beta1DeploymentSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Indicates that the deployment is paused.
    bool paused = 2;

    // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
    int32 progressDeadlineSeconds = 3;

    // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    int32 replicas = 4;

    // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
    int32 revisionHistoryLimit = 5;

    // DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
    IoK8sApiAppsV1beta1RollbackConfig rollbackTo = 6;

    // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 7;

    // The deployment strategy to use to replace existing pods with new ones.
    IoK8sApiAppsV1beta1DeploymentStrategy strategy = 8;

    // Template describes the pods that will be created.
    IoK8sApiCoreV1PodTemplateSpec template = 9;
}

// DeploymentStatus is the most recently observed status of the Deployment.
message IoK8sApiAppsV1beta1DeploymentStatus {
    // Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    int32 availableReplicas = 1;

    // Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    int32 collisionCount = 2;

    // Represents the latest available observations of a deployment's current state.
    repeated IoK8sApiAppsV1beta1DeploymentCondition conditions = 3;

    // The generation observed by the deployment controller.
    int64 observedGeneration = 4;

    // Total number of ready pods targeted by this deployment.
    int32 readyReplicas = 5;

    // Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    int32 replicas = 6;

    // Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    int32 unavailableReplicas = 7;

    // Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    int32 updatedReplicas = 8;
}

// DeploymentStrategy describes how to replace existing pods with new ones.
message IoK8sApiAppsV1beta1DeploymentStrategy {
    // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    IoK8sApiAppsV1beta1RollingUpdateDeployment rollingUpdate = 1;

    // Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
    string type = 2;
}

// DEPRECATED.
message IoK8sApiAppsV1beta1RollbackConfig {
    // The revision to rollback to. If set to 0, rollback to the last revision.
    int64 revision = 1;
}

// Spec to control the desired behavior of rolling update.
message IoK8sApiAppsV1beta1RollingUpdateDeployment {
    // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
    string maxSurge = 1;

    // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    string maxUnavailable = 2;
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
message IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy {
    // Partition indicates the ordinal at which the StatefulSet should be partitioned.
    int32 partition = 1;
}

// Scale represents a scaling request for a resource.
message IoK8sApiAppsV1beta1Scale {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    IoK8sApiAppsV1beta1ScaleSpec spec = 4;

    // current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    IoK8sApiAppsV1beta1ScaleStatus status = 5;
}

// ScaleSpec describes the attributes of a scale subresource
message IoK8sApiAppsV1beta1ScaleSpec {
    // desired number of instances for the scaled object.
    int32 replicas = 1;
}

// ScaleStatus represents the current status of a scale subresource.
message IoK8sApiAppsV1beta1ScaleStatus {
    // actual number of observed instances of the scaled object.
    int32 replicas = 1;

    // label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
    map<string, string> selector = 2;

    // label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    string targetSelector = 3;
}

// DEPRECATED - This group version of StatefulSet is deprecated by apps/v1beta2/StatefulSet. See the release notes for more information. StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//  - Network: A single stable DNS and hostname.
//  - Storage: As many VolumeClaims as requested.
// The StatefulSet guarantees that a given network identity will always map to the same storage identity.
message IoK8sApiAppsV1beta1StatefulSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the desired identities of pods in this set.
    IoK8sApiAppsV1beta1StatefulSetSpec spec = 4;

    // Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
    IoK8sApiAppsV1beta1StatefulSetStatus status = 5;
}

// StatefulSetList is a collection of StatefulSets.
message IoK8sApiAppsV1beta1StatefulSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;
    repeated IoK8sApiAppsV1beta1StatefulSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// A StatefulSetSpec is the specification of a StatefulSet.
message IoK8sApiAppsV1beta1StatefulSetSpec {
    // podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    string podManagementPolicy = 1;

    // replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    int32 replicas = 2;

    // revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    int32 revisionHistoryLimit = 3;

    // selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 4;

    // serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
    string serviceName = 5;

    // template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
    IoK8sApiCoreV1PodTemplateSpec template = 6;

    // updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
    IoK8sApiAppsV1beta1StatefulSetUpdateStrategy updateStrategy = 7;

    // volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    repeated IoK8sApiCoreV1PersistentVolumeClaim volumeClaimTemplates = 8;
}

// StatefulSetStatus represents the current state of a StatefulSet.
message IoK8sApiAppsV1beta1StatefulSetStatus {
    // collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    int32 collisionCount = 1;

    // currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    int32 currentReplicas = 2;

    // currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    string currentRevision = 3;

    // observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    int64 observedGeneration = 4;

    // readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
    int32 readyReplicas = 5;

    // replicas is the number of Pods created by the StatefulSet controller.
    int32 replicas = 6;

    // updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    string updateRevision = 7;

    // updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    int32 updatedReplicas = 8;
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
message IoK8sApiAppsV1beta1StatefulSetUpdateStrategy {
    // RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    IoK8sApiAppsV1beta1RollingUpdateStatefulSetStrategy rollingUpdate = 1;

    // Type indicates the type of the StatefulSetUpdateStrategy.
    string type = 2;
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
message IoK8sApiAppsV1beta2ControllerRevision {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Data is the serialized representation of the state.
    IoK8sApimachineryPkgRuntimeRawExtension data = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // Revision indicates the revision of the state represented by Data.
    int64 revision = 5;
}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
message IoK8sApiAppsV1beta2ControllerRevisionList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of ControllerRevisions
    repeated IoK8sApiAppsV1beta2ControllerRevision items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DaemonSet represents the configuration of a daemon set.
message IoK8sApiAppsV1beta2DaemonSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiAppsV1beta2DaemonSetSpec spec = 4;

    // The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiAppsV1beta2DaemonSetStatus status = 5;
}

// DaemonSetList is a collection of daemon sets.
message IoK8sApiAppsV1beta2DaemonSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // A list of daemon sets.
    repeated IoK8sApiAppsV1beta2DaemonSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DaemonSetSpec is the specification of a daemon set.
message IoK8sApiAppsV1beta2DaemonSetSpec {
    // The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
    int32 minReadySeconds = 1;

    // The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    int32 revisionHistoryLimit = 2;

    // A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;

    // An update strategy to replace existing DaemonSet pods with new pods.
    IoK8sApiAppsV1beta2DaemonSetUpdateStrategy updateStrategy = 5;
}

// DaemonSetStatus represents the current status of a daemon set.
message IoK8sApiAppsV1beta2DaemonSetStatus {
    // Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    int32 collisionCount = 1;

    // The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 currentNumberScheduled = 2;

    // The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 desiredNumberScheduled = 3;

    // The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
    int32 numberAvailable = 4;

    // The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 numberMisscheduled = 5;

    // The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
    int32 numberReady = 6;

    // The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
    int32 numberUnavailable = 7;

    // The most recent generation observed by the daemon set controller.
    int64 observedGeneration = 8;

    // The total number of nodes that are running updated daemon pod
    int32 updatedNumberScheduled = 9;
}

// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
message IoK8sApiAppsV1beta2DaemonSetUpdateStrategy {
    // Rolling update config params. Present only if type = "RollingUpdate".
    IoK8sApiAppsV1beta2RollingUpdateDaemonSet rollingUpdate = 1;

    // Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
    string type = 2;
}

// Deployment enables declarative updates for Pods and ReplicaSets.
message IoK8sApiAppsV1beta2Deployment {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the Deployment.
    IoK8sApiAppsV1beta2DeploymentSpec spec = 4;

    // Most recently observed status of the Deployment.
    IoK8sApiAppsV1beta2DeploymentStatus status = 5;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message IoK8sApiAppsV1beta2DeploymentCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // The last time this condition was updated.
    string lastUpdateTime = 2;

    // A human readable message indicating details about the transition.
    string message = 3;

    // The reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of deployment condition.
    string type = 6;
}

// DeploymentList is a list of Deployments.
message IoK8sApiAppsV1beta2DeploymentList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of Deployments.
    repeated IoK8sApiAppsV1beta2Deployment items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
message IoK8sApiAppsV1beta2DeploymentSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Indicates that the deployment is paused.
    bool paused = 2;

    // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
    int32 progressDeadlineSeconds = 3;

    // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    int32 replicas = 4;

    // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    int32 revisionHistoryLimit = 5;

    // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 6;

    // The deployment strategy to use to replace existing pods with new ones.
    IoK8sApiAppsV1beta2DeploymentStrategy strategy = 7;

    // Template describes the pods that will be created.
    IoK8sApiCoreV1PodTemplateSpec template = 8;
}

// DeploymentStatus is the most recently observed status of the Deployment.
message IoK8sApiAppsV1beta2DeploymentStatus {
    // Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    int32 availableReplicas = 1;

    // Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    int32 collisionCount = 2;

    // Represents the latest available observations of a deployment's current state.
    repeated IoK8sApiAppsV1beta2DeploymentCondition conditions = 3;

    // The generation observed by the deployment controller.
    int64 observedGeneration = 4;

    // Total number of ready pods targeted by this deployment.
    int32 readyReplicas = 5;

    // Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    int32 replicas = 6;

    // Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    int32 unavailableReplicas = 7;

    // Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    int32 updatedReplicas = 8;
}

// DeploymentStrategy describes how to replace existing pods with new ones.
message IoK8sApiAppsV1beta2DeploymentStrategy {
    // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    IoK8sApiAppsV1beta2RollingUpdateDeployment rollingUpdate = 1;

    // Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
    string type = 2;
}

// ReplicaSet represents the configuration of a ReplicaSet.
message IoK8sApiAppsV1beta2ReplicaSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiAppsV1beta2ReplicaSetSpec spec = 4;

    // Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiAppsV1beta2ReplicaSetStatus status = 5;
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
message IoK8sApiAppsV1beta2ReplicaSetCondition {
    // The last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // The reason for the condition's last transition.
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of replica set condition.
    string type = 5;
}

// ReplicaSetList is a collection of ReplicaSets.
message IoK8sApiAppsV1beta2ReplicaSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    repeated IoK8sApiAppsV1beta2ReplicaSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ReplicaSetSpec is the specification of a ReplicaSet.
message IoK8sApiAppsV1beta2ReplicaSetSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    int32 replicas = 2;

    // Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
message IoK8sApiAppsV1beta2ReplicaSetStatus {
    // The number of available replicas (ready for at least minReadySeconds) for this replica set.
    int32 availableReplicas = 1;

    // Represents the latest available observations of a replica set's current state.
    repeated IoK8sApiAppsV1beta2ReplicaSetCondition conditions = 2;

    // The number of pods that have labels matching the labels of the pod template of the replicaset.
    int32 fullyLabeledReplicas = 3;

    // ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
    int64 observedGeneration = 4;

    // The number of ready replicas for this replica set.
    int32 readyReplicas = 5;

    // Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    int32 replicas = 6;
}

// Spec to control the desired behavior of daemon set rolling update.
message IoK8sApiAppsV1beta2RollingUpdateDaemonSet {
    // The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
    string maxUnavailable = 1;
}

// Spec to control the desired behavior of rolling update.
message IoK8sApiAppsV1beta2RollingUpdateDeployment {
    // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
    string maxSurge = 1;

    // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    string maxUnavailable = 2;
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
message IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy {
    // Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
    int32 partition = 1;
}

// Scale represents a scaling request for a resource.
message IoK8sApiAppsV1beta2Scale {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    IoK8sApiAppsV1beta2ScaleSpec spec = 4;

    // current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    IoK8sApiAppsV1beta2ScaleStatus status = 5;
}

// ScaleSpec describes the attributes of a scale subresource
message IoK8sApiAppsV1beta2ScaleSpec {
    // desired number of instances for the scaled object.
    int32 replicas = 1;
}

// ScaleStatus represents the current status of a scale subresource.
message IoK8sApiAppsV1beta2ScaleStatus {
    // actual number of observed instances of the scaled object.
    int32 replicas = 1;

    // label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
    map<string, string> selector = 2;

    // label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    string targetSelector = 3;
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
//  - Network: A single stable DNS and hostname.
//  - Storage: As many VolumeClaims as requested.
// The StatefulSet guarantees that a given network identity will always map to the same storage identity.
message IoK8sApiAppsV1beta2StatefulSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the desired identities of pods in this set.
    IoK8sApiAppsV1beta2StatefulSetSpec spec = 4;

    // Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
    IoK8sApiAppsV1beta2StatefulSetStatus status = 5;
}

// StatefulSetList is a collection of StatefulSets.
message IoK8sApiAppsV1beta2StatefulSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;
    repeated IoK8sApiAppsV1beta2StatefulSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// A StatefulSetSpec is the specification of a StatefulSet.
message IoK8sApiAppsV1beta2StatefulSetSpec {
    // podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    string podManagementPolicy = 1;

    // replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    int32 replicas = 2;

    // revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    int32 revisionHistoryLimit = 3;

    // selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 4;

    // serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
    string serviceName = 5;

    // template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
    IoK8sApiCoreV1PodTemplateSpec template = 6;

    // updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
    IoK8sApiAppsV1beta2StatefulSetUpdateStrategy updateStrategy = 7;

    // volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    repeated IoK8sApiCoreV1PersistentVolumeClaim volumeClaimTemplates = 8;
}

// StatefulSetStatus represents the current state of a StatefulSet.
message IoK8sApiAppsV1beta2StatefulSetStatus {
    // collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    int32 collisionCount = 1;

    // currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    int32 currentReplicas = 2;

    // currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    string currentRevision = 3;

    // observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    int64 observedGeneration = 4;

    // readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
    int32 readyReplicas = 5;

    // replicas is the number of Pods created by the StatefulSet controller.
    int32 replicas = 6;

    // updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    string updateRevision = 7;

    // updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    int32 updatedReplicas = 8;
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
message IoK8sApiAppsV1beta2StatefulSetUpdateStrategy {
    // RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    IoK8sApiAppsV1beta2RollingUpdateStatefulSetStrategy rollingUpdate = 1;

    // Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
    string type = 2;
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
message IoK8sApiAuthenticationV1TokenReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated
    IoK8sApiAuthenticationV1TokenReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request can be authenticated.
    IoK8sApiAuthenticationV1TokenReviewStatus status = 5;
}

// TokenReviewSpec is a description of the token authentication request.
message IoK8sApiAuthenticationV1TokenReviewSpec {
    // Token is the opaque bearer token.
    string token = 1;
}

// TokenReviewStatus is the result of the token authentication request.
message IoK8sApiAuthenticationV1TokenReviewStatus {
    // Authenticated indicates that the token was associated with a known user.
    bool authenticated = 1;

    // Error indicates that the token couldn't be checked
    string error = 2;

    // User is the UserInfo associated with the provided token.
    IoK8sApiAuthenticationV1UserInfo user = 3;
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
message IoK8sApiAuthenticationV1UserInfo {
    // Any additional information provided by the authenticator.
    map<string, google.protobuf.ListValue> extra = 1;

    // The names of groups this user is a part of.
    repeated string groups = 2;

    // A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
    string uid = 3;

    // The name that uniquely identifies this user among all active users.
    string username = 4;
}

// TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
message IoK8sApiAuthenticationV1beta1TokenReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated
    IoK8sApiAuthenticationV1beta1TokenReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request can be authenticated.
    IoK8sApiAuthenticationV1beta1TokenReviewStatus status = 5;
}

// TokenReviewSpec is a description of the token authentication request.
message IoK8sApiAuthenticationV1beta1TokenReviewSpec {
    // Token is the opaque bearer token.
    string token = 1;
}

// TokenReviewStatus is the result of the token authentication request.
message IoK8sApiAuthenticationV1beta1TokenReviewStatus {
    // Authenticated indicates that the token was associated with a known user.
    bool authenticated = 1;

    // Error indicates that the token couldn't be checked
    string error = 2;

    // User is the UserInfo associated with the provided token.
    IoK8sApiAuthenticationV1beta1UserInfo user = 3;
}

// UserInfo holds the information about the user needed to implement the user.Info interface.
message IoK8sApiAuthenticationV1beta1UserInfo {
    // Any additional information provided by the authenticator.
    map<string, google.protobuf.ListValue> extra = 1;

    // The names of groups this user is a part of.
    repeated string groups = 2;

    // A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
    string uid = 3;

    // The name that uniquely identifies this user among all active users.
    string username = 4;
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
message IoK8sApiAuthorizationV1LocalSubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
    IoK8sApiAuthorizationV1SubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1SubjectAccessReviewStatus status = 5;
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
message IoK8sApiAuthorizationV1NonResourceAttributes {
    // Path is the URL path of the request
    string path = 1;

    // Verb is the standard HTTP verb
    string verb = 2;
}

// NonResourceRule holds information that describes a rule for the non-resource
message IoK8sApiAuthorizationV1NonResourceRule {
    // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
    repeated string nonResourceURLs = 1;

    // Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
    repeated string verbs = 2;
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
message IoK8sApiAuthorizationV1ResourceAttributes {
    // Group is the API Group of the Resource.  "*" means all.
    string group = 1;

    // Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
    string name = 2;

    // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
    string namespace = 3;

    // Resource is one of the existing resource types.  "*" means all.
    string resource = 4;

    // Subresource is one of the existing resource types.  "" means none.
    string subresource = 5;

    // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
    string verb = 6;

    // Version is the API Version of the Resource.  "*" means all.
    string version = 7;
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
message IoK8sApiAuthorizationV1ResourceRule {
    // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
    repeated string apiGroups = 1;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
    repeated string resourceNames = 2;

    // Resources is a list of resources this rule applies to.  ResourceAll represents all resources.  "*" means all.
    repeated string resources = 3;

    // Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
    repeated string verbs = 4;
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
message IoK8sApiAuthorizationV1SelfSubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.  user and groups must be empty
    IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1SubjectAccessReviewStatus status = 5;
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
message IoK8sApiAuthorizationV1SelfSubjectAccessReviewSpec {
    // NonResourceAttributes describes information for a non-resource access request
    IoK8sApiAuthorizationV1NonResourceAttributes nonResourceAttributes = 1;

    // ResourceAuthorizationAttributes describes information for a resource access request
    IoK8sApiAuthorizationV1ResourceAttributes resourceAttributes = 2;
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
message IoK8sApiAuthorizationV1SelfSubjectRulesReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.
    IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec spec = 4;

    // Status is filled in by the server and indicates the set of actions a user can perform.
    IoK8sApiAuthorizationV1SubjectRulesReviewStatus status = 5;
}

message IoK8sApiAuthorizationV1SelfSubjectRulesReviewSpec {
    // Namespace to evaluate rules for. Required.
    string namespace = 1;
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
message IoK8sApiAuthorizationV1SubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated
    IoK8sApiAuthorizationV1SubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1SubjectAccessReviewStatus status = 5;
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
message IoK8sApiAuthorizationV1SubjectAccessReviewSpec {
    // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
    map<string, google.protobuf.ListValue> extra = 1;

    // Groups is the groups you're testing for.
    repeated string groups = 2;

    // NonResourceAttributes describes information for a non-resource access request
    IoK8sApiAuthorizationV1NonResourceAttributes nonResourceAttributes = 3;

    // ResourceAuthorizationAttributes describes information for a resource access request
    IoK8sApiAuthorizationV1ResourceAttributes resourceAttributes = 4;

    // UID information about the requesting user.
    string uid = 5;

    // User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
    string user = 6;
}

// SubjectAccessReviewStatus
message IoK8sApiAuthorizationV1SubjectAccessReviewStatus {
    // Allowed is required.  True if the action would be allowed, false otherwise.
    bool allowed = 1;

    // EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
    string evaluationError = 2;

    // Reason is optional.  It indicates why a request was allowed or denied.
    string reason = 3;
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
message IoK8sApiAuthorizationV1SubjectRulesReviewStatus {
    // EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
    string evaluationError = 1;

    // Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
    bool incomplete = 2;

    // NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    repeated IoK8sApiAuthorizationV1NonResourceRule nonResourceRules = 3;

    // ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    repeated IoK8sApiAuthorizationV1ResourceRule resourceRules = 4;
}

// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
message IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.
    IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus status = 5;
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
message IoK8sApiAuthorizationV1beta1NonResourceAttributes {
    // Path is the URL path of the request
    string path = 1;

    // Verb is the standard HTTP verb
    string verb = 2;
}

// NonResourceRule holds information that describes a rule for the non-resource
message IoK8sApiAuthorizationV1beta1NonResourceRule {
    // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
    repeated string nonResourceURLs = 1;

    // Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
    repeated string verbs = 2;
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
message IoK8sApiAuthorizationV1beta1ResourceAttributes {
    // Group is the API Group of the Resource.  "*" means all.
    string group = 1;

    // Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
    string name = 2;

    // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
    string namespace = 3;

    // Resource is one of the existing resource types.  "*" means all.
    string resource = 4;

    // Subresource is one of the existing resource types.  "" means none.
    string subresource = 5;

    // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
    string verb = 6;

    // Version is the API Version of the Resource.  "*" means all.
    string version = 7;
}

// ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
message IoK8sApiAuthorizationV1beta1ResourceRule {
    // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
    repeated string apiGroups = 1;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
    repeated string resourceNames = 2;

    // Resources is a list of resources this rule applies to.  ResourceAll represents all resources.  "*" means all.
    repeated string resources = 3;

    // Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
    repeated string verbs = 4;
}

// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
message IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.  user and groups must be empty
    IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus status = 5;
}

// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
message IoK8sApiAuthorizationV1beta1SelfSubjectAccessReviewSpec {
    // NonResourceAttributes describes information for a non-resource access request
    IoK8sApiAuthorizationV1beta1NonResourceAttributes nonResourceAttributes = 1;

    // ResourceAuthorizationAttributes describes information for a resource access request
    IoK8sApiAuthorizationV1beta1ResourceAttributes resourceAttributes = 2;
}

// SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
message IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated.
    IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec spec = 4;

    // Status is filled in by the server and indicates the set of actions a user can perform.
    IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus status = 5;
}

message IoK8sApiAuthorizationV1beta1SelfSubjectRulesReviewSpec {
    // Namespace to evaluate rules for. Required.
    string namespace = 1;
}

// SubjectAccessReview checks whether or not a user or group can perform an action.
message IoK8sApiAuthorizationV1beta1SubjectAccessReview {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec holds information about the request being evaluated
    IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec spec = 4;

    // Status is filled in by the server and indicates whether the request is allowed or not
    IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus status = 5;
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
message IoK8sApiAuthorizationV1beta1SubjectAccessReviewSpec {
    // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
    map<string, google.protobuf.ListValue> extra = 1;

    // Groups is the groups you're testing for.
    repeated string group = 2;

    // NonResourceAttributes describes information for a non-resource access request
    IoK8sApiAuthorizationV1beta1NonResourceAttributes nonResourceAttributes = 3;

    // ResourceAuthorizationAttributes describes information for a resource access request
    IoK8sApiAuthorizationV1beta1ResourceAttributes resourceAttributes = 4;

    // UID information about the requesting user.
    string uid = 5;

    // User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
    string user = 6;
}

// SubjectAccessReviewStatus
message IoK8sApiAuthorizationV1beta1SubjectAccessReviewStatus {
    // Allowed is required.  True if the action would be allowed, false otherwise.
    bool allowed = 1;

    // EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
    string evaluationError = 2;

    // Reason is optional.  It indicates why a request was allowed or denied.
    string reason = 3;
}

// SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
message IoK8sApiAuthorizationV1beta1SubjectRulesReviewStatus {
    // EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
    string evaluationError = 1;

    // Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
    bool incomplete = 2;

    // NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    repeated IoK8sApiAuthorizationV1beta1NonResourceRule nonResourceRules = 3;

    // ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
    repeated IoK8sApiAuthorizationV1beta1ResourceRule resourceRules = 4;
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
message IoK8sApiAutoscalingV1CrossVersionObjectReference {
    // API version of the referent
    string apiVersion = 1;

    // Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
    string kind = 2;

    // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 3;
}

// configuration of a horizontal pod autoscaler.
message IoK8sApiAutoscalingV1HorizontalPodAutoscaler {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec spec = 4;

    // current information about the autoscaler.
    IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus status = 5;
}

// list of horizontal pod autoscaler objects.
message IoK8sApiAutoscalingV1HorizontalPodAutoscalerList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // list of horizontal pod autoscaler objects.
    repeated IoK8sApiAutoscalingV1HorizontalPodAutoscaler items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// specification of a horizontal pod autoscaler.
message IoK8sApiAutoscalingV1HorizontalPodAutoscalerSpec {
    // upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
    int32 maxReplicas = 1;

    // lower limit for the number of pods that can be set by the autoscaler, default 1.
    int32 minReplicas = 2;

    // reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
    IoK8sApiAutoscalingV1CrossVersionObjectReference scaleTargetRef = 3;

    // target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
    int32 targetCPUUtilizationPercentage = 4;
}

// current status of a horizontal pod autoscaler
message IoK8sApiAutoscalingV1HorizontalPodAutoscalerStatus {
    // current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
    int32 currentCPUUtilizationPercentage = 1;

    // current number of replicas of pods managed by this autoscaler.
    int32 currentReplicas = 2;

    // desired number of replicas of pods managed by this autoscaler.
    int32 desiredReplicas = 3;

    // last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
    string lastScaleTime = 4;

    // most recent generation observed by this autoscaler.
    int64 observedGeneration = 5;
}

// Scale represents a scaling request for a resource.
message IoK8sApiAutoscalingV1Scale {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    IoK8sApiAutoscalingV1ScaleSpec spec = 4;

    // current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    IoK8sApiAutoscalingV1ScaleStatus status = 5;
}

// ScaleSpec describes the attributes of a scale subresource.
message IoK8sApiAutoscalingV1ScaleSpec {
    // desired number of instances for the scaled object.
    int32 replicas = 1;
}

// ScaleStatus represents the current status of a scale subresource.
message IoK8sApiAutoscalingV1ScaleStatus {
    // actual number of observed instances of the scaled object.
    int32 replicas = 1;

    // label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
    string selector = 2;
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
message IoK8sApiAutoscalingV2beta1CrossVersionObjectReference {
    // API version of the referent
    string apiVersion = 1;

    // Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
    string kind = 2;

    // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 3;
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
message IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec spec = 4;

    // status is the current information about the autoscaler.
    IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus status = 5;
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
message IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition {
    // lastTransitionTime is the last time the condition transitioned from one status to another
    string lastTransitionTime = 1;

    // message is a human-readable explanation containing details about the transition
    string message = 2;

    // reason is the reason for the condition's last transition.
    string reason = 3;

    // status is the status of the condition (True, False, Unknown)
    string status = 4;

    // type describes the current condition
    string type = 5;
}

// HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
message IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of horizontal pod autoscaler objects.
    repeated IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // metadata is the standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
message IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerSpec {
    // maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
    int32 maxReplicas = 1;

    // metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
    repeated IoK8sApiAutoscalingV2beta1MetricSpec metrics = 2;

    // minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.
    int32 minReplicas = 3;

    // scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
    IoK8sApiAutoscalingV2beta1CrossVersionObjectReference scaleTargetRef = 4;
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
message IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerStatus {
    // conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
    repeated IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerCondition conditions = 1;

    // currentMetrics is the last read state of the metrics used by this autoscaler.
    repeated IoK8sApiAutoscalingV2beta1MetricStatus currentMetrics = 2;

    // currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
    int32 currentReplicas = 3;

    // desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
    int32 desiredReplicas = 4;

    // lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
    string lastScaleTime = 5;

    // observedGeneration is the most recent generation observed by this autoscaler.
    int64 observedGeneration = 6;
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
message IoK8sApiAutoscalingV2beta1MetricSpec {
    // object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
    IoK8sApiAutoscalingV2beta1ObjectMetricSource object = 1;

    // pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
    IoK8sApiAutoscalingV2beta1PodsMetricSource pods = 2;

    // resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
    IoK8sApiAutoscalingV2beta1ResourceMetricSource resource = 3;

    // type is the type of metric source.  It should match one of the fields below.
    string type = 4;
}

// MetricStatus describes the last-read state of a single metric.
message IoK8sApiAutoscalingV2beta1MetricStatus {
    // object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
    IoK8sApiAutoscalingV2beta1ObjectMetricStatus object = 1;

    // pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
    IoK8sApiAutoscalingV2beta1PodsMetricStatus pods = 2;

    // resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
    IoK8sApiAutoscalingV2beta1ResourceMetricStatus resource = 3;

    // type is the type of metric source.  It will match one of the fields below.
    string type = 4;
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
message IoK8sApiAutoscalingV2beta1ObjectMetricSource {
    // metricName is the name of the metric in question.
    string metricName = 1;

    // target is the described Kubernetes object.
    IoK8sApiAutoscalingV2beta1CrossVersionObjectReference target = 2;

    // targetValue is the target value of the metric (as a quantity).
    string targetValue = 3;
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
message IoK8sApiAutoscalingV2beta1ObjectMetricStatus {
    // currentValue is the current value of the metric (as a quantity).
    string currentValue = 1;

    // metricName is the name of the metric in question.
    string metricName = 2;

    // target is the described Kubernetes object.
    IoK8sApiAutoscalingV2beta1CrossVersionObjectReference target = 3;
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
message IoK8sApiAutoscalingV2beta1PodsMetricSource {
    // metricName is the name of the metric in question
    string metricName = 1;

    // targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
    string targetAverageValue = 2;
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
message IoK8sApiAutoscalingV2beta1PodsMetricStatus {
    // currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
    string currentAverageValue = 1;

    // metricName is the name of the metric in question
    string metricName = 2;
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
message IoK8sApiAutoscalingV2beta1ResourceMetricSource {
    // name is the name of the resource in question.
    string name = 1;

    // targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
    int32 targetAverageUtilization = 2;

    // targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
    string targetAverageValue = 3;
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
message IoK8sApiAutoscalingV2beta1ResourceMetricStatus {
    // currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
    int32 currentAverageUtilization = 1;

    // currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type. It will always be set, regardless of the corresponding metric specification.
    string currentAverageValue = 2;

    // name is the name of the resource in question.
    string name = 3;
}

// Job represents the configuration of a single job.
message IoK8sApiBatchV1Job {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiBatchV1JobSpec spec = 4;

    // Current status of a job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiBatchV1JobStatus status = 5;
}

// JobCondition describes current state of a job.
message IoK8sApiBatchV1JobCondition {
    // Last time the condition was checked.
    string lastProbeTime = 1;

    // Last time the condition transit from one status to another.
    string lastTransitionTime = 2;

    // Human readable message indicating details about last transition.
    string message = 3;

    // (brief) reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of job condition, Complete or Failed.
    string type = 6;
}

// JobList is a collection of jobs.
message IoK8sApiBatchV1JobList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of Jobs.
    repeated IoK8sApiBatchV1Job items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// JobSpec describes how the job execution will look like.
message IoK8sApiBatchV1JobSpec {
    // Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
    int64 activeDeadlineSeconds = 1;

    // Specifies the number of retries before marking this job failed. Defaults to 6
    int32 backoffLimit = 2;

    // Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    int32 completions = 3;

    // manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
    bool manualSelector = 4;

    // Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    int32 parallelism = 5;

    // A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 6;

    // Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    IoK8sApiCoreV1PodTemplateSpec template = 7;
}

// JobStatus represents the current state of a Job.
message IoK8sApiBatchV1JobStatus {
    // The number of actively running pods.
    int32 active = 1;

    // Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
    string completionTime = 2;

    // The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
    repeated IoK8sApiBatchV1JobCondition conditions = 3;

    // The number of pods which reached phase Failed.
    int32 failed = 4;

    // Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
    string startTime = 5;

    // The number of pods which reached phase Succeeded.
    int32 succeeded = 6;
}

// CronJob represents the configuration of a single cron job.
message IoK8sApiBatchV1beta1CronJob {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiBatchV1beta1CronJobSpec spec = 4;

    // Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiBatchV1beta1CronJobStatus status = 5;
}

// CronJobList is a collection of cron jobs.
message IoK8sApiBatchV1beta1CronJobList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // items is the list of CronJobs.
    repeated IoK8sApiBatchV1beta1CronJob items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
message IoK8sApiBatchV1beta1CronJobSpec {
    // Specifies how to treat concurrent executions of a Job. Defaults to Allow.
    string concurrencyPolicy = 1;

    // The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    int32 failedJobsHistoryLimit = 2;

    // Specifies the job that will be created when executing a CronJob.
    IoK8sApiBatchV1beta1JobTemplateSpec jobTemplate = 3;

    // The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    string schedule = 4;

    // Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
    int64 startingDeadlineSeconds = 5;

    // The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.
    int32 successfulJobsHistoryLimit = 6;

    // This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
    bool suspend = 7;
}

// CronJobStatus represents the current state of a cron job.
message IoK8sApiBatchV1beta1CronJobStatus {
    // A list of pointers to currently running jobs.
    repeated IoK8sApiCoreV1ObjectReference active = 1;

    // Information when was the last time the job was successfully scheduled.
    string lastScheduleTime = 2;
}

// JobTemplateSpec describes the data a Job should have when created from a template
message IoK8sApiBatchV1beta1JobTemplateSpec {
    // Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 1;

    // Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiBatchV1JobSpec spec = 2;
}

// Describes a certificate signing request
message IoK8sApiCertificatesV1beta1CertificateSigningRequest {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The certificate request itself and any additional information.
    IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec spec = 4;

    // Derived information about the request.
    IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus status = 5;
}

message IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition {
    // timestamp for the last update to this condition
    string lastUpdateTime = 1;

    // human readable message with details about the request state
    string message = 2;

    // brief reason for the request state
    string reason = 3;

    // request approval state, currently Approved or Denied.
    string type = 4;
}

message IoK8sApiCertificatesV1beta1CertificateSigningRequestList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;
    repeated IoK8sApiCertificatesV1beta1CertificateSigningRequest items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
message IoK8sApiCertificatesV1beta1CertificateSigningRequestSpec {
    // Extra information about the requesting user. See user.Info interface for details.
    map<string, google.protobuf.ListValue> extra = 1;

    // Group information about the requesting user. See user.Info interface for details.
    repeated string groups = 2;

    // Base64-encoded PKCS#10 CSR data
    bytes request = 3;

    // UID information about the requesting user. See user.Info interface for details.
    string uid = 4;

    // allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
    //      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
    repeated string usages = 5;

    // Information about the requesting user. See user.Info interface for details.
    string username = 6;
}

message IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus {
    // If request was approved, the controller will place the issued certificate here.
    bytes certificate = 1;

    // Conditions applied to the request, such as approval or denial.
    repeated IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition conditions = 2;
}

// Represents a Persistent Disk resource in AWS.
// 
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource {
    // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    string fsType = 1;

    // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    int32 partition = 2;

    // Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    bool readOnly = 3;

    // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    string volumeID = 4;
}

// Affinity is a group of affinity scheduling rules.
message IoK8sApiCoreV1Affinity {
    // Describes node affinity scheduling rules for the pod.
    IoK8sApiCoreV1NodeAffinity nodeAffinity = 1;

    // Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    IoK8sApiCoreV1PodAffinity podAffinity = 2;

    // Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    IoK8sApiCoreV1PodAntiAffinity podAntiAffinity = 3;
}

// AttachedVolume describes a volume attached to a node
message IoK8sApiCoreV1AttachedVolume {
    // DevicePath represents the device path where the volume should be available
    string devicePath = 1;

    // Name of the attached volume
    string name = 2;
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
message IoK8sApiCoreV1AzureDiskVolumeSource {
    // Host Caching mode: None, Read Only, Read Write.
    string cachingMode = 1;

    // The Name of the data disk in the blob storage
    string diskName = 2;

    // The URI the data disk in the blob storage
    string diskURI = 3;

    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 4;

    // Expected values Shared: mulitple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    string kind = 5;

    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 6;
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
message IoK8sApiCoreV1AzureFilePersistentVolumeSource {
    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 1;

    // the name of secret that contains Azure Storage Account Name and Key
    string secretName = 2;

    // the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
    string secretNamespace = 3;

    // Share Name
    string shareName = 4;
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
message IoK8sApiCoreV1AzureFileVolumeSource {
    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 1;

    // the name of secret that contains Azure Storage Account Name and Key
    string secretName = 2;

    // Share Name
    string shareName = 3;
}

// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
message IoK8sApiCoreV1Binding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The target object that you want to bind to the standard object.
    IoK8sApiCoreV1ObjectReference target = 4;
}

// Adds and removes POSIX capabilities from running containers.
message IoK8sApiCoreV1Capabilities {
    // Added capabilities
    repeated string add = 1;

    // Removed capabilities
    repeated string drop = 2;
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1CephFSPersistentVolumeSource {
    // Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    repeated string monitors = 1;

    // Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    string path = 2;

    // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    bool readOnly = 3;

    // Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    string secretFile = 4;

    // Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    IoK8sApiCoreV1SecretReference secretRef = 5;

    // Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    string user = 6;
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1CephFSVolumeSource {
    // Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    repeated string monitors = 1;

    // Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    string path = 2;

    // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    bool readOnly = 3;

    // Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    string secretFile = 4;

    // Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    IoK8sApiCoreV1LocalObjectReference secretRef = 5;

    // Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
    string user = 6;
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1CinderVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    string fsType = 1;

    // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    bool readOnly = 2;

    // volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    string volumeID = 3;
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
message IoK8sApiCoreV1ClientIPConfig {
    // timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
    int32 timeoutSeconds = 1;
}

// Information about the condition of a component.
message IoK8sApiCoreV1ComponentCondition {
    // Condition error code for a component. For example, a health check error code.
    string error = 1;

    // Message about the condition for a component. For example, information about a health check.
    string message = 2;

    // Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
    string status = 3;

    // Type of condition for a component. Valid value: "Healthy"
    string type = 4;
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info.
message IoK8sApiCoreV1ComponentStatus {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of component conditions observed
    repeated IoK8sApiCoreV1ComponentCondition conditions = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;
}

// Status of all the conditions for the component as a list of ComponentStatus objects.
message IoK8sApiCoreV1ComponentStatusList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of ComponentStatus objects.
    repeated IoK8sApiCoreV1ComponentStatus items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ConfigMap holds configuration data for pods to consume.
message IoK8sApiCoreV1ConfigMap {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'.
    map<string, string> data = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
// 
// The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
message IoK8sApiCoreV1ConfigMapEnvSource {
    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 1;

    // Specify whether the ConfigMap must be defined
    bool optional = 2;
}

// Selects a key from a ConfigMap.
message IoK8sApiCoreV1ConfigMapKeySelector {
    // The key to select.
    string key = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // Specify whether the ConfigMap or it's key must be defined
    bool optional = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message IoK8sApiCoreV1ConfigMapList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of ConfigMaps.
    repeated IoK8sApiCoreV1ConfigMap items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// Adapts a ConfigMap into a projected volume.
// 
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
message IoK8sApiCoreV1ConfigMapProjection {
    // If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // Specify whether the ConfigMap or it's keys must be defined
    bool optional = 3;
}

// Adapts a ConfigMap into a volume.
// 
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1ConfigMapVolumeSource {
    // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 2;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 3;

    // Specify whether the ConfigMap or it's keys must be defined
    bool optional = 4;
}

// A single application container that you want to run within a pod.
message IoK8sApiCoreV1Container {
    // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    repeated string args = 1;

    // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    repeated string command = 2;

    // List of environment variables to set in the container. Cannot be updated.
    repeated IoK8sApiCoreV1EnvVar env = 3;

    // List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    repeated IoK8sApiCoreV1EnvFromSource envFrom = 4;

    // Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    string image = 5;

    // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    string imagePullPolicy = 6;

    // Actions that the management system should take in response to container lifecycle events. Cannot be updated.
    IoK8sApiCoreV1Lifecycle lifecycle = 7;

    // Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    IoK8sApiCoreV1Probe livenessProbe = 8;

    // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    string name = 9;

    // List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
    repeated IoK8sApiCoreV1ContainerPort ports = 10;

    // Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    IoK8sApiCoreV1Probe readinessProbe = 11;

    // Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    IoK8sApiCoreV1ResourceRequirements resources = 12;

    // Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md
    IoK8sApiCoreV1SecurityContext securityContext = 13;

    // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    bool stdin = 14;

    // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    bool stdinOnce = 15;

    // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    string terminationMessagePath = 16;

    // Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    string terminationMessagePolicy = 17;

    // Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    bool tty = 18;

    // Pod volumes to mount into the container's filesystem. Cannot be updated.
    repeated IoK8sApiCoreV1VolumeMount volumeMounts = 19;

    // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    string workingDir = 20;
}

// Describe a container image
message IoK8sApiCoreV1ContainerImage {
    // Names by which this image is known. e.g. ["gcr.io/google_containers/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
    repeated string names = 1;

    // The size of the image in bytes.
    int64 sizeBytes = 2;
}

// ContainerPort represents a network port in a single container.
message IoK8sApiCoreV1ContainerPort {
    // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    int32 containerPort = 1;

    // What host IP to bind the external port to.
    string hostIP = 2;

    // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    int32 hostPort = 3;

    // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    string name = 4;

    // Protocol for port. Must be UDP or TCP. Defaults to "TCP".
    string protocol = 5;
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
message IoK8sApiCoreV1ContainerState {
    // Details about a running container
    IoK8sApiCoreV1ContainerStateRunning running = 1;

    // Details about a terminated container
    IoK8sApiCoreV1ContainerStateTerminated terminated = 2;

    // Details about a waiting container
    IoK8sApiCoreV1ContainerStateWaiting waiting = 3;
}

// ContainerStateRunning is a running state of a container.
message IoK8sApiCoreV1ContainerStateRunning {
    // Time at which the container was last (re-)started
    string startedAt = 1;
}

// ContainerStateTerminated is a terminated state of a container.
message IoK8sApiCoreV1ContainerStateTerminated {
    // Container's ID in the format 'docker://<container_id>'
    string containerID = 1;

    // Exit status from the last termination of the container
    int32 exitCode = 2;

    // Time at which the container last terminated
    string finishedAt = 3;

    // Message regarding the last termination of the container
    string message = 4;

    // (brief) reason from the last termination of the container
    string reason = 5;

    // Signal from the last termination of the container
    int32 signal = 6;

    // Time at which previous execution of the container started
    string startedAt = 7;
}

// ContainerStateWaiting is a waiting state of a container.
message IoK8sApiCoreV1ContainerStateWaiting {
    // Message regarding why the container is not yet running.
    string message = 1;

    // (brief) reason the container is not yet running.
    string reason = 2;
}

// ContainerStatus contains details for the current status of this container.
message IoK8sApiCoreV1ContainerStatus {
    // Container's ID in the format 'docker://<container_id>'.
    string containerID = 1;

    // The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
    string image = 2;

    // ImageID of the container's image.
    string imageID = 3;

    // Details about the container's last termination condition.
    IoK8sApiCoreV1ContainerState lastState = 4;

    // This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
    string name = 5;

    // Specifies whether the container has passed its readiness probe.
    bool ready = 6;

    // The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
    int32 restartCount = 7;

    // Details about the container's current condition.
    IoK8sApiCoreV1ContainerState state = 8;
}

// DaemonEndpoint contains information about a single Daemon endpoint.
message IoK8sApiCoreV1DaemonEndpoint {
    // Port number of the given endpoint.
    int32 Port = 1;
}

// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
message IoK8sApiCoreV1DownwardAPIProjection {
    // Items is a list of DownwardAPIVolume file
    repeated IoK8sApiCoreV1DownwardAPIVolumeFile items = 1;
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
message IoK8sApiCoreV1DownwardAPIVolumeFile {
    // Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    IoK8sApiCoreV1ObjectFieldSelector fieldRef = 1;

    // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 mode = 2;

    // Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    string path = 3;

    // Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    IoK8sApiCoreV1ResourceFieldSelector resourceFieldRef = 4;
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1DownwardAPIVolumeSource {
    // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // Items is a list of downward API volume file
    repeated IoK8sApiCoreV1DownwardAPIVolumeFile items = 2;
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1EmptyDirVolumeSource {
    // What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    string medium = 1;

    // Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
    string sizeLimit = 2;
}

// EndpointAddress is a tuple that describes single IP address.
message IoK8sApiCoreV1EndpointAddress {
    // The Hostname of this endpoint
    string hostname = 1;

    // The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
    string ip = 2;

    // Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
    string nodeName = 3;

    // Reference to object providing the endpoint.
    IoK8sApiCoreV1ObjectReference targetRef = 4;
}

// EndpointPort is a tuple that describes a single port.
message IoK8sApiCoreV1EndpointPort {
    // The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.
    string name = 1;

    // The port number of the endpoint.
    int32 port = 2;

    // The IP protocol for this port. Must be UDP or TCP. Default is TCP.
    string protocol = 3;
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
//   {
//     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//     Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//   }
// The resulting set of endpoints can be viewed as:
//     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
//     b: [ 10.10.1.1:309, 10.10.2.2:309 ]
message IoK8sApiCoreV1EndpointSubset {
    // IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
    repeated IoK8sApiCoreV1EndpointAddress addresses = 1;

    // IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
    repeated IoK8sApiCoreV1EndpointAddress notReadyAddresses = 2;

    // Port numbers available on the related IP addresses.
    repeated IoK8sApiCoreV1EndpointPort ports = 3;
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
//   Name: "mysvc",
//   Subsets: [
//     {
//       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
//       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
//     },
//     {
//       Addresses: [{"ip": "10.10.3.3"}],
//       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
//     },
//  ]
message IoK8sApiCoreV1Endpoints {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
    repeated IoK8sApiCoreV1EndpointSubset subsets = 4;
}

// EndpointsList is a list of endpoints.
message IoK8sApiCoreV1EndpointsList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of endpoints.
    repeated IoK8sApiCoreV1Endpoints items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// EnvFromSource represents the source of a set of ConfigMaps
message IoK8sApiCoreV1EnvFromSource {
    // The ConfigMap to select from
    IoK8sApiCoreV1ConfigMapEnvSource configMapRef = 1;

    // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    string prefix = 2;

    // The Secret to select from
    IoK8sApiCoreV1SecretEnvSource secretRef = 3;
}

// EnvVar represents an environment variable present in a Container.
message IoK8sApiCoreV1EnvVar {
    // Name of the environment variable. Must be a C_IDENTIFIER.
    string name = 1;

    // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    string value = 2;

    // Source for the environment variable's value. Cannot be used if value is not empty.
    IoK8sApiCoreV1EnvVarSource valueFrom = 3;
}

// EnvVarSource represents a source for the value of an EnvVar.
message IoK8sApiCoreV1EnvVarSource {
    // Selects a key of a ConfigMap.
    IoK8sApiCoreV1ConfigMapKeySelector configMapKeyRef = 1;

    // Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
    IoK8sApiCoreV1ObjectFieldSelector fieldRef = 2;

    // Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    IoK8sApiCoreV1ResourceFieldSelector resourceFieldRef = 3;

    // Selects a key of a secret in the pod's namespace
    IoK8sApiCoreV1SecretKeySelector secretKeyRef = 4;
}

// Event is a report of an event somewhere in the cluster.
message IoK8sApiCoreV1Event {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // The number of times this event has occurred.
    int32 count = 2;

    // The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
    string firstTimestamp = 3;

    // The object that this event is about.
    IoK8sApiCoreV1ObjectReference involvedObject = 4;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 5;

    // The time at which the most recent occurrence of this event was recorded.
    string lastTimestamp = 6;

    // A human-readable description of the status of this operation.
    string message = 7;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 8;

    // This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
    string reason = 9;

    // The component reporting this event. Should be a short machine understandable string.
    IoK8sApiCoreV1EventSource source = 10;

    // Type of this event (Normal, Warning), new types could be added in the future
    string type = 11;
}

// EventList is a list of events.
message IoK8sApiCoreV1EventList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of events
    repeated IoK8sApiCoreV1Event items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// EventSource contains information for an event.
message IoK8sApiCoreV1EventSource {
    // Component from which the event is generated.
    string component = 1;

    // Node name on which the event is generated.
    string host = 2;
}

// ExecAction describes a "run in container" action.
message IoK8sApiCoreV1ExecAction {
    // Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    repeated string command = 1;
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1FCVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // Optional: FC target lun number
    int32 lun = 2;

    // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 3;

    // Optional: FC target worldwide names (WWNs)
    repeated string targetWWNs = 4;

    // Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    repeated string wwids = 5;
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
message IoK8sApiCoreV1FlexVolumeSource {
    // Driver is the name of the driver to use for this volume.
    string driver = 1;

    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    string fsType = 2;

    // Optional: Extra command options if any.
    map<string, string> options = 3;

    // Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 4;

    // Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    IoK8sApiCoreV1LocalObjectReference secretRef = 5;
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1FlockerVolumeSource {
    // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
    string datasetName = 1;

    // UUID of the dataset. This is unique identifier of a Flocker dataset
    string datasetUUID = 2;
}

// Represents a Persistent Disk resource in Google Compute Engine.
// 
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
message IoK8sApiCoreV1GCEPersistentDiskVolumeSource {
    // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    string fsType = 1;

    // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    int32 partition = 2;

    // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    string pdName = 3;

    // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    bool readOnly = 4;
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
message IoK8sApiCoreV1GitRepoVolumeSource {
    // Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    string directory = 1;

    // Repository URL
    string repository = 2;

    // Commit hash for the specified revision.
    string revision = 3;
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1GlusterfsVolumeSource {
    // EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
    string endpoints = 1;

    // Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
    string path = 2;

    // ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
    bool readOnly = 3;
}

// HTTPGetAction describes an action based on HTTP Get requests.
message IoK8sApiCoreV1HTTPGetAction {
    // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    string host = 1;

    // Custom headers to set in the request. HTTP allows repeated headers.
    repeated IoK8sApiCoreV1HTTPHeader httpHeaders = 2;

    // Path to access on the HTTP server.
    string path = 3;

    // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    string port = 4;

    // Scheme to use for connecting to the host. Defaults to HTTP.
    string scheme = 5;
}

// HTTPHeader describes a custom header to be used in HTTP probes
message IoK8sApiCoreV1HTTPHeader {
    // The header field name
    string name = 1;

    // The header field value
    string value = 2;
}

// Handler defines a specific action that should be taken
message IoK8sApiCoreV1Handler {
    // One and only one of the following should be specified. Exec specifies the action to take.
    IoK8sApiCoreV1ExecAction exec = 1;

    // HTTPGet specifies the http request to perform.
    IoK8sApiCoreV1HTTPGetAction httpGet = 2;

    // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
    IoK8sApiCoreV1TCPSocketAction tcpSocket = 3;
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
message IoK8sApiCoreV1HostAlias {
    // Hostnames for the above IP address.
    repeated string hostnames = 1;

    // IP address of the host file entry.
    string ip = 2;
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1HostPathVolumeSource {
    // Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    string path = 1;

    // Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    string type = 2;
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1ISCSIVolumeSource {
    // whether support iSCSI Discovery CHAP authentication
    bool chapAuthDiscovery = 1;

    // whether support iSCSI Session CHAP authentication
    bool chapAuthSession = 2;

    // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    string fsType = 3;

    // Custom iSCSI initiator name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    string initiatorName = 4;

    // Target iSCSI Qualified Name.
    string iqn = 5;

    // Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
    string iscsiInterface = 6;

    // iSCSI target lun number.
    int32 lun = 7;

    // iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    repeated string portals = 8;

    // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    bool readOnly = 9;

    // CHAP secret for iSCSI target and initiator authentication
    IoK8sApiCoreV1LocalObjectReference secretRef = 10;

    // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    string targetPortal = 11;
}

// Maps a string key to a path within a volume.
message IoK8sApiCoreV1KeyToPath {
    // The key to project.
    string key = 1;

    // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 mode = 2;

    // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    string path = 3;
}

// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
message IoK8sApiCoreV1Lifecycle {
    // PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    IoK8sApiCoreV1Handler postStart = 1;

    // PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    IoK8sApiCoreV1Handler preStop = 2;
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
message IoK8sApiCoreV1LimitRange {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1LimitRangeSpec spec = 4;
}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
message IoK8sApiCoreV1LimitRangeItem {
    // Default resource requirement limit value by resource name if resource limit is omitted.
    map<string, string> default = 1;

    // DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
    map<string, string> defaultRequest = 2;

    // Max usage constraints on this kind by resource name.
    map<string, string> max = 3;

    // MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
    map<string, string> maxLimitRequestRatio = 4;

    // Min usage constraints on this kind by resource name.
    map<string, string> min = 5;

    // Type of resource that this limit applies to.
    string type = 6;
}

// LimitRangeList is a list of LimitRange items.
message IoK8sApiCoreV1LimitRangeList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of LimitRange objects. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_limit_range.md
    repeated IoK8sApiCoreV1LimitRange items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
message IoK8sApiCoreV1LimitRangeSpec {
    // Limits is the list of LimitRangeItem objects that are enforced.
    repeated IoK8sApiCoreV1LimitRangeItem limits = 1;
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
message IoK8sApiCoreV1LoadBalancerIngress {
    // Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
    string hostname = 1;

    // IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
    string ip = 2;
}

// LoadBalancerStatus represents the status of a load-balancer.
message IoK8sApiCoreV1LoadBalancerStatus {
    // Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
    repeated IoK8sApiCoreV1LoadBalancerIngress ingress = 1;
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
message IoK8sApiCoreV1LocalObjectReference {
    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 1;
}

// Local represents directly-attached storage with node affinity
message IoK8sApiCoreV1LocalVolumeSource {
    // The full path to the volume on the node For alpha, this path must be a directory Once block as a source is supported, then this path can point to a block device
    string path = 1;
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1NFSVolumeSource {
    // Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    string path = 1;

    // ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    bool readOnly = 2;

    // Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    string server = 3;
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
message IoK8sApiCoreV1Namespace {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NamespaceSpec spec = 4;

    // Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NamespaceStatus status = 5;
}

// NamespaceList is a list of Namespaces.
message IoK8sApiCoreV1NamespaceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    repeated IoK8sApiCoreV1Namespace items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// NamespaceSpec describes the attributes on a Namespace.
message IoK8sApiCoreV1NamespaceSpec {
    // Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://git.k8s.io/community/contributors/design-proposals/namespaces.md#finalizers
    repeated string finalizers = 1;
}

// NamespaceStatus is information about the current status of a Namespace.
message IoK8sApiCoreV1NamespaceStatus {
    // Phase is the current lifecycle phase of the namespace. More info: https://git.k8s.io/community/contributors/design-proposals/namespaces.md#phases
    string phase = 1;
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
message IoK8sApiCoreV1Node {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NodeSpec spec = 4;

    // Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1NodeStatus status = 5;
}

// NodeAddress contains information for the node's address.
message IoK8sApiCoreV1NodeAddress {
    // The node address.
    string address = 1;

    // Node address type, one of Hostname, ExternalIP or InternalIP.
    string type = 2;
}

// Node affinity is a group of node affinity scheduling rules.
message IoK8sApiCoreV1NodeAffinity {
    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    repeated IoK8sApiCoreV1PreferredSchedulingTerm preferredDuringSchedulingIgnoredDuringExecution = 1;

    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    IoK8sApiCoreV1NodeSelector requiredDuringSchedulingIgnoredDuringExecution = 2;
}

// NodeCondition contains condition information for a node.
message IoK8sApiCoreV1NodeCondition {
    // Last time we got an update on a given condition.
    string lastHeartbeatTime = 1;

    // Last time the condition transit from one status to another.
    string lastTransitionTime = 2;

    // Human readable message indicating details about last transition.
    string message = 3;

    // (brief) reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of node condition.
    string type = 6;
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.
message IoK8sApiCoreV1NodeConfigSource {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;
    IoK8sApiCoreV1ObjectReference configMapRef = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
message IoK8sApiCoreV1NodeDaemonEndpoints {
    // Endpoint on which Kubelet is listening.
    IoK8sApiCoreV1DaemonEndpoint kubeletEndpoint = 1;
}

// NodeList is the whole list of all Nodes which have been registered with master.
message IoK8sApiCoreV1NodeList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of nodes
    repeated IoK8sApiCoreV1Node items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
message IoK8sApiCoreV1NodeSelector {
    // Required. A list of node selector terms. The terms are ORed.
    repeated IoK8sApiCoreV1NodeSelectorTerm nodeSelectorTerms = 1;
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
message IoK8sApiCoreV1NodeSelectorRequirement {
    // The label key that the selector applies to.
    string key = 1;

    // Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    string operator = 2;

    // An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    repeated string values = 3;
}

// A null or empty node selector term matches no objects.
message IoK8sApiCoreV1NodeSelectorTerm {
    // Required. A list of node selector requirements. The requirements are ANDed.
    repeated IoK8sApiCoreV1NodeSelectorRequirement matchExpressions = 1;
}

// NodeSpec describes the attributes that a node is created with.
message IoK8sApiCoreV1NodeSpec {
    // If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field
    IoK8sApiCoreV1NodeConfigSource configSource = 1;

    // External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.
    string externalID = 2;

    // PodCIDR represents the pod IP range assigned to the node.
    string podCIDR = 3;

    // ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
    string providerID = 4;

    // If specified, the node's taints.
    repeated IoK8sApiCoreV1Taint taints = 5;

    // Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
    bool unschedulable = 6;
}

// NodeStatus is information about the current status of a node.
message IoK8sApiCoreV1NodeStatus {
    // List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
    repeated IoK8sApiCoreV1NodeAddress addresses = 1;

    // Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    map<string, string> allocatable = 2;

    // Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    map<string, string> capacity = 3;

    // Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
    repeated IoK8sApiCoreV1NodeCondition conditions = 4;

    // Endpoints of daemons running on the Node.
    IoK8sApiCoreV1NodeDaemonEndpoints daemonEndpoints = 5;

    // List of container images on this node
    repeated IoK8sApiCoreV1ContainerImage images = 6;

    // Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
    IoK8sApiCoreV1NodeSystemInfo nodeInfo = 7;

    // NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
    string phase = 8;

    // List of volumes that are attached to the node.
    repeated IoK8sApiCoreV1AttachedVolume volumesAttached = 9;

    // List of attachable volumes in use (mounted) by the node.
    repeated string volumesInUse = 10;
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
message IoK8sApiCoreV1NodeSystemInfo {
    // The Architecture reported by the node
    string architecture = 1;

    // Boot ID reported by the node.
    string bootID = 2;

    // ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
    string containerRuntimeVersion = 3;

    // Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
    string kernelVersion = 4;

    // KubeProxy Version reported by the node.
    string kubeProxyVersion = 5;

    // Kubelet Version reported by the node.
    string kubeletVersion = 6;

    // MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
    string machineID = 7;

    // The Operating System reported by the node
    string operatingSystem = 8;

    // OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
    string osImage = 9;

    // SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
    string systemUUID = 10;
}

// ObjectFieldSelector selects an APIVersioned field of an object.
message IoK8sApiCoreV1ObjectFieldSelector {
    // Version of the schema the FieldPath is written in terms of, defaults to "v1".
    string apiVersion = 1;

    // Path of the field to select in the specified API version.
    string fieldPath = 2;
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
message IoK8sApiCoreV1ObjectReference {
    // API version of the referent.
    string apiVersion = 1;

    // If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    string fieldPath = 2;

    // Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 4;

    // Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    string namespace = 5;

    // Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
    string resourceVersion = 6;

    // UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    string uid = 7;
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
message IoK8sApiCoreV1PersistentVolume {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    IoK8sApiCoreV1PersistentVolumeSpec spec = 4;

    // Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    IoK8sApiCoreV1PersistentVolumeStatus status = 5;
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
message IoK8sApiCoreV1PersistentVolumeClaim {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    IoK8sApiCoreV1PersistentVolumeClaimSpec spec = 4;

    // Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    IoK8sApiCoreV1PersistentVolumeClaimStatus status = 5;
}

// PersistentVolumeClaimCondition contails details about state of pvc
message IoK8sApiCoreV1PersistentVolumeClaimCondition {
    // Last time we probed the condition.
    string lastProbeTime = 1;

    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 2;

    // Human-readable message indicating details about last transition.
    string message = 3;

    // Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
    string reason = 4;
    string status = 5;
    string type = 6;
}

// PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
message IoK8sApiCoreV1PersistentVolumeClaimList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    repeated IoK8sApiCoreV1PersistentVolumeClaim items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
message IoK8sApiCoreV1PersistentVolumeClaimSpec {
    // AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    repeated string accessModes = 1;

    // Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    IoK8sApiCoreV1ResourceRequirements resources = 2;

    // A label query over volumes to consider for binding.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    string storageClassName = 4;

    // VolumeName is the binding reference to the PersistentVolume backing this claim.
    string volumeName = 5;
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
message IoK8sApiCoreV1PersistentVolumeClaimStatus {
    // AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    repeated string accessModes = 1;

    // Represents the actual resources of the underlying volume.
    map<string, string> capacity = 2;

    // Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
    repeated IoK8sApiCoreV1PersistentVolumeClaimCondition conditions = 3;

    // Phase represents the current phase of PersistentVolumeClaim.
    string phase = 4;
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
message IoK8sApiCoreV1PersistentVolumeClaimVolumeSource {
    // ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    string claimName = 1;

    // Will force the ReadOnly setting in VolumeMounts. Default false.
    bool readOnly = 2;
}

// PersistentVolumeList is a list of PersistentVolume items.
message IoK8sApiCoreV1PersistentVolumeList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
    repeated IoK8sApiCoreV1PersistentVolume items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PersistentVolumeSpec is the specification of a persistent volume.
message IoK8sApiCoreV1PersistentVolumeSpec {
    // AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
    repeated string accessModes = 1;

    // AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;

    // AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureDiskVolumeSource azureDisk = 3;

    // AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureFilePersistentVolumeSource azureFile = 4;

    // A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    map<string, string> capacity = 5;

    // CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1CephFSPersistentVolumeSource cephfs = 6;

    // Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    IoK8sApiCoreV1CinderVolumeSource cinder = 7;

    // ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
    IoK8sApiCoreV1ObjectReference claimRef = 8;

    // FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    IoK8sApiCoreV1FCVolumeSource fc = 9;

    // FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
    IoK8sApiCoreV1FlexVolumeSource flexVolume = 10;

    // Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
    IoK8sApiCoreV1FlockerVolumeSource flocker = 11;

    // GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    IoK8sApiCoreV1GCEPersistentDiskVolumeSource gcePersistentDisk = 12;

    // Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
    IoK8sApiCoreV1GlusterfsVolumeSource glusterfs = 13;

    // HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    IoK8sApiCoreV1HostPathVolumeSource hostPath = 14;

    // ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
    IoK8sApiCoreV1ISCSIVolumeSource iscsi = 15;

    // Local represents directly-attached storage with node affinity
    IoK8sApiCoreV1LocalVolumeSource local = 16;

    // A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
    repeated string mountOptions = 17;

    // NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    IoK8sApiCoreV1NFSVolumeSource nfs = 18;

    // What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
    string persistentVolumeReclaimPolicy = 19;

    // PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    IoK8sApiCoreV1PhotonPersistentDiskVolumeSource photonPersistentDisk = 20;

    // PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1PortworxVolumeSource portworxVolume = 21;

    // Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1QuobyteVolumeSource quobyte = 22;

    // RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
    IoK8sApiCoreV1RBDVolumeSource rbd = 23;

    // ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    IoK8sApiCoreV1ScaleIOPersistentVolumeSource scaleIO = 24;

    // Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
    string storageClassName = 25;

    // StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md
    IoK8sApiCoreV1StorageOSPersistentVolumeSource storageos = 26;

    // VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1VsphereVirtualDiskVolumeSource vsphereVolume = 27;
}

// PersistentVolumeStatus is the current status of a persistent volume.
message IoK8sApiCoreV1PersistentVolumeStatus {
    // A human-readable message indicating details about why the volume is in this state.
    string message = 1;

    // Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
    string phase = 2;

    // Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
    string reason = 3;
}

// Represents a Photon Controller persistent disk resource.
message IoK8sApiCoreV1PhotonPersistentDiskVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // ID that identifies Photon Controller persistent disk
    string pdID = 2;
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
message IoK8sApiCoreV1Pod {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodSpec spec = 4;

    // Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodStatus status = 5;
}

// Pod affinity is a group of inter pod affinity scheduling rules.
message IoK8sApiCoreV1PodAffinity {
    // The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    repeated IoK8sApiCoreV1WeightedPodAffinityTerm preferredDuringSchedulingIgnoredDuringExecution = 1;

    // If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    repeated IoK8sApiCoreV1PodAffinityTerm requiredDuringSchedulingIgnoredDuringExecution = 2;
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running
message IoK8sApiCoreV1PodAffinityTerm {
    // A label query over a set of resources, in this case pods.
    IoK8sApimachineryPkgApisMetaV1LabelSelector labelSelector = 1;

    // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    repeated string namespaces = 2;

    // This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as "all topologies" ("all topologies" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed.
    string topologyKey = 3;
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
message IoK8sApiCoreV1PodAntiAffinity {
    // The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    repeated IoK8sApiCoreV1WeightedPodAffinityTerm preferredDuringSchedulingIgnoredDuringExecution = 1;

    // If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    repeated IoK8sApiCoreV1PodAffinityTerm requiredDuringSchedulingIgnoredDuringExecution = 2;
}

// PodCondition contains details for the current condition of this pod.
message IoK8sApiCoreV1PodCondition {
    // Last time we probed the condition.
    string lastProbeTime = 1;

    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 2;

    // Human-readable message indicating details about last transition.
    string message = 3;

    // Unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 4;

    // Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    string status = 5;

    // Type is the type of the condition. Currently only Ready. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    string type = 6;
}

// PodList is a list of Pods.
message IoK8sApiCoreV1PodList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of pods. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md
    repeated IoK8sApiCoreV1Pod items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
message IoK8sApiCoreV1PodSecurityContext {
    // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
    // 
    // 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
    // 
    // If unset, the Kubelet will not modify the ownership and permissions of any volume.
    int64 fsGroup = 1;

    // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    bool runAsNonRoot = 2;

    // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    int64 runAsUser = 3;

    // The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    IoK8sApiCoreV1SELinuxOptions seLinuxOptions = 4;

    // A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
    repeated int64 supplementalGroups = 5;
}

// PodSpec is a description of a pod.
message IoK8sApiCoreV1PodSpec {
    // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    int64 activeDeadlineSeconds = 1;

    // If specified, the pod's scheduling constraints
    IoK8sApiCoreV1Affinity affinity = 2;

    // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    bool automountServiceAccountToken = 3;

    // List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
    repeated IoK8sApiCoreV1Container containers = 4;

    // Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to "ClusterFirst". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
    string dnsPolicy = 5;

    // HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
    repeated IoK8sApiCoreV1HostAlias hostAliases = 6;

    // Use the host's ipc namespace. Optional: Default to false.
    bool hostIPC = 7;

    // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
    bool hostNetwork = 8;

    // Use the host's pid namespace. Optional: Default to false.
    bool hostPID = 9;

    // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    string hostname = 10;

    // ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
    repeated IoK8sApiCoreV1LocalObjectReference imagePullSecrets = 11;

    // List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    repeated IoK8sApiCoreV1Container initContainers = 12;

    // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    string nodeName = 13;

    // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    map<string, string> nodeSelector = 14;

    // The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
    int32 priority = 15;

    // If specified, indicates the pod's priority. "SYSTEM" is a special keyword which indicates the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    string priorityClassName = 16;

    // Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
    string restartPolicy = 17;

    // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    string schedulerName = 18;

    // SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
    IoK8sApiCoreV1PodSecurityContext securityContext = 19;

    // DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
    string serviceAccount = 20;

    // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    string serviceAccountName = 21;

    // If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
    string subdomain = 22;

    // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    int64 terminationGracePeriodSeconds = 23;

    // If specified, the pod's tolerations.
    repeated IoK8sApiCoreV1Toleration tolerations = 24;

    // List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
    repeated IoK8sApiCoreV1Volume volumes = 25;
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a system.
message IoK8sApiCoreV1PodStatus {
    // Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    repeated IoK8sApiCoreV1PodCondition conditions = 1;

    // The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    repeated IoK8sApiCoreV1ContainerStatus containerStatuses = 2;

    // IP address of the host to which the pod is assigned. Empty if not yet scheduled.
    string hostIP = 3;

    // The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    repeated IoK8sApiCoreV1ContainerStatus initContainerStatuses = 4;

    // A human readable message indicating details about why the pod is in this condition.
    string message = 5;

    // Current condition of the pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
    string phase = 6;

    // IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
    string podIP = 7;

    // The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://github.com/kubernetes/kubernetes/blob/master/docs/design/resource-qos.md
    string qosClass = 8;

    // A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
    string reason = 9;

    // RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
    string startTime = 10;
}

// PodTemplate describes a template for creating copies of a predefined pod.
message IoK8sApiCoreV1PodTemplate {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodTemplateSpec template = 4;
}

// PodTemplateList is a list of PodTemplates.
message IoK8sApiCoreV1PodTemplateList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of pod templates
    repeated IoK8sApiCoreV1PodTemplate items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PodTemplateSpec describes the data a pod should have when created from a template
message IoK8sApiCoreV1PodTemplateSpec {
    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 1;

    // Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1PodSpec spec = 2;
}

// PortworxVolumeSource represents a Portworx volume resource.
message IoK8sApiCoreV1PortworxVolumeSource {
    // FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 2;

    // VolumeID uniquely identifies a Portworx volume
    string volumeID = 3;
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
message IoK8sApiCoreV1PreferredSchedulingTerm {
    // A node selector term, associated with the corresponding weight.
    IoK8sApiCoreV1NodeSelectorTerm preference = 1;

    // Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    int32 weight = 2;
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
message IoK8sApiCoreV1Probe {
    // One and only one of the following should be specified. Exec specifies the action to take.
    IoK8sApiCoreV1ExecAction exec = 1;

    // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    int32 failureThreshold = 2;

    // HTTPGet specifies the http request to perform.
    IoK8sApiCoreV1HTTPGetAction httpGet = 3;

    // Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    int32 initialDelaySeconds = 4;

    // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    int32 periodSeconds = 5;

    // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
    int32 successThreshold = 6;

    // TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
    IoK8sApiCoreV1TCPSocketAction tcpSocket = 7;

    // Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    int32 timeoutSeconds = 8;
}

// Represents a projected volume source
message IoK8sApiCoreV1ProjectedVolumeSource {
    // Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // list of volume projections
    repeated IoK8sApiCoreV1VolumeProjection sources = 2;
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
message IoK8sApiCoreV1QuobyteVolumeSource {
    // Group to map volume access to Default is no group
    string group = 1;

    // ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
    bool readOnly = 2;

    // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
    string registry = 3;

    // User to map volume access to Defaults to serivceaccount user
    string user = 4;

    // Volume is a string that references an already created Quobyte volume by name.
    string volume = 5;
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1RBDVolumeSource {
    // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    string fsType = 1;

    // The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    string image = 2;

    // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    string keyring = 3;

    // A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    repeated string monitors = 4;

    // The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    string pool = 5;

    // ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    bool readOnly = 6;

    // SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    IoK8sApiCoreV1LocalObjectReference secretRef = 7;

    // The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
    string user = 8;
}

// ReplicationController represents the configuration of a replication controller.
message IoK8sApiCoreV1ReplicationController {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ReplicationControllerSpec spec = 4;

    // Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ReplicationControllerStatus status = 5;
}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
message IoK8sApiCoreV1ReplicationControllerCondition {
    // The last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // The reason for the condition's last transition.
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of replication controller condition.
    string type = 5;
}

// ReplicationControllerList is a collection of replication controllers.
message IoK8sApiCoreV1ReplicationControllerList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    repeated IoK8sApiCoreV1ReplicationController items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ReplicationControllerSpec is the specification of a replication controller.
message IoK8sApiCoreV1ReplicationControllerSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    int32 replicas = 2;

    // Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    map<string, string> selector = 3;

    // Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;
}

// ReplicationControllerStatus represents the current status of a replication controller.
message IoK8sApiCoreV1ReplicationControllerStatus {
    // The number of available replicas (ready for at least minReadySeconds) for this replication controller.
    int32 availableReplicas = 1;

    // Represents the latest available observations of a replication controller's current state.
    repeated IoK8sApiCoreV1ReplicationControllerCondition conditions = 2;

    // The number of pods that have labels matching the labels of the pod template of the replication controller.
    int32 fullyLabeledReplicas = 3;

    // ObservedGeneration reflects the generation of the most recently observed replication controller.
    int64 observedGeneration = 4;

    // The number of ready replicas for this replication controller.
    int32 readyReplicas = 5;

    // Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    int32 replicas = 6;
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format
message IoK8sApiCoreV1ResourceFieldSelector {
    // Container name: required for volumes, optional for env vars
    string containerName = 1;

    // Specifies the output format of the exposed resources, defaults to "1"
    string divisor = 2;

    // Required: resource to select
    string resource = 3;
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace
message IoK8sApiCoreV1ResourceQuota {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ResourceQuotaSpec spec = 4;

    // Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ResourceQuotaStatus status = 5;
}

// ResourceQuotaList is a list of ResourceQuota items.
message IoK8sApiCoreV1ResourceQuotaList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ResourceQuota objects. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md
    repeated IoK8sApiCoreV1ResourceQuota items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
message IoK8sApiCoreV1ResourceQuotaSpec {
    // Hard is the set of desired hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md
    map<string, string> hard = 1;

    // A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
    repeated string scopes = 2;
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
message IoK8sApiCoreV1ResourceQuotaStatus {
    // Hard is the set of enforced hard limits for each named resource. More info: https://git.k8s.io/community/contributors/design-proposals/admission_control_resource_quota.md
    map<string, string> hard = 1;

    // Used is the current observed total usage of the resource in the namespace.
    map<string, string> used = 2;
}

// ResourceRequirements describes the compute resource requirements.
message IoK8sApiCoreV1ResourceRequirements {
    // Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    map<string, string> limits = 1;

    // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    map<string, string> requests = 2;
}

// SELinuxOptions are the labels to be applied to the container
message IoK8sApiCoreV1SELinuxOptions {
    // Level is SELinux level label that applies to the container.
    string level = 1;

    // Role is a SELinux role label that applies to the container.
    string role = 2;

    // Type is a SELinux type label that applies to the container.
    string type = 3;

    // User is a SELinux user label that applies to the container.
    string user = 4;
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
message IoK8sApiCoreV1ScaleIOPersistentVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // The host address of the ScaleIO API Gateway.
    string gateway = 2;

    // The name of the ScaleIO Protection Domain for the configured storage.
    string protectionDomain = 3;

    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 4;

    // SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    IoK8sApiCoreV1SecretReference secretRef = 5;

    // Flag to enable/disable SSL communication with Gateway, default false
    bool sslEnabled = 6;

    // Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
    string storageMode = 7;

    // The ScaleIO Storage Pool associated with the protection domain.
    string storagePool = 8;

    // The name of the storage system as configured in ScaleIO.
    string system = 9;

    // The name of a volume already created in the ScaleIO system that is associated with this volume source.
    string volumeName = 10;
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume
message IoK8sApiCoreV1ScaleIOVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // The host address of the ScaleIO API Gateway.
    string gateway = 2;

    // The name of the ScaleIO Protection Domain for the configured storage.
    string protectionDomain = 3;

    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 4;

    // SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    IoK8sApiCoreV1LocalObjectReference secretRef = 5;

    // Flag to enable/disable SSL communication with Gateway, default false
    bool sslEnabled = 6;

    // Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
    string storageMode = 7;

    // The ScaleIO Storage Pool associated with the protection domain.
    string storagePool = 8;

    // The name of the storage system as configured in ScaleIO.
    string system = 9;

    // The name of a volume already created in the ScaleIO system that is associated with this volume source.
    string volumeName = 10;
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
message IoK8sApiCoreV1Secret {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
    map<string, string> data = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.
    map<string, string> stringData = 5;

    // Used to facilitate programmatic handling of secret data.
    string type = 6;
}

// SecretEnvSource selects a Secret to populate the environment variables with.
// 
// The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
message IoK8sApiCoreV1SecretEnvSource {
    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 1;

    // Specify whether the Secret must be defined
    bool optional = 2;
}

// SecretKeySelector selects a key of a Secret.
message IoK8sApiCoreV1SecretKeySelector {
    // The key of the secret to select from.  Must be a valid secret key.
    string key = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // Specify whether the Secret or it's key must be defined
    bool optional = 3;
}

// SecretList is a list of Secret.
message IoK8sApiCoreV1SecretList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret
    repeated IoK8sApiCoreV1Secret items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// Adapts a secret into a projected volume.
// 
// The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
message IoK8sApiCoreV1SecretProjection {
    // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 1;

    // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 2;

    // Specify whether the Secret or its key must be defined
    bool optional = 3;
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
message IoK8sApiCoreV1SecretReference {
    // Name is unique within a namespace to reference a secret resource.
    string name = 1;

    // Namespace defines the space within which the secret name must be unique.
    string namespace = 2;
}

// Adapts a Secret into a volume.
// 
// The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
message IoK8sApiCoreV1SecretVolumeSource {
    // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    int32 defaultMode = 1;

    // If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    repeated IoK8sApiCoreV1KeyToPath items = 2;

    // Specify whether the Secret or it's keys must be defined
    bool optional = 3;

    // Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    string secretName = 4;
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
message IoK8sApiCoreV1SecurityContext {
    // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
    bool allowPrivilegeEscalation = 1;

    // The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
    IoK8sApiCoreV1Capabilities capabilities = 2;

    // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
    bool privileged = 3;

    // Whether this container has a read-only root filesystem. Default is false.
    bool readOnlyRootFilesystem = 4;

    // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    bool runAsNonRoot = 5;

    // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    int64 runAsUser = 6;

    // The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    IoK8sApiCoreV1SELinuxOptions seLinuxOptions = 7;
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
message IoK8sApiCoreV1Service {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ServiceSpec spec = 4;

    // Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiCoreV1ServiceStatus status = 5;
}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
message IoK8sApiCoreV1ServiceAccount {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
    bool automountServiceAccountToken = 2;

    // ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    repeated IoK8sApiCoreV1LocalObjectReference imagePullSecrets = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 4;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 5;

    // Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret
    repeated IoK8sApiCoreV1ObjectReference secrets = 6;
}

// ServiceAccountList is a list of ServiceAccount objects
message IoK8sApiCoreV1ServiceAccountList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    repeated IoK8sApiCoreV1ServiceAccount items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ServiceList holds a list of services.
message IoK8sApiCoreV1ServiceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of services
    repeated IoK8sApiCoreV1Service items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ServicePort contains information on service's port.
message IoK8sApiCoreV1ServicePort {
    // The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.
    string name = 1;

    // The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    int32 nodePort = 2;

    // The port that will be exposed by this service.
    int32 port = 3;

    // The IP protocol for this port. Supports "TCP" and "UDP". Default is TCP.
    string protocol = 4;

    // Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
    string targetPort = 5;
}

// ServiceSpec describes the attributes that a user creates on a service.
message IoK8sApiCoreV1ServiceSpec {
    // clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    string clusterIP = 1;

    // externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
    repeated string externalIPs = 2;

    // externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName.
    string externalName = 3;

    // externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
    string externalTrafficPolicy = 4;

    // healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
    int32 healthCheckNodePort = 5;

    // Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
    string loadBalancerIP = 6;

    // If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    repeated string loadBalancerSourceRanges = 7;

    // The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    repeated IoK8sApiCoreV1ServicePort ports = 8;

    // publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery. This field will replace the service.alpha.kubernetes.io/tolerate-unready-endpoints when that annotation is deprecated and all clients have been converted to use this field.
    bool publishNotReadyAddresses = 9;

    // Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
    map<string, string> selector = 10;

    // Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    string sessionAffinity = 11;

    // sessionAffinityConfig contains the configurations of session affinity.
    IoK8sApiCoreV1SessionAffinityConfig sessionAffinityConfig = 12;

    // type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types
    string type = 13;
}

// ServiceStatus represents the current status of a service.
message IoK8sApiCoreV1ServiceStatus {
    // LoadBalancer contains the current status of the load-balancer, if one is present.
    IoK8sApiCoreV1LoadBalancerStatus loadBalancer = 1;
}

// SessionAffinityConfig represents the configurations of session affinity.
message IoK8sApiCoreV1SessionAffinityConfig {
    // clientIP contains the configurations of Client IP based session affinity.
    IoK8sApiCoreV1ClientIPConfig clientIP = 1;
}

// Represents a StorageOS persistent volume resource.
message IoK8sApiCoreV1StorageOSPersistentVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 2;

    // SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    IoK8sApiCoreV1ObjectReference secretRef = 3;

    // VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    string volumeName = 4;

    // VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    string volumeNamespace = 5;
}

// Represents a StorageOS persistent volume resource.
message IoK8sApiCoreV1StorageOSVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    bool readOnly = 2;

    // SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    IoK8sApiCoreV1LocalObjectReference secretRef = 3;

    // VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    string volumeName = 4;

    // VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    string volumeNamespace = 5;
}

// TCPSocketAction describes an action based on opening a socket
message IoK8sApiCoreV1TCPSocketAction {
    // Optional: Host name to connect to, defaults to the pod IP.
    string host = 1;

    // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    string port = 2;
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
message IoK8sApiCoreV1Taint {
    // Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    string effect = 1;

    // Required. The taint key to be applied to a node.
    string key = 2;

    // TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    string timeAdded = 3;

    // Required. The taint value corresponding to the taint key.
    string value = 4;
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
message IoK8sApiCoreV1Toleration {
    // Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    string effect = 1;

    // Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    string key = 2;

    // Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    string operator = 3;

    // TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    int64 tolerationSeconds = 4;

    // Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    string value = 5;
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
message IoK8sApiCoreV1Volume {
    // AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 1;

    // AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureDiskVolumeSource azureDisk = 2;

    // AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    IoK8sApiCoreV1AzureFileVolumeSource azureFile = 3;

    // CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1CephFSVolumeSource cephfs = 4;

    // Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    IoK8sApiCoreV1CinderVolumeSource cinder = 5;

    // ConfigMap represents a configMap that should populate this volume
    IoK8sApiCoreV1ConfigMapVolumeSource configMap = 6;

    // DownwardAPI represents downward API about the pod that should populate this volume
    IoK8sApiCoreV1DownwardAPIVolumeSource downwardAPI = 7;

    // EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    IoK8sApiCoreV1EmptyDirVolumeSource emptyDir = 8;

    // FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    IoK8sApiCoreV1FCVolumeSource fc = 9;

    // FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
    IoK8sApiCoreV1FlexVolumeSource flexVolume = 10;

    // Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    IoK8sApiCoreV1FlockerVolumeSource flocker = 11;

    // GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    IoK8sApiCoreV1GCEPersistentDiskVolumeSource gcePersistentDisk = 12;

    // GitRepo represents a git repository at a particular revision.
    IoK8sApiCoreV1GitRepoVolumeSource gitRepo = 13;

    // Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
    IoK8sApiCoreV1GlusterfsVolumeSource glusterfs = 14;

    // HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    IoK8sApiCoreV1HostPathVolumeSource hostPath = 15;

    // ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
    IoK8sApiCoreV1ISCSIVolumeSource iscsi = 16;

    // Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    string name = 17;

    // NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    IoK8sApiCoreV1NFSVolumeSource nfs = 18;

    // PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    IoK8sApiCoreV1PersistentVolumeClaimVolumeSource persistentVolumeClaim = 19;

    // PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    IoK8sApiCoreV1PhotonPersistentDiskVolumeSource photonPersistentDisk = 20;

    // PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1PortworxVolumeSource portworxVolume = 21;

    // Items for all in one resources secrets, configmaps, and downward API
    IoK8sApiCoreV1ProjectedVolumeSource projected = 22;

    // Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    IoK8sApiCoreV1QuobyteVolumeSource quobyte = 23;

    // RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
    IoK8sApiCoreV1RBDVolumeSource rbd = 24;

    // ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    IoK8sApiCoreV1ScaleIOVolumeSource scaleIO = 25;

    // Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    IoK8sApiCoreV1SecretVolumeSource secret = 26;

    // StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    IoK8sApiCoreV1StorageOSVolumeSource storageos = 27;

    // VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    IoK8sApiCoreV1VsphereVirtualDiskVolumeSource vsphereVolume = 28;
}

// VolumeMount describes a mounting of a Volume within a container.
message IoK8sApiCoreV1VolumeMount {
    // Path within the container at which the volume should be mounted.  Must not contain ':'.
    string mountPath = 1;

    // mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationHostToContainer is used. This field is alpha in 1.8 and can be reworked or removed in a future release.
    string mountPropagation = 2;

    // This must match the Name of a Volume.
    string name = 3;

    // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    bool readOnly = 4;

    // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    string subPath = 5;
}

// Projection that may be projected along with other supported volume types
message IoK8sApiCoreV1VolumeProjection {
    // information about the configMap data to project
    IoK8sApiCoreV1ConfigMapProjection configMap = 1;

    // information about the downwardAPI data to project
    IoK8sApiCoreV1DownwardAPIProjection downwardAPI = 2;

    // information about the secret data to project
    IoK8sApiCoreV1SecretProjection secret = 3;
}

// Represents a vSphere volume resource.
message IoK8sApiCoreV1VsphereVirtualDiskVolumeSource {
    // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    string fsType = 1;

    // Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    string storagePolicyID = 2;

    // Storage Policy Based Management (SPBM) profile name.
    string storagePolicyName = 3;

    // Path that identifies vSphere volume vmdk
    string volumePath = 4;
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
message IoK8sApiCoreV1WeightedPodAffinityTerm {
    // Required. A pod affinity term, associated with the corresponding weight.
    IoK8sApiCoreV1PodAffinityTerm podAffinityTerm = 1;

    // weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    int32 weight = 2;
}

// defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
message IoK8sApiExtensionsV1beta1AllowedHostPath {
    // is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
    // 
    // Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
    string pathPrefix = 1;
}

// DEPRECATED - This group version of DaemonSet is deprecated by apps/v1beta2/DaemonSet. See the release notes for more information. DaemonSet represents the configuration of a daemon set.
message IoK8sApiExtensionsV1beta1DaemonSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiExtensionsV1beta1DaemonSetSpec spec = 4;

    // The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiExtensionsV1beta1DaemonSetStatus status = 5;
}

// DaemonSetList is a collection of daemon sets.
message IoK8sApiExtensionsV1beta1DaemonSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // A list of daemon sets.
    repeated IoK8sApiExtensionsV1beta1DaemonSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DaemonSetSpec is the specification of a daemon set.
message IoK8sApiExtensionsV1beta1DaemonSetSpec {
    // The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
    int32 minReadySeconds = 1;

    // The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
    int32 revisionHistoryLimit = 2;

    // A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;

    // DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
    int64 templateGeneration = 5;

    // An update strategy to replace existing DaemonSet pods with new pods.
    IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy updateStrategy = 6;
}

// DaemonSetStatus represents the current status of a daemon set.
message IoK8sApiExtensionsV1beta1DaemonSetStatus {
    // Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    int32 collisionCount = 1;

    // The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 currentNumberScheduled = 2;

    // The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 desiredNumberScheduled = 3;

    // The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
    int32 numberAvailable = 4;

    // The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
    int32 numberMisscheduled = 5;

    // The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
    int32 numberReady = 6;

    // The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
    int32 numberUnavailable = 7;

    // The most recent generation observed by the daemon set controller.
    int64 observedGeneration = 8;

    // The total number of nodes that are running updated daemon pod
    int32 updatedNumberScheduled = 9;
}

message IoK8sApiExtensionsV1beta1DaemonSetUpdateStrategy {
    // Rolling update config params. Present only if type = "RollingUpdate".
    IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet rollingUpdate = 1;

    // Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is OnDelete.
    string type = 2;
}

// DEPRECATED - This group version of Deployment is deprecated by apps/v1beta2/Deployment. See the release notes for more information. Deployment enables declarative updates for Pods and ReplicaSets.
message IoK8sApiExtensionsV1beta1Deployment {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the Deployment.
    IoK8sApiExtensionsV1beta1DeploymentSpec spec = 4;

    // Most recently observed status of the Deployment.
    IoK8sApiExtensionsV1beta1DeploymentStatus status = 5;
}

// DeploymentCondition describes the state of a deployment at a certain point.
message IoK8sApiExtensionsV1beta1DeploymentCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // The last time this condition was updated.
    string lastUpdateTime = 2;

    // A human readable message indicating details about the transition.
    string message = 3;

    // The reason for the condition's last transition.
    string reason = 4;

    // Status of the condition, one of True, False, Unknown.
    string status = 5;

    // Type of deployment condition.
    string type = 6;
}

// DeploymentList is a list of Deployments.
message IoK8sApiExtensionsV1beta1DeploymentList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of Deployments.
    repeated IoK8sApiExtensionsV1beta1Deployment items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// DEPRECATED. DeploymentRollback stores the information required to rollback a deployment.
message IoK8sApiExtensionsV1beta1DeploymentRollback {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Required: This must match the Name of a deployment.
    string name = 3;

    // The config of this deployment rollback.
    IoK8sApiExtensionsV1beta1RollbackConfig rollbackTo = 4;

    // The annotations to be updated to a deployment
    map<string, string> updatedAnnotations = 5;
}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
message IoK8sApiExtensionsV1beta1DeploymentSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Indicates that the deployment is paused and will not be processed by the deployment controller.
    bool paused = 2;

    // The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.
    int32 progressDeadlineSeconds = 3;

    // Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    int32 replicas = 4;

    // The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.
    int32 revisionHistoryLimit = 5;

    // DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
    IoK8sApiExtensionsV1beta1RollbackConfig rollbackTo = 6;

    // Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 7;

    // The deployment strategy to use to replace existing pods with new ones.
    IoK8sApiExtensionsV1beta1DeploymentStrategy strategy = 8;

    // Template describes the pods that will be created.
    IoK8sApiCoreV1PodTemplateSpec template = 9;
}

// DeploymentStatus is the most recently observed status of the Deployment.
message IoK8sApiExtensionsV1beta1DeploymentStatus {
    // Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    int32 availableReplicas = 1;

    // Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    int32 collisionCount = 2;

    // Represents the latest available observations of a deployment's current state.
    repeated IoK8sApiExtensionsV1beta1DeploymentCondition conditions = 3;

    // The generation observed by the deployment controller.
    int64 observedGeneration = 4;

    // Total number of ready pods targeted by this deployment.
    int32 readyReplicas = 5;

    // Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    int32 replicas = 6;

    // Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    int32 unavailableReplicas = 7;

    // Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    int32 updatedReplicas = 8;
}

// DeploymentStrategy describes how to replace existing pods with new ones.
message IoK8sApiExtensionsV1beta1DeploymentStrategy {
    // Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    IoK8sApiExtensionsV1beta1RollingUpdateDeployment rollingUpdate = 1;

    // Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
    string type = 2;
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
message IoK8sApiExtensionsV1beta1FSGroupStrategyOptions {
    // Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.
    repeated IoK8sApiExtensionsV1beta1IDRange ranges = 1;

    // Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
    string rule = 2;
}

// HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.
message IoK8sApiExtensionsV1beta1HTTPIngressPath {
    // Backend defines the referenced service endpoint to which the traffic will be forwarded to.
    IoK8sApiExtensionsV1beta1IngressBackend backend = 1;

    // Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.
    string path = 2;
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
message IoK8sApiExtensionsV1beta1HTTPIngressRuleValue {
    // A collection of paths that map requests to backends.
    repeated IoK8sApiExtensionsV1beta1HTTPIngressPath paths = 1;
}

// Host Port Range defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
message IoK8sApiExtensionsV1beta1HostPortRange {
    // max is the end of the range, inclusive.
    int32 max = 1;

    // min is the start of the range, inclusive.
    int32 min = 2;
}

// ID Range provides a min/max of an allowed range of IDs.
message IoK8sApiExtensionsV1beta1IDRange {
    // Max is the end of the range, inclusive.
    int64 max = 1;

    // Min is the start of the range, inclusive.
    int64 min = 2;
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
message IoK8sApiExtensionsV1beta1IPBlock {
    // CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
    string cidr = 1;

    // Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
    repeated string except = 2;
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
message IoK8sApiExtensionsV1beta1Ingress {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiExtensionsV1beta1IngressSpec spec = 4;

    // Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiExtensionsV1beta1IngressStatus status = 5;
}

// IngressBackend describes all endpoints for a given service and port.
message IoK8sApiExtensionsV1beta1IngressBackend {
    // Specifies the name of the referenced service.
    string serviceName = 1;

    // Specifies the port of the referenced service.
    string servicePort = 2;
}

// IngressList is a collection of Ingress.
message IoK8sApiExtensionsV1beta1IngressList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of Ingress.
    repeated IoK8sApiExtensionsV1beta1Ingress items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
message IoK8sApiExtensionsV1beta1IngressRule {
    // Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the
    // 	  IP in the Spec of the parent Ingress.
    // 2. The `:` delimiter is not respected because ports are not allowed.
    // 	  Currently the port of an Ingress is implicitly :80 for http and
    // 	  :443 for https.
    // Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
    string host = 1;
    IoK8sApiExtensionsV1beta1HTTPIngressRuleValue http = 2;
}

// IngressSpec describes the Ingress the user wishes to exist.
message IoK8sApiExtensionsV1beta1IngressSpec {
    // A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
    IoK8sApiExtensionsV1beta1IngressBackend backend = 1;

    // A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
    repeated IoK8sApiExtensionsV1beta1IngressRule rules = 2;

    // TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
    repeated IoK8sApiExtensionsV1beta1IngressTLS tls = 3;
}

// IngressStatus describe the current state of the Ingress.
message IoK8sApiExtensionsV1beta1IngressStatus {
    // LoadBalancer contains the current status of the load-balancer.
    IoK8sApiCoreV1LoadBalancerStatus loadBalancer = 1;
}

// IngressTLS describes the transport layer security associated with an Ingress.
message IoK8sApiExtensionsV1beta1IngressTLS {
    // Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
    repeated string hosts = 1;

    // SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
    string secretName = 2;
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
message IoK8sApiExtensionsV1beta1NetworkPolicy {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior for this NetworkPolicy.
    IoK8sApiExtensionsV1beta1NetworkPolicySpec spec = 4;
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
message IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule {
    // List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    repeated IoK8sApiExtensionsV1beta1NetworkPolicyPort ports = 1;

    // List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
    repeated IoK8sApiExtensionsV1beta1NetworkPolicyPeer to = 2;
}

// This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.
message IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule {
    // List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.
    repeated IoK8sApiExtensionsV1beta1NetworkPolicyPeer from = 1;

    // List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    repeated IoK8sApiExtensionsV1beta1NetworkPolicyPort ports = 2;
}

// Network Policy List is a list of NetworkPolicy objects.
message IoK8sApiExtensionsV1beta1NetworkPolicyList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of schema objects.
    repeated IoK8sApiExtensionsV1beta1NetworkPolicy items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

message IoK8sApiExtensionsV1beta1NetworkPolicyPeer {
    // IPBlock defines policy on a particular IPBlock
    IoK8sApiExtensionsV1beta1IPBlock ipBlock = 1;

    // Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.
    IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = 2;

    // This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.
    IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = 3;
}

message IoK8sApiExtensionsV1beta1NetworkPolicyPort {
    // If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
    string port = 1;

    // Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
    string protocol = 2;
}

message IoK8sApiExtensionsV1beta1NetworkPolicySpec {
    // List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
    repeated IoK8sApiExtensionsV1beta1NetworkPolicyEgressRule egress = 1;

    // List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).
    repeated IoK8sApiExtensionsV1beta1NetworkPolicyIngressRule ingress = 2;

    // Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
    IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = 3;

    // List of rule types that the NetworkPolicy relates to. Valid options are Ingress, Egress, or Ingress,Egress. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
    repeated string policyTypes = 4;
}

// Pod Security Policy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
message IoK8sApiExtensionsV1beta1PodSecurityPolicy {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // spec defines the policy enforced.
    IoK8sApiExtensionsV1beta1PodSecurityPolicySpec spec = 4;
}

// Pod Security Policy List is a list of PodSecurityPolicy objects.
message IoK8sApiExtensionsV1beta1PodSecurityPolicyList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of schema objects.
    repeated IoK8sApiExtensionsV1beta1PodSecurityPolicy items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// Pod Security Policy Spec defines the policy enforced.
message IoK8sApiExtensionsV1beta1PodSecurityPolicySpec {
    // AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
    bool allowPrivilegeEscalation = 1;

    // AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.
    repeated string allowedCapabilities = 2;

    // is a white list of allowed host paths. Empty indicates that all host paths may be used.
    repeated IoK8sApiExtensionsV1beta1AllowedHostPath allowedHostPaths = 3;

    // DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
    repeated string defaultAddCapabilities = 4;

    // DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
    bool defaultAllowPrivilegeEscalation = 5;

    // FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.
    IoK8sApiExtensionsV1beta1FSGroupStrategyOptions fsGroup = 6;

    // hostIPC determines if the policy allows the use of HostIPC in the pod spec.
    bool hostIPC = 7;

    // hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
    bool hostNetwork = 8;

    // hostPID determines if the policy allows the use of HostPID in the pod spec.
    bool hostPID = 9;

    // hostPorts determines which host port ranges are allowed to be exposed.
    repeated IoK8sApiExtensionsV1beta1HostPortRange hostPorts = 10;

    // privileged determines if a pod can request to be run as privileged.
    bool privileged = 11;

    // ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
    bool readOnlyRootFilesystem = 12;

    // RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
    repeated string requiredDropCapabilities = 13;

    // runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
    IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions runAsUser = 14;

    // seLinux is the strategy that will dictate the allowable labels that may be set.
    IoK8sApiExtensionsV1beta1SELinuxStrategyOptions seLinux = 15;

    // SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
    IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions supplementalGroups = 16;

    // volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.
    repeated string volumes = 17;
}

// DEPRECATED - This group version of ReplicaSet is deprecated by apps/v1beta2/ReplicaSet. See the release notes for more information. ReplicaSet represents the configuration of a ReplicaSet.
message IoK8sApiExtensionsV1beta1ReplicaSet {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiExtensionsV1beta1ReplicaSetSpec spec = 4;

    // Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    IoK8sApiExtensionsV1beta1ReplicaSetStatus status = 5;
}

// ReplicaSetCondition describes the state of a replica set at a certain point.
message IoK8sApiExtensionsV1beta1ReplicaSetCondition {
    // The last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // A human readable message indicating details about the transition.
    string message = 2;

    // The reason for the condition's last transition.
    string reason = 3;

    // Status of the condition, one of True, False, Unknown.
    string status = 4;

    // Type of replica set condition.
    string type = 5;
}

// ReplicaSetList is a collection of ReplicaSets.
message IoK8sApiExtensionsV1beta1ReplicaSetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
    repeated IoK8sApiExtensionsV1beta1ReplicaSet items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ReplicaSetSpec is the specification of a ReplicaSet.
message IoK8sApiExtensionsV1beta1ReplicaSetSpec {
    // Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    int32 minReadySeconds = 1;

    // Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    int32 replicas = 2;

    // Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;

    // Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    IoK8sApiCoreV1PodTemplateSpec template = 4;
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
message IoK8sApiExtensionsV1beta1ReplicaSetStatus {
    // The number of available replicas (ready for at least minReadySeconds) for this replica set.
    int32 availableReplicas = 1;

    // Represents the latest available observations of a replica set's current state.
    repeated IoK8sApiExtensionsV1beta1ReplicaSetCondition conditions = 2;

    // The number of pods that have labels matching the labels of the pod template of the replicaset.
    int32 fullyLabeledReplicas = 3;

    // ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
    int64 observedGeneration = 4;

    // The number of ready replicas for this replica set.
    int32 readyReplicas = 5;

    // Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
    int32 replicas = 6;
}

// DEPRECATED.
message IoK8sApiExtensionsV1beta1RollbackConfig {
    // The revision to rollback to. If set to 0, rollback to the last revision.
    int64 revision = 1;
}

// Spec to control the desired behavior of daemon set rolling update.
message IoK8sApiExtensionsV1beta1RollingUpdateDaemonSet {
    // The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
    string maxUnavailable = 1;
}

// Spec to control the desired behavior of rolling update.
message IoK8sApiExtensionsV1beta1RollingUpdateDeployment {
    // The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
    string maxSurge = 1;

    // The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    string maxUnavailable = 2;
}

// Run A sUser Strategy Options defines the strategy type and any options used to create the strategy.
message IoK8sApiExtensionsV1beta1RunAsUserStrategyOptions {
    // Ranges are the allowed ranges of uids that may be used.
    repeated IoK8sApiExtensionsV1beta1IDRange ranges = 1;

    // Rule is the strategy that will dictate the allowable RunAsUser values that may be set.
    string rule = 2;
}

// SELinux  Strategy Options defines the strategy type and any options used to create the strategy.
message IoK8sApiExtensionsV1beta1SELinuxStrategyOptions {
    // type is the strategy that will dictate the allowable labels that may be set.
    string rule = 1;

    // seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md
    IoK8sApiCoreV1SELinuxOptions seLinuxOptions = 2;
}

// represents a scaling request for a resource.
message IoK8sApiExtensionsV1beta1Scale {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
    IoK8sApiExtensionsV1beta1ScaleSpec spec = 4;

    // current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
    IoK8sApiExtensionsV1beta1ScaleStatus status = 5;
}

// describes the attributes of a scale subresource
message IoK8sApiExtensionsV1beta1ScaleSpec {
    // desired number of instances for the scaled object.
    int32 replicas = 1;
}

// represents the current status of a scale subresource.
message IoK8sApiExtensionsV1beta1ScaleStatus {
    // actual number of observed instances of the scaled object.
    int32 replicas = 1;

    // label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors
    map<string, string> selector = 2;

    // label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    string targetSelector = 3;
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
message IoK8sApiExtensionsV1beta1SupplementalGroupsStrategyOptions {
    // Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.
    repeated IoK8sApiExtensionsV1beta1IDRange ranges = 1;

    // Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
    string rule = 2;
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
message IoK8sApiNetworkingV1IPBlock {
    // CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
    string cidr = 1;

    // Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
    repeated string except = 2;
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
message IoK8sApiNetworkingV1NetworkPolicy {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior for this NetworkPolicy.
    IoK8sApiNetworkingV1NetworkPolicySpec spec = 4;
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
message IoK8sApiNetworkingV1NetworkPolicyEgressRule {
    // List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPort ports = 1;

    // List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPeer to = 2;
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
message IoK8sApiNetworkingV1NetworkPolicyIngressRule {
    // List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPeer from = 1;

    // List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    repeated IoK8sApiNetworkingV1NetworkPolicyPort ports = 2;
}

// NetworkPolicyList is a list of NetworkPolicy objects.
message IoK8sApiNetworkingV1NetworkPolicyList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of schema objects.
    repeated IoK8sApiNetworkingV1NetworkPolicy items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.
message IoK8sApiNetworkingV1NetworkPolicyPeer {
    // IPBlock defines policy on a particular IPBlock
    IoK8sApiNetworkingV1IPBlock ipBlock = 1;

    // Selects Namespaces using cluster scoped-labels. This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.
    IoK8sApimachineryPkgApisMetaV1LabelSelector namespaceSelector = 2;

    // This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.
    IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = 3;
}

// NetworkPolicyPort describes a port to allow traffic on
message IoK8sApiNetworkingV1NetworkPolicyPort {
    // The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
    string port = 1;

    // The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
    string protocol = 2;
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
message IoK8sApiNetworkingV1NetworkPolicySpec {
    // List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
    repeated IoK8sApiNetworkingV1NetworkPolicyEgressRule egress = 1;

    // List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
    repeated IoK8sApiNetworkingV1NetworkPolicyIngressRule ingress = 2;

    // Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
    IoK8sApimachineryPkgApisMetaV1LabelSelector podSelector = 3;

    // List of rule types that the NetworkPolicy relates to. Valid options are Ingress, Egress, or Ingress,Egress. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
    repeated string policyTypes = 4;
}

// Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
message IoK8sApiPolicyV1beta1Eviction {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // DeleteOptions may be provided
    IoK8sApimachineryPkgApisMetaV1DeleteOptions deleteOptions = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // ObjectMeta describes the pod that is being evicted.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
message IoK8sApiPolicyV1beta1PodDisruptionBudget {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Specification of the desired behavior of the PodDisruptionBudget.
    IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec spec = 4;

    // Most recently observed status of the PodDisruptionBudget.
    IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus status = 5;
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
message IoK8sApiPolicyV1beta1PodDisruptionBudgetList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;
    repeated IoK8sApiPolicyV1beta1PodDisruptionBudget items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
message IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec {
    // An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
    string maxUnavailable = 1;

    // An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
    string minAvailable = 2;

    // Label query over pods whose evictions are managed by the disruption budget.
    IoK8sApimachineryPkgApisMetaV1LabelSelector selector = 3;
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
message IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus {
    // current number of healthy pods
    int32 currentHealthy = 1;

    // minimum desired number of healthy pods
    int32 desiredHealthy = 2;

    // DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
    map<string, string> disruptedPods = 3;

    // Number of pod disruptions that are currently allowed.
    int32 disruptionsAllowed = 4;

    // total number of pods counted by this disruption budget
    int32 expectedPods = 5;

    // Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB's object generation.
    int64 observedGeneration = 6;
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
message IoK8sApiRbacV1ClusterRole {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Rules holds all the PolicyRules for this ClusterRole
    repeated IoK8sApiRbacV1PolicyRule rules = 4;
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
message IoK8sApiRbacV1ClusterRoleBinding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    IoK8sApiRbacV1RoleRef roleRef = 4;

    // Subjects holds references to the objects the role applies to.
    repeated IoK8sApiRbacV1Subject subjects = 5;
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings
message IoK8sApiRbacV1ClusterRoleBindingList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ClusterRoleBindings
    repeated IoK8sApiRbacV1ClusterRoleBinding items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ClusterRoleList is a collection of ClusterRoles
message IoK8sApiRbacV1ClusterRoleList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ClusterRoles
    repeated IoK8sApiRbacV1ClusterRole items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
message IoK8sApiRbacV1PolicyRule {
    // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
    repeated string apiGroups = 1;

    // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
    repeated string nonResourceURLs = 2;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    repeated string resourceNames = 3;

    // Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
    repeated string resources = 4;

    // Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
    repeated string verbs = 5;
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
message IoK8sApiRbacV1Role {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Rules holds all the PolicyRules for this Role
    repeated IoK8sApiRbacV1PolicyRule rules = 4;
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
message IoK8sApiRbacV1RoleBinding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    IoK8sApiRbacV1RoleRef roleRef = 4;

    // Subjects holds references to the objects the role applies to.
    repeated IoK8sApiRbacV1Subject subjects = 5;
}

// RoleBindingList is a collection of RoleBindings
message IoK8sApiRbacV1RoleBindingList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of RoleBindings
    repeated IoK8sApiRbacV1RoleBinding items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// RoleList is a collection of Roles
message IoK8sApiRbacV1RoleList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of Roles
    repeated IoK8sApiRbacV1Role items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// RoleRef contains information that points to the role being used
message IoK8sApiRbacV1RoleRef {
    // APIGroup is the group for the resource being referenced
    string apiGroup = 1;

    // Kind is the type of resource being referenced
    string kind = 2;

    // Name is the name of resource being referenced
    string name = 3;
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
message IoK8sApiRbacV1Subject {
    // APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    string apiGroup = 1;

    // Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    string kind = 2;

    // Name of the object being referenced.
    string name = 3;

    // Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
    string namespace = 4;
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
message IoK8sApiRbacV1beta1ClusterRole {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Rules holds all the PolicyRules for this ClusterRole
    repeated IoK8sApiRbacV1beta1PolicyRule rules = 4;
}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
message IoK8sApiRbacV1beta1ClusterRoleBinding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    IoK8sApiRbacV1beta1RoleRef roleRef = 4;

    // Subjects holds references to the objects the role applies to.
    repeated IoK8sApiRbacV1beta1Subject subjects = 5;
}

// ClusterRoleBindingList is a collection of ClusterRoleBindings
message IoK8sApiRbacV1beta1ClusterRoleBindingList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ClusterRoleBindings
    repeated IoK8sApiRbacV1beta1ClusterRoleBinding items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// ClusterRoleList is a collection of ClusterRoles
message IoK8sApiRbacV1beta1ClusterRoleList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of ClusterRoles
    repeated IoK8sApiRbacV1beta1ClusterRole items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
message IoK8sApiRbacV1beta1PolicyRule {
    // APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
    repeated string apiGroups = 1;

    // NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
    repeated string nonResourceURLs = 2;

    // ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
    repeated string resourceNames = 3;

    // Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
    repeated string resources = 4;

    // Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
    repeated string verbs = 5;
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
message IoK8sApiRbacV1beta1Role {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Rules holds all the PolicyRules for this Role
    repeated IoK8sApiRbacV1beta1PolicyRule rules = 4;
}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
message IoK8sApiRbacV1beta1RoleBinding {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
    IoK8sApiRbacV1beta1RoleRef roleRef = 4;

    // Subjects holds references to the objects the role applies to.
    repeated IoK8sApiRbacV1beta1Subject subjects = 5;
}

// RoleBindingList is a collection of RoleBindings
message IoK8sApiRbacV1beta1RoleBindingList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of RoleBindings
    repeated IoK8sApiRbacV1beta1RoleBinding items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// RoleList is a collection of Roles
message IoK8sApiRbacV1beta1RoleList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is a list of Roles
    repeated IoK8sApiRbacV1beta1Role items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata.
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// RoleRef contains information that points to the role being used
message IoK8sApiRbacV1beta1RoleRef {
    // APIGroup is the group for the resource being referenced
    string apiGroup = 1;

    // Kind is the type of resource being referenced
    string kind = 2;

    // Name is the name of resource being referenced
    string name = 3;
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
message IoK8sApiRbacV1beta1Subject {
    // APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
    string apiGroup = 1;

    // Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
    string kind = 2;

    // Name of the object being referenced.
    string name = 3;

    // Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
    string namespace = 4;
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
// 
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
message IoK8sApiStorageV1StorageClass {
    // AllowVolumeExpansion shows whether the storage class allow volume expand
    bool allowVolumeExpansion = 1;

    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
    repeated string mountOptions = 5;

    // Parameters holds the parameters for the provisioner that should create volumes of this storage class.
    map<string, string> parameters = 6;

    // Provisioner indicates the type of the provisioner.
    string provisioner = 7;

    // Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
    string reclaimPolicy = 8;
}

// StorageClassList is a collection of storage classes.
message IoK8sApiStorageV1StorageClassList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of StorageClasses
    repeated IoK8sApiStorageV1StorageClass items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
// 
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
message IoK8sApiStorageV1beta1StorageClass {
    // AllowVolumeExpansion shows whether the storage class allow volume expand
    bool allowVolumeExpansion = 1;

    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 4;

    // Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
    repeated string mountOptions = 5;

    // Parameters holds the parameters for the provisioner that should create volumes of this storage class.
    map<string, string> parameters = 6;

    // Provisioner indicates the type of the provisioner.
    string provisioner = 7;

    // Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
    string reclaimPolicy = 8;
}

// StorageClassList is a collection of storage classes.
message IoK8sApiStorageV1beta1StorageClassList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items is the list of StorageClasses
    repeated IoK8sApiStorageV1beta1StorageClass items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec describes how the user wants the resources to appear
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec spec = 4;

    // Status indicates the actual state of the CustomResourceDefinition
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus status = 5;
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // Human-readable message indicating details about last transition.
    string message = 2;

    // Unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // Status is the status of the condition. Can be True, False, Unknown.
    string status = 4;

    // Type is the type of the condition.
    string type = 5;
}

// CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Items individual CustomResourceDefinitions
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames {
    // Kind is the serialized kind of the resource.  It is normally CamelCase and singular.
    string kind = 1;

    // ListKind is the serialized kind of the list for this resource.  Defaults to <kind>List.
    string listKind = 2;

    // Plural is the plural name of the resource to serve.  It must match the name of the CustomResourceDefinition-registration too: plural.group and it must be all lowercase.
    string plural = 3;

    // ShortNames are short names for the resource.  It must be all lowercase.
    repeated string shortNames = 4;

    // Singular is the singular name of the resource.  It must be all lowercase  Defaults to lowercased <kind>
    string singular = 5;
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec {
    // Group is the group this resource belongs in
    string group = 1;

    // Names are the names used to describe this custom resource
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames names = 2;

    // Scope indicates whether this resource is cluster or namespace scoped.  Default is namespaced
    string scope = 3;

    // Validation describes the validation methods for CustomResources This field is alpha-level and should only be sent to servers that enable the CustomResourceValidation feature.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation validation = 4;

    // Version is the version this resource belongs in
    string version = 5;
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionStatus {
    // AcceptedNames are the names that are actually being used to serve discovery They may be different than the names in spec.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames acceptedNames = 1;

    // Conditions indicate state for particular aspects of a CustomResourceDefinition
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionCondition conditions = 2;
}

// CustomResourceValidation is a list of validation methods for CustomResources.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation {
    // OpenAPIV3Schema is the OpenAPI v3 schema to be validated against.
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps openAPIV3Schema = 1;
}

// ExternalDocumentation allows referencing an external resource for extended documentation.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation {
    string description = 1;
    string url = 2;
}

// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON {
    bytes Raw = 1;
}

// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps {
    string _ref = 1;
    string _schema = 2;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool additionalItems = 3;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool additionalProperties = 4;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON default = 5;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps> definitions = 6;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray> dependencies = 7;
    string description = 8;
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON enum = 9;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSON example = 10;
    bool exclusiveMaximum = 11;
    bool exclusiveMinimum = 12;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation externalDocs = 13;
    string format = 14;
    string id = 15;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray items = 16;
    int64 maxItems = 17;
    int64 maxLength = 18;
    int64 maxProperties = 19;
    double maximum = 20;
    int64 minItems = 21;
    int64 minLength = 22;
    int64 minProperties = 23;
    double minimum = 24;
    double multipleOf = 25;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps not = 26;
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps oneOf = 27;
    string pattern = 28;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps> patternProperties = 29;
    map<string, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps> properties = 30;
    repeated string required = 31;
    string title = 32;
    string type = 33;
    bool uniqueItems = 34;
}

// JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrArray {
    repeated IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps JSONSchemas = 1;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps Schema = 2;
}

// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrBool {
    bool Allows = 1;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps Schema = 2;
}

// JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
message IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaPropsOrStringArray {
    repeated string Property = 1;
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps Schema = 2;
}

// APIGroup contains the name, the supported versions, and the preferred version of a group.
message IoK8sApimachineryPkgApisMetaV1APIGroup {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // name is the name of the group.
    string name = 3;

    // preferredVersion is the version preferred by the API server, which probably is the storage version.
    IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery preferredVersion = 4;

    // a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    repeated IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR serverAddressByClientCIDRs = 5;

    // versions are the versions supported in this group.
    repeated IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery versions = 6;
}

// APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
message IoK8sApimachineryPkgApisMetaV1APIGroupList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // groups is a list of APIGroup.
    repeated IoK8sApimachineryPkgApisMetaV1APIGroup groups = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
}

// APIResource specifies the name of a resource and whether it is namespaced.
message IoK8sApimachineryPkgApisMetaV1APIResource {
    // categories is a list of the grouped resources this resource belongs to (e.g. 'all')
    repeated string categories = 1;

    // group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
    string group = 2;

    // kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
    string kind = 3;

    // name is the plural name of the resource.
    string name = 4;

    // namespaced indicates if a resource is namespaced or not.
    bool namespaced = 5;

    // shortNames is a list of suggested short names of the resource.
    repeated string shortNames = 6;

    // singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
    string singularName = 7;

    // verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
    repeated string verbs = 8;

    // version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
    string version = 9;
}

// APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
message IoK8sApimachineryPkgApisMetaV1APIResourceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // groupVersion is the group and version this APIResourceList is for.
    string groupVersion = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // resources contains the name of the resources and if they are namespaced.
    repeated IoK8sApimachineryPkgApisMetaV1APIResource resources = 4;
}

// APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
message IoK8sApimachineryPkgApisMetaV1APIVersions {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;

    // a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    repeated IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR serverAddressByClientCIDRs = 3;

    // versions are the api versions that are available.
    repeated string versions = 4;
}

// DeleteOptions may be provided when deleting an API object.
message IoK8sApimachineryPkgApisMetaV1DeleteOptions {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    int64 gracePeriodSeconds = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    bool orphanDependents = 4;

    // Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    IoK8sApimachineryPkgApisMetaV1Preconditions preconditions = 5;

    // Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
    string propagationPolicy = 6;
}

// GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
message IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
    // groupVersion specifies the API group and version in the form "group/version"
    string groupVersion = 1;

    // version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
    string version = 2;
}

// Initializer is information about an initializer that has not yet completed.
message IoK8sApimachineryPkgApisMetaV1Initializer {
    // name of the process that is responsible for initializing this object.
    string name = 1;
}

// Initializers tracks the progress of initialization.
message IoK8sApimachineryPkgApisMetaV1Initializers {
    // Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
    repeated IoK8sApimachineryPkgApisMetaV1Initializer pending = 1;

    // If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.
    IoK8sApimachineryPkgApisMetaV1Status result = 2;
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
message IoK8sApimachineryPkgApisMetaV1LabelSelector {
    // matchExpressions is a list of label selector requirements. The requirements are ANDed.
    repeated IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement matchExpressions = 1;

    // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    map<string, string> matchLabels = 2;
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
message IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement {
    // key is the label key that the selector applies to.
    string key = 1;

    // operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    string operator = 2;

    // values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    repeated string values = 3;
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
message IoK8sApimachineryPkgApisMetaV1ListMeta {
    // continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response.
    string continue = 1;

    // String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
    string resourceVersion = 2;

    // selfLink is a URL representing this object. Populated by the system. Read-only.
    string selfLink = 3;
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
message IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    // Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
    string clusterName = 2;

    // CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
    // 
    // Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    string creationTimestamp = 3;

    // Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    int64 deletionGracePeriodSeconds = 4;

    // DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
    // 
    // Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
    string deletionTimestamp = 5;

    // Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
    repeated string finalizers = 6;

    // GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
    // 
    // If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
    // 
    // Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
    string generateName = 7;

    // A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    int64 generation = 8;

    // An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.
    // 
    // When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.
    IoK8sApimachineryPkgApisMetaV1Initializers initializers = 9;

    // Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 10;

    // Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 11;

    // Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
    // 
    // Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
    string namespace = 12;

    // List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    repeated IoK8sApimachineryPkgApisMetaV1OwnerReference ownerReferences = 13;

    // An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
    // 
    // Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
    string resourceVersion = 14;

    // SelfLink is a URL representing this object. Populated by the system. Read-only.
    string selfLink = 15;

    // UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
    // 
    // Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 16;
}

// OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
message IoK8sApimachineryPkgApisMetaV1OwnerReference {
    // API version of the referent.
    string apiVersion = 1;

    // If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
    bool blockOwnerDeletion = 2;

    // If true, this reference points to the managing controller.
    bool controller = 3;

    // Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 4;

    // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 6;
}

// Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
message IoK8sApimachineryPkgApisMetaV1Patch {}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
message IoK8sApimachineryPkgApisMetaV1Preconditions {
    // Specifies the target UID.
    string uid = 1;
}

// ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
message IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR {
    // The CIDR with which clients can match their IP to figure out the server address that they should use.
    string clientCIDR = 1;

    // Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
    string serverAddress = 2;
}

// Status is a return value for calls that don't return other objects.
message IoK8sApimachineryPkgApisMetaV1Status {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Suggested HTTP return code for this status, 0 if not set.
    int32 code = 2;

    // Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
    IoK8sApimachineryPkgApisMetaV1StatusDetails details = 3;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 4;

    // A human-readable description of the status of this operation.
    string message = 5;

    // Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 6;

    // A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
    string reason = 7;

    // Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
    string status = 8;
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
message IoK8sApimachineryPkgApisMetaV1StatusCause {
    // The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
    // 
    // Examples:
    //   "name" - the field "name" on the current resource
    //   "items[0].name" - the field "name" on the first array entry in "items"
    string field = 1;

    // A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
    string message = 2;

    // A machine-readable description of the cause of the error. If this value is empty there is no information available.
    string reason = 3;
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
message IoK8sApimachineryPkgApisMetaV1StatusDetails {
    // The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
    repeated IoK8sApimachineryPkgApisMetaV1StatusCause causes = 1;

    // The group attribute of the resource associated with the status StatusReason.
    string group = 2;

    // The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;

    // The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
    string name = 4;

    // If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
    int32 retryAfterSeconds = 5;

    // UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 6;
}

// Event represents a single event to a watched resource.
message IoK8sApimachineryPkgApisMetaV1WatchEvent {
    // Object is:
    //  * If Type is Added or Modified: the new state of the object.
    //  * If Type is Deleted: the state of the object immediately before deletion.
    //  * If Type is Error: *Status is recommended; other types may make sense
    //    depending on context.
    IoK8sApimachineryPkgRuntimeRawExtension object = 1;
    string type = 2;
}

// RawExtension is used to hold extensions in external versions.
// 
// To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
// 
// // Internal package: type MyAPIObject struct {
// 	runtime.TypeMeta `json:",inline"`
// 	MyPlugin runtime.Object `json:"myPlugin"`
// } type PluginA struct {
// 	AOption string `json:"aOption"`
// }
// 
// // External package: type MyAPIObject struct {
// 	runtime.TypeMeta `json:",inline"`
// 	MyPlugin runtime.RawExtension `json:"myPlugin"`
// } type PluginA struct {
// 	AOption string `json:"aOption"`
// }
// 
// // On the wire, the JSON will look something like this: {
// 	"kind":"MyAPIObject",
// 	"apiVersion":"v1",
// 	"myPlugin": {
// 		"kind":"PluginA",
// 		"aOption":"foo",
// 	},
// }
// 
// So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
message IoK8sApimachineryPkgRuntimeRawExtension {
    // Raw is the underlying serialization of this object.
    bytes Raw = 1;
}

// Info contains versioning information. how we'll want to distribute that information.
message IoK8sApimachineryPkgVersionInfo {
    string buildDate = 1;
    string compiler = 2;
    string gitCommit = 3;
    string gitTreeState = 4;
    string gitVersion = 5;
    string goVersion = 6;
    string major = 7;
    string minor = 8;
    string platform = 9;
}

// APIService represents a server for a particular GroupVersion. Name must be "version.group".
message IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 2;
    IoK8sApimachineryPkgApisMetaV1ObjectMeta metadata = 3;

    // Spec contains information for locating and communicating with a server
    IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec spec = 4;

    // Status contains derived information about an API server
    IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus status = 5;
}

message IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition {
    // Last time the condition transitioned from one status to another.
    string lastTransitionTime = 1;

    // Human-readable message indicating details about last transition.
    string message = 2;

    // Unique, one-word, CamelCase reason for the condition's last transition.
    string reason = 3;

    // Status is the status of the condition. Can be True, False, Unknown.
    string status = 4;

    // Type is the type of the condition.
    string type = 5;
}

// APIServiceList is a list of APIService objects.
message IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceList {
    // APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
    string apiVersion = 1;
    repeated IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService items = 2;

    // Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
    string kind = 3;
    IoK8sApimachineryPkgApisMetaV1ListMeta metadata = 4;
}

// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
message IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceSpec {
    // CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.
    bytes caBundle = 1;

    // Group is the API group name this server hosts
    string group = 2;

    // GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
    int32 groupPriorityMinimum = 3;

    // InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
    bool insecureSkipTLSVerify = 4;

    // Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
    IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference service = 5;

    // Version is the API version this server hosts.  For example, "v1"
    string version = 6;

    // VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it's inside of a group, the number can be small, probably in the 10s.
    int32 versionPriority = 7;
}

// APIServiceStatus contains derived information about an API server
message IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceStatus {
    // Current service state of apiService.
    repeated IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceCondition conditions = 1;
}

// ServiceReference holds a reference to Service.legacy.k8s.io
message IoK8sKubeAggregatorPkgApisApiregistrationV1beta1ServiceReference {
    // Name is the name of the service
    string name = 1;

    // Namespace is the namespace of the service
    string namespace = 2;
}

message ListApiextensionsV1beta1CustomResourceDefinitionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListApiregistrationV1beta1ApiServiceRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta1ControllerRevisionForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta1DeploymentForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta1NamespacedControllerRevisionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta1NamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta1NamespacedStatefulSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta1StatefulSetForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta2ControllerRevisionForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta2DaemonSetForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta2DeploymentForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta2NamespacedControllerRevisionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta2NamespacedDaemonSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta2NamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta2NamespacedReplicaSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta2NamespacedStatefulSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAppsV1beta2ReplicaSetForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAppsV1beta2StatefulSetForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListBatchV1JobForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListBatchV1NamespacedJobRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListBatchV1beta1CronJobForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListBatchV1beta1NamespacedCronJobRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCertificatesV1beta1CertificateSigningRequestRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1ComponentStatusRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1ConfigMapForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1EndpointsForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1EventForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1LimitRangeForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1NamespaceRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1NamespacedConfigMapRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedEndpointsRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedEventRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedLimitRangeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedPersistentVolumeClaimRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedPodRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedPodTemplateRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedReplicationControllerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedResourceQuotaRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedSecretRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedServiceAccountRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NamespacedServiceRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListCoreV1NodeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1PersistentVolumeClaimForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1PersistentVolumeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1PodForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1PodTemplateForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1ReplicationControllerForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1ResourceQuotaForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1SecretForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1ServiceAccountForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListCoreV1ServiceForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListExtensionsV1beta1DaemonSetForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListExtensionsV1beta1DeploymentForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListExtensionsV1beta1IngressForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListExtensionsV1beta1NamespacedDaemonSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListExtensionsV1beta1NamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListExtensionsV1beta1NamespacedIngressRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListExtensionsV1beta1NamespacedNetworkPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListExtensionsV1beta1NamespacedReplicaSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListExtensionsV1beta1NetworkPolicyForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListExtensionsV1beta1PodSecurityPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListExtensionsV1beta1ReplicaSetForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListNetworkingV1NamespacedNetworkPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListNetworkingV1NetworkPolicyForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1ClusterRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1ClusterRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1NamespacedRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListRbacAuthorizationV1NamespacedRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListRbacAuthorizationV1RoleBindingForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1RoleForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1beta1ClusterRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListRbacAuthorizationV1beta1NamespacedRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListRbacAuthorizationV1beta1RoleForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListStorageV1StorageClassRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message ListStorageV1beta1StorageClassRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message LogFileHandlerRequest {
    // path to the log
    string logpath = 1;
}

message PatchApiextensionsV1beta1CustomResourceDefinitionRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the CustomResourceDefinition
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchApiregistrationV1beta1ApiServiceRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the APIService
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchAppsV1beta1NamespacedControllerRevisionRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ControllerRevision
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta1NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta1NamespacedDeploymentScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta1NamespacedDeploymentStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta1NamespacedStatefulSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta1NamespacedStatefulSetScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta1NamespacedStatefulSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedControllerRevisionRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ControllerRevision
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedDaemonSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedDaemonSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedDeploymentScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedDeploymentStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedReplicaSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedReplicaSetScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedReplicaSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedStatefulSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedStatefulSetScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAppsV1beta2NamespacedStatefulSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchBatchV1NamespacedJobRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Job
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchBatchV1NamespacedJobStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Job
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchBatchV1beta1NamespacedCronJobRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the CronJob
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchBatchV1beta1NamespacedCronJobStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the CronJob
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCertificatesV1beta1CertificateSigningRequestRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the CertificateSigningRequest
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchCoreV1NamespaceRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Namespace
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchCoreV1NamespaceStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Namespace
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchCoreV1NamespacedConfigMapRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ConfigMap
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedEndpointsRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Endpoints
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedEventRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Event
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedLimitRangeRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the LimitRange
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PersistentVolumeClaim
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedPersistentVolumeClaimStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PersistentVolumeClaim
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedPodRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Pod
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedPodStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Pod
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedPodTemplateRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PodTemplate
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedReplicationControllerRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ReplicationController
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedReplicationControllerScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedReplicationControllerStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ReplicationController
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedResourceQuotaRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ResourceQuota
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedResourceQuotaStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ResourceQuota
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedSecretRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Secret
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedServiceAccountRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ServiceAccount
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedServiceRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Service
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NamespacedServiceStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Service
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchCoreV1NodeRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Node
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchCoreV1NodeStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Node
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchCoreV1PersistentVolumeRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PersistentVolume
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchCoreV1PersistentVolumeStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PersistentVolume
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchExtensionsV1beta1NamespacedDaemonSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedDaemonSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedDeploymentRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedDeploymentScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedDeploymentStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedIngressRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Ingress
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedIngressStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Ingress
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedNetworkPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the NetworkPolicy
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedReplicaSetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedReplicaSetScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedReplicaSetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchExtensionsV1beta1PodSecurityPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PodSecurityPolicy
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the NetworkPolicy
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PodDisruptionBudget
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the PodDisruptionBudget
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ClusterRoleBinding
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ClusterRole
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the RoleBinding
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Role
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ClusterRoleBinding
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchRbacAuthorizationV1beta1ClusterRoleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the ClusterRole
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the RoleBinding
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchRbacAuthorizationV1beta1NamespacedRoleRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the Role
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message PatchStorageV1StorageClassRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the StorageClass
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message PatchStorageV1beta1StorageClassRequest {
    IoK8sApimachineryPkgApisMetaV1Patch body = 1;

    // name of the StorageClass
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ProxyCoreV1DeleteNamespacedPodRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1DeleteNamespacedPodWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1DeleteNamespacedServiceRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1DeleteNamespacedServiceWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1DeleteNodeRequest {
    // name of the Node
    string name = 1;
}

message ProxyCoreV1DeleteNodeWithPathRequest {
    // name of the Node
    string name = 1;

    // path to the resource
    string path = 2;
}

message ProxyCoreV1GetNamespacedPodRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1GetNamespacedPodWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1GetNamespacedServiceRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1GetNamespacedServiceWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1GetNodeRequest {
    // name of the Node
    string name = 1;
}

message ProxyCoreV1GetNodeWithPathRequest {
    // name of the Node
    string name = 1;

    // path to the resource
    string path = 2;
}

message ProxyCoreV1PatchNamespacedPodRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1PatchNamespacedPodWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1PatchNamespacedServiceRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1PatchNamespacedServiceWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1PatchNodeRequest {
    // name of the Node
    string name = 1;
}

message ProxyCoreV1PatchNodeWithPathRequest {
    // name of the Node
    string name = 1;

    // path to the resource
    string path = 2;
}

message ProxyCoreV1PostNamespacedPodRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1PostNamespacedPodWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1PostNamespacedServiceRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1PostNamespacedServiceWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1PostNodeRequest {
    // name of the Node
    string name = 1;
}

message ProxyCoreV1PostNodeWithPathRequest {
    // name of the Node
    string name = 1;

    // path to the resource
    string path = 2;
}

message ProxyCoreV1PutNamespacedPodRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1PutNamespacedPodWithPathRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1PutNamespacedServiceRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;
}

message ProxyCoreV1PutNamespacedServiceWithPathRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // path to the resource
    string path = 3;
}

message ProxyCoreV1PutNodeRequest {
    // name of the Node
    string name = 1;
}

message ProxyCoreV1PutNodeWithPathRequest {
    // name of the Node
    string name = 1;

    // path to the resource
    string path = 2;
}

message ReadApiextensionsV1beta1CustomResourceDefinitionRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the CustomResourceDefinition
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadApiregistrationV1beta1ApiServiceRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the APIService
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadAppsV1beta1NamespacedControllerRevisionRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ControllerRevision
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta1NamespacedDeploymentRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Deployment
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta1NamespacedDeploymentScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta1NamespacedDeploymentStatusRequest {
    // name of the Deployment
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta1NamespacedStatefulSetRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the StatefulSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta1NamespacedStatefulSetScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta1NamespacedStatefulSetStatusRequest {
    // name of the StatefulSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta2NamespacedControllerRevisionRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ControllerRevision
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta2NamespacedDaemonSetRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the DaemonSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta2NamespacedDaemonSetStatusRequest {
    // name of the DaemonSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta2NamespacedDeploymentRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Deployment
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta2NamespacedDeploymentScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta2NamespacedDeploymentStatusRequest {
    // name of the Deployment
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta2NamespacedReplicaSetRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ReplicaSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta2NamespacedReplicaSetScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta2NamespacedReplicaSetStatusRequest {
    // name of the ReplicaSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta2NamespacedStatefulSetRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the StatefulSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAppsV1beta2NamespacedStatefulSetScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAppsV1beta2NamespacedStatefulSetStatusRequest {
    // name of the StatefulSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the HorizontalPodAutoscaler
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest {
    // name of the HorizontalPodAutoscaler
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the HorizontalPodAutoscaler
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest {
    // name of the HorizontalPodAutoscaler
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadBatchV1NamespacedJobRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Job
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadBatchV1NamespacedJobStatusRequest {
    // name of the Job
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadBatchV1beta1NamespacedCronJobRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the CronJob
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadBatchV1beta1NamespacedCronJobStatusRequest {
    // name of the CronJob
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCertificatesV1beta1CertificateSigningRequestRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the CertificateSigningRequest
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadCoreV1ComponentStatusRequest {
    // name of the ComponentStatus
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1NamespaceRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Namespace
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadCoreV1NamespaceStatusRequest {
    // name of the Namespace
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1NamespacedConfigMapRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ConfigMap
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedEndpointsRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Endpoints
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedEventRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Event
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedLimitRangeRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the LimitRange
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedPersistentVolumeClaimRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the PersistentVolumeClaim
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedPersistentVolumeClaimStatusRequest {
    // name of the PersistentVolumeClaim
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPodLogRequest {
    // The container for which to stream logs. Defaults to only container if there is one container in the pod.
    string container = 1;

    // Follow the log stream of the pod. Defaults to false.
    bool follow = 2;

    // If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
    int32 limitBytes = 3;

    // name of the Pod
    string name = 4;

    // object name and auth scope, such as for teams and projects
    string namespace = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // Return previous terminated container logs. Defaults to false.
    bool previous = 7;

    // A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
    int32 sinceSeconds = 8;

    // If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
    int32 tailLines = 9;

    // If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
    bool timestamps = 10;
}

message ReadCoreV1NamespacedPodRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Pod
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedPodStatusRequest {
    // name of the Pod
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedPodTemplateRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the PodTemplate
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedReplicationControllerRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ReplicationController
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedReplicationControllerScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedReplicationControllerStatusRequest {
    // name of the ReplicationController
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedResourceQuotaRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ResourceQuota
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedResourceQuotaStatusRequest {
    // name of the ResourceQuota
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NamespacedSecretRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Secret
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedServiceAccountRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ServiceAccount
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedServiceRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Service
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadCoreV1NamespacedServiceStatusRequest {
    // name of the Service
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadCoreV1NodeRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Node
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadCoreV1NodeStatusRequest {
    // name of the Node
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadCoreV1PersistentVolumeRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the PersistentVolume
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadCoreV1PersistentVolumeStatusRequest {
    // name of the PersistentVolume
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadExtensionsV1beta1NamespacedDaemonSetRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the DaemonSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadExtensionsV1beta1NamespacedDaemonSetStatusRequest {
    // name of the DaemonSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadExtensionsV1beta1NamespacedDeploymentRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Deployment
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadExtensionsV1beta1NamespacedDeploymentScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadExtensionsV1beta1NamespacedDeploymentStatusRequest {
    // name of the Deployment
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadExtensionsV1beta1NamespacedIngressRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the Ingress
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadExtensionsV1beta1NamespacedIngressStatusRequest {
    // name of the Ingress
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadExtensionsV1beta1NamespacedNetworkPolicyRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the NetworkPolicy
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadExtensionsV1beta1NamespacedReplicaSetRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the ReplicaSet
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadExtensionsV1beta1NamespacedReplicaSetScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadExtensionsV1beta1NamespacedReplicaSetStatusRequest {
    // name of the ReplicaSet
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest {
    // name of the Scale
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadExtensionsV1beta1PodSecurityPolicyRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the PodSecurityPolicy
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadNetworkingV1NamespacedNetworkPolicyRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the NetworkPolicy
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the PodDisruptionBudget
    string name = 3;

    // object name and auth scope, such as for teams and projects
    string namespace = 4;

    // If 'true', then the output is pretty printed.
    string pretty = 5;
}

message ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest {
    // name of the PodDisruptionBudget
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadRbacAuthorizationV1ClusterRoleBindingRequest {
    // name of the ClusterRoleBinding
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadRbacAuthorizationV1ClusterRoleRequest {
    // name of the ClusterRole
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadRbacAuthorizationV1NamespacedRoleBindingRequest {
    // name of the RoleBinding
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadRbacAuthorizationV1NamespacedRoleRequest {
    // name of the Role
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    // name of the ClusterRoleBinding
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadRbacAuthorizationV1beta1ClusterRoleRequest {
    // name of the ClusterRole
    string name = 1;

    // If 'true', then the output is pretty printed.
    string pretty = 2;
}

message ReadRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    // name of the RoleBinding
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadRbacAuthorizationV1beta1NamespacedRoleRequest {
    // name of the Role
    string name = 1;

    // object name and auth scope, such as for teams and projects
    string namespace = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReadStorageV1StorageClassRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the StorageClass
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReadStorageV1beta1StorageClassRequest {
    // Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
    bool exact = 1;

    // Should this value be exported.  Export strips fields that a user can not specify.
    bool export = 2;

    // name of the StorageClass
    string name = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceApiextensionsV1beta1CustomResourceDefinitionRequest {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition body = 1;

    // name of the CustomResourceDefinition
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusRequest {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition body = 1;

    // name of the CustomResourceDefinition
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceApiregistrationV1beta1ApiServiceRequest {
    IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService body = 1;

    // name of the APIService
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceApiregistrationV1beta1ApiServiceStatusRequest {
    IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService body = 1;

    // name of the APIService
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceAppsV1beta1NamespacedControllerRevisionRequest {
    IoK8sApiAppsV1beta1ControllerRevision body = 1;

    // name of the ControllerRevision
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta1NamespacedDeploymentRequest {
    IoK8sApiAppsV1beta1Deployment body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta1NamespacedDeploymentScaleRequest {
    IoK8sApiAppsV1beta1Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta1NamespacedDeploymentStatusRequest {
    IoK8sApiAppsV1beta1Deployment body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta1NamespacedStatefulSetRequest {
    IoK8sApiAppsV1beta1StatefulSet body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta1NamespacedStatefulSetScaleRequest {
    IoK8sApiAppsV1beta1Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta1NamespacedStatefulSetStatusRequest {
    IoK8sApiAppsV1beta1StatefulSet body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedControllerRevisionRequest {
    IoK8sApiAppsV1beta2ControllerRevision body = 1;

    // name of the ControllerRevision
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedDaemonSetRequest {
    IoK8sApiAppsV1beta2DaemonSet body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedDaemonSetStatusRequest {
    IoK8sApiAppsV1beta2DaemonSet body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedDeploymentRequest {
    IoK8sApiAppsV1beta2Deployment body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedDeploymentScaleRequest {
    IoK8sApiAppsV1beta2Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedDeploymentStatusRequest {
    IoK8sApiAppsV1beta2Deployment body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedReplicaSetRequest {
    IoK8sApiAppsV1beta2ReplicaSet body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedReplicaSetScaleRequest {
    IoK8sApiAppsV1beta2Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedReplicaSetStatusRequest {
    IoK8sApiAppsV1beta2ReplicaSet body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedStatefulSetRequest {
    IoK8sApiAppsV1beta2StatefulSet body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedStatefulSetScaleRequest {
    IoK8sApiAppsV1beta2Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAppsV1beta2NamespacedStatefulSetStatusRequest {
    IoK8sApiAppsV1beta2StatefulSet body = 1;

    // name of the StatefulSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV1HorizontalPodAutoscaler body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApiAutoscalingV1HorizontalPodAutoscaler body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
    IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest {
    IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler body = 1;

    // name of the HorizontalPodAutoscaler
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceBatchV1NamespacedJobRequest {
    IoK8sApiBatchV1Job body = 1;

    // name of the Job
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceBatchV1NamespacedJobStatusRequest {
    IoK8sApiBatchV1Job body = 1;

    // name of the Job
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceBatchV1beta1NamespacedCronJobRequest {
    IoK8sApiBatchV1beta1CronJob body = 1;

    // name of the CronJob
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceBatchV1beta1NamespacedCronJobStatusRequest {
    IoK8sApiBatchV1beta1CronJob body = 1;

    // name of the CronJob
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCertificatesV1beta1CertificateSigningRequestApprovalRequest {
    IoK8sApiCertificatesV1beta1CertificateSigningRequest body = 1;

    // name of the CertificateSigningRequest
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCertificatesV1beta1CertificateSigningRequestRequest {
    IoK8sApiCertificatesV1beta1CertificateSigningRequest body = 1;

    // name of the CertificateSigningRequest
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCertificatesV1beta1CertificateSigningRequestStatusRequest {
    IoK8sApiCertificatesV1beta1CertificateSigningRequest body = 1;

    // name of the CertificateSigningRequest
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCoreV1NamespaceFinalizeRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // name of the Namespace
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCoreV1NamespaceRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // name of the Namespace
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCoreV1NamespaceStatusRequest {
    IoK8sApiCoreV1Namespace body = 1;

    // name of the Namespace
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCoreV1NamespacedConfigMapRequest {
    IoK8sApiCoreV1ConfigMap body = 1;

    // name of the ConfigMap
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedEndpointsRequest {
    IoK8sApiCoreV1Endpoints body = 1;

    // name of the Endpoints
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedEventRequest {
    IoK8sApiCoreV1Event body = 1;

    // name of the Event
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedLimitRangeRequest {
    IoK8sApiCoreV1LimitRange body = 1;

    // name of the LimitRange
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedPersistentVolumeClaimRequest {
    IoK8sApiCoreV1PersistentVolumeClaim body = 1;

    // name of the PersistentVolumeClaim
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRequest {
    IoK8sApiCoreV1PersistentVolumeClaim body = 1;

    // name of the PersistentVolumeClaim
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedPodRequest {
    IoK8sApiCoreV1Pod body = 1;

    // name of the Pod
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedPodStatusRequest {
    IoK8sApiCoreV1Pod body = 1;

    // name of the Pod
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedPodTemplateRequest {
    IoK8sApiCoreV1PodTemplate body = 1;

    // name of the PodTemplate
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedReplicationControllerRequest {
    IoK8sApiCoreV1ReplicationController body = 1;

    // name of the ReplicationController
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedReplicationControllerScaleRequest {
    IoK8sApiAutoscalingV1Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedReplicationControllerStatusRequest {
    IoK8sApiCoreV1ReplicationController body = 1;

    // name of the ReplicationController
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedResourceQuotaRequest {
    IoK8sApiCoreV1ResourceQuota body = 1;

    // name of the ResourceQuota
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedResourceQuotaStatusRequest {
    IoK8sApiCoreV1ResourceQuota body = 1;

    // name of the ResourceQuota
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedSecretRequest {
    IoK8sApiCoreV1Secret body = 1;

    // name of the Secret
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedServiceAccountRequest {
    IoK8sApiCoreV1ServiceAccount body = 1;

    // name of the ServiceAccount
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedServiceRequest {
    IoK8sApiCoreV1Service body = 1;

    // name of the Service
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NamespacedServiceStatusRequest {
    IoK8sApiCoreV1Service body = 1;

    // name of the Service
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceCoreV1NodeRequest {
    IoK8sApiCoreV1Node body = 1;

    // name of the Node
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCoreV1NodeStatusRequest {
    IoK8sApiCoreV1Node body = 1;

    // name of the Node
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCoreV1PersistentVolumeRequest {
    IoK8sApiCoreV1PersistentVolume body = 1;

    // name of the PersistentVolume
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceCoreV1PersistentVolumeStatusRequest {
    IoK8sApiCoreV1PersistentVolume body = 1;

    // name of the PersistentVolume
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceExtensionsV1beta1NamespacedDaemonSetRequest {
    IoK8sApiExtensionsV1beta1DaemonSet body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedDaemonSetStatusRequest {
    IoK8sApiExtensionsV1beta1DaemonSet body = 1;

    // name of the DaemonSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedDeploymentRequest {
    IoK8sApiExtensionsV1beta1Deployment body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedDeploymentScaleRequest {
    IoK8sApiExtensionsV1beta1Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedDeploymentStatusRequest {
    IoK8sApiExtensionsV1beta1Deployment body = 1;

    // name of the Deployment
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedIngressRequest {
    IoK8sApiExtensionsV1beta1Ingress body = 1;

    // name of the Ingress
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedIngressStatusRequest {
    IoK8sApiExtensionsV1beta1Ingress body = 1;

    // name of the Ingress
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedNetworkPolicyRequest {
    IoK8sApiExtensionsV1beta1NetworkPolicy body = 1;

    // name of the NetworkPolicy
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedReplicaSetRequest {
    IoK8sApiExtensionsV1beta1ReplicaSet body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedReplicaSetScaleRequest {
    IoK8sApiExtensionsV1beta1Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedReplicaSetStatusRequest {
    IoK8sApiExtensionsV1beta1ReplicaSet body = 1;

    // name of the ReplicaSet
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest {
    IoK8sApiExtensionsV1beta1Scale body = 1;

    // name of the Scale
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceExtensionsV1beta1PodSecurityPolicyRequest {
    IoK8sApiExtensionsV1beta1PodSecurityPolicy body = 1;

    // name of the PodSecurityPolicy
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceNetworkingV1NamespacedNetworkPolicyRequest {
    IoK8sApiNetworkingV1NetworkPolicy body = 1;

    // name of the NetworkPolicy
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    IoK8sApiPolicyV1beta1PodDisruptionBudget body = 1;

    // name of the PodDisruptionBudget
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest {
    IoK8sApiPolicyV1beta1PodDisruptionBudget body = 1;

    // name of the PodDisruptionBudget
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceRbacAuthorizationV1ClusterRoleBindingRequest {
    IoK8sApiRbacV1ClusterRoleBinding body = 1;

    // name of the ClusterRoleBinding
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceRbacAuthorizationV1ClusterRoleRequest {
    IoK8sApiRbacV1ClusterRole body = 1;

    // name of the ClusterRole
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceRbacAuthorizationV1NamespacedRoleBindingRequest {
    IoK8sApiRbacV1RoleBinding body = 1;

    // name of the RoleBinding
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceRbacAuthorizationV1NamespacedRoleRequest {
    IoK8sApiRbacV1Role body = 1;

    // name of the Role
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    IoK8sApiRbacV1beta1ClusterRoleBinding body = 1;

    // name of the ClusterRoleBinding
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceRbacAuthorizationV1beta1ClusterRoleRequest {
    IoK8sApiRbacV1beta1ClusterRole body = 1;

    // name of the ClusterRole
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    IoK8sApiRbacV1beta1RoleBinding body = 1;

    // name of the RoleBinding
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceRbacAuthorizationV1beta1NamespacedRoleRequest {
    IoK8sApiRbacV1beta1Role body = 1;

    // name of the Role
    string name = 2;

    // object name and auth scope, such as for teams and projects
    string namespace = 3;

    // If 'true', then the output is pretty printed.
    string pretty = 4;
}

message ReplaceStorageV1StorageClassRequest {
    IoK8sApiStorageV1StorageClass body = 1;

    // name of the StorageClass
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message ReplaceStorageV1beta1StorageClassRequest {
    IoK8sApiStorageV1beta1StorageClass body = 1;

    // name of the StorageClass
    string name = 2;

    // If 'true', then the output is pretty printed.
    string pretty = 3;
}

message WatchApiextensionsV1beta1CustomResourceDefinitionListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchApiextensionsV1beta1CustomResourceDefinitionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CustomResourceDefinition
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchApiregistrationV1beta1ApiServiceListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchApiregistrationV1beta1ApiServiceRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the APIService
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta1ControllerRevisionListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAppsV1beta1DeploymentListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAppsV1beta1NamespacedControllerRevisionListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta1NamespacedControllerRevisionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ControllerRevision
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta1NamespacedDeploymentListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta1NamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Deployment
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta1NamespacedStatefulSetListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta1NamespacedStatefulSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the StatefulSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta1StatefulSetListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAppsV1beta2ControllerRevisionListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAppsV1beta2DaemonSetListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAppsV1beta2DeploymentListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAppsV1beta2NamespacedControllerRevisionListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta2NamespacedControllerRevisionRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ControllerRevision
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta2NamespacedDaemonSetListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta2NamespacedDaemonSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the DaemonSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta2NamespacedDeploymentListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta2NamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Deployment
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta2NamespacedReplicaSetListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta2NamespacedReplicaSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ReplicaSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta2NamespacedStatefulSetListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAppsV1beta2NamespacedStatefulSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the StatefulSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAppsV1beta2ReplicaSetListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAppsV1beta2StatefulSetListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the HorizontalPodAutoscaler
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchBatchV1JobListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchBatchV1NamespacedJobListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchBatchV1NamespacedJobRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Job
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchBatchV1beta1CronJobListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchBatchV1beta1NamespacedCronJobListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchBatchV1beta1NamespacedCronJobRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CronJob
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCertificatesV1beta1CertificateSigningRequestListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCertificatesV1beta1CertificateSigningRequestRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the CertificateSigningRequest
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1ConfigMapListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1EndpointsListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1EventListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1LimitRangeListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1NamespaceListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1NamespaceRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Namespace
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedConfigMapListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedConfigMapRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ConfigMap
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedEndpointsListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedEndpointsRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Endpoints
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedEventListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedEventRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Event
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedLimitRangeListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedLimitRangeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the LimitRange
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedPersistentVolumeClaimListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedPersistentVolumeClaimRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PersistentVolumeClaim
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedPodListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedPodRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Pod
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedPodTemplateListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedPodTemplateRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PodTemplate
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedReplicationControllerListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedReplicationControllerRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ReplicationController
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedResourceQuotaListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedResourceQuotaRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ResourceQuota
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedSecretListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedSecretRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Secret
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedServiceAccountListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedServiceAccountRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ServiceAccount
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NamespacedServiceListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1NamespacedServiceRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Service
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchCoreV1NodeListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1NodeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Node
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1PersistentVolumeListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1PersistentVolumeRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PersistentVolume
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchCoreV1PodListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1PodTemplateListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1ReplicationControllerListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1ResourceQuotaListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1SecretListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1ServiceAccountListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchCoreV1ServiceListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchExtensionsV1beta1DaemonSetListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchExtensionsV1beta1DeploymentListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchExtensionsV1beta1IngressListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchExtensionsV1beta1NamespacedDaemonSetListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchExtensionsV1beta1NamespacedDaemonSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the DaemonSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchExtensionsV1beta1NamespacedDeploymentListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchExtensionsV1beta1NamespacedDeploymentRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Deployment
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchExtensionsV1beta1NamespacedIngressListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchExtensionsV1beta1NamespacedIngressRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Ingress
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchExtensionsV1beta1NamespacedNetworkPolicyListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchExtensionsV1beta1NamespacedNetworkPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the NetworkPolicy
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchExtensionsV1beta1NamespacedReplicaSetListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchExtensionsV1beta1NamespacedReplicaSetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ReplicaSet
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchExtensionsV1beta1PodSecurityPolicyListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchExtensionsV1beta1PodSecurityPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PodSecurityPolicy
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchExtensionsV1beta1ReplicaSetListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchNetworkingV1NamespacedNetworkPolicyListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchNetworkingV1NamespacedNetworkPolicyRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the NetworkPolicy
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchNetworkingV1NetworkPolicyListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the PodDisruptionBudget
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1ClusterRoleBindingListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1ClusterRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterRoleBinding
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1ClusterRoleListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1ClusterRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterRole
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1NamespacedRoleBindingListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1NamespacedRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the RoleBinding
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1NamespacedRoleListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1NamespacedRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Role
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1RoleListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1beta1ClusterRoleBindingListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterRoleBinding
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1beta1ClusterRoleListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1beta1ClusterRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the ClusterRole
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1beta1NamespacedRoleBindingListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the RoleBinding
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1beta1NamespacedRoleListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // object name and auth scope, such as for teams and projects
    string namespace = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchRbacAuthorizationV1beta1NamespacedRoleRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the Role
    string name = 6;

    // object name and auth scope, such as for teams and projects
    string namespace = 7;

    // If 'true', then the output is pretty printed.
    string pretty = 8;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 9;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 10;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 11;
}

message WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchRbacAuthorizationV1beta1RoleListForAllNamespacesRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchStorageV1StorageClassListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchStorageV1StorageClassRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the StorageClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

message WatchStorageV1beta1StorageClassListRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // If 'true', then the output is pretty printed.
    string pretty = 6;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 7;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 8;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 9;
}

message WatchStorageV1beta1StorageClassRequest {
    // The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    string continue = 1;

    // A selector to restrict the list of returned objects by their fields. Defaults to everything.
    string fieldSelector = 2;

    // If true, partially initialized resources are included in the response.
    bool includeUninitialized = 3;

    // A selector to restrict the list of returned objects by their labels. Defaults to everything.
    string labelSelector = 4;

    // limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.
    // 
    // The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    int32 limit = 5;

    // name of the StorageClass
    string name = 6;

    // If 'true', then the output is pretty printed.
    string pretty = 7;

    // When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
    string resourceVersion = 8;

    // Timeout for the list/watch call.
    int32 timeoutSeconds = 9;

    // Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
    bool watch = 10;
}

service KubernetesService {
    // connect DELETE requests to proxy of Pod
    rpc ConnectCoreV1DeleteNamespacedPodProxy(ConnectCoreV1DeleteNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Pod
    rpc ConnectCoreV1DeleteNamespacedPodProxyWithPath(ConnectCoreV1DeleteNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Service
    rpc ConnectCoreV1DeleteNamespacedServiceProxy(ConnectCoreV1DeleteNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Service
    rpc ConnectCoreV1DeleteNamespacedServiceProxyWithPath(ConnectCoreV1DeleteNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Node
    rpc ConnectCoreV1DeleteNodeProxy(ConnectCoreV1DeleteNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect DELETE requests to proxy of Node
    rpc ConnectCoreV1DeleteNodeProxyWithPath(ConnectCoreV1DeleteNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to attach of Pod
    rpc ConnectCoreV1GetNamespacedPodAttach(ConnectCoreV1GetNamespacedPodAttachRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to exec of Pod
    rpc ConnectCoreV1GetNamespacedPodExec(ConnectCoreV1GetNamespacedPodExecRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to portforward of Pod
    rpc ConnectCoreV1GetNamespacedPodPortforward(ConnectCoreV1GetNamespacedPodPortforwardRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Pod
    rpc ConnectCoreV1GetNamespacedPodProxy(ConnectCoreV1GetNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Pod
    rpc ConnectCoreV1GetNamespacedPodProxyWithPath(ConnectCoreV1GetNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Service
    rpc ConnectCoreV1GetNamespacedServiceProxy(ConnectCoreV1GetNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Service
    rpc ConnectCoreV1GetNamespacedServiceProxyWithPath(ConnectCoreV1GetNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Node
    rpc ConnectCoreV1GetNodeProxy(ConnectCoreV1GetNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect GET requests to proxy of Node
    rpc ConnectCoreV1GetNodeProxyWithPath(ConnectCoreV1GetNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Pod
    rpc ConnectCoreV1PatchNamespacedPodProxy(ConnectCoreV1PatchNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Pod
    rpc ConnectCoreV1PatchNamespacedPodProxyWithPath(ConnectCoreV1PatchNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Service
    rpc ConnectCoreV1PatchNamespacedServiceProxy(ConnectCoreV1PatchNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Service
    rpc ConnectCoreV1PatchNamespacedServiceProxyWithPath(ConnectCoreV1PatchNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Node
    rpc ConnectCoreV1PatchNodeProxy(ConnectCoreV1PatchNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PATCH requests to proxy of Node
    rpc ConnectCoreV1PatchNodeProxyWithPath(ConnectCoreV1PatchNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to attach of Pod
    rpc ConnectCoreV1PostNamespacedPodAttach(ConnectCoreV1PostNamespacedPodAttachRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to exec of Pod
    rpc ConnectCoreV1PostNamespacedPodExec(ConnectCoreV1PostNamespacedPodExecRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to portforward of Pod
    rpc ConnectCoreV1PostNamespacedPodPortforward(ConnectCoreV1PostNamespacedPodPortforwardRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Pod
    rpc ConnectCoreV1PostNamespacedPodProxy(ConnectCoreV1PostNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Pod
    rpc ConnectCoreV1PostNamespacedPodProxyWithPath(ConnectCoreV1PostNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Service
    rpc ConnectCoreV1PostNamespacedServiceProxy(ConnectCoreV1PostNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Service
    rpc ConnectCoreV1PostNamespacedServiceProxyWithPath(ConnectCoreV1PostNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Node
    rpc ConnectCoreV1PostNodeProxy(ConnectCoreV1PostNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect POST requests to proxy of Node
    rpc ConnectCoreV1PostNodeProxyWithPath(ConnectCoreV1PostNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Pod
    rpc ConnectCoreV1PutNamespacedPodProxy(ConnectCoreV1PutNamespacedPodProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Pod
    rpc ConnectCoreV1PutNamespacedPodProxyWithPath(ConnectCoreV1PutNamespacedPodProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Service
    rpc ConnectCoreV1PutNamespacedServiceProxy(ConnectCoreV1PutNamespacedServiceProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Service
    rpc ConnectCoreV1PutNamespacedServiceProxyWithPath(ConnectCoreV1PutNamespacedServiceProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Node
    rpc ConnectCoreV1PutNodeProxy(ConnectCoreV1PutNodeProxyRequest) returns (google.protobuf.StringValue) {}

    // connect PUT requests to proxy of Node
    rpc ConnectCoreV1PutNodeProxyWithPath(ConnectCoreV1PutNodeProxyWithPathRequest) returns (google.protobuf.StringValue) {}

    // create a CustomResourceDefinition
    rpc CreateApiextensionsV1beta1CustomResourceDefinition(CreateApiextensionsV1beta1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition) {}

    // create an APIService
    rpc CreateApiregistrationV1beta1ApiService(CreateApiregistrationV1beta1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService) {}

    // create a ControllerRevision
    rpc CreateAppsV1beta1NamespacedControllerRevision(CreateAppsV1beta1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta1ControllerRevision) {}

    // create a Deployment
    rpc CreateAppsV1beta1NamespacedDeployment(CreateAppsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta1Deployment) {}

    // create rollback of a Deployment
    rpc CreateAppsV1beta1NamespacedDeploymentRollback(CreateAppsV1beta1NamespacedDeploymentRollbackRequest) returns (IoK8sApiAppsV1beta1DeploymentRollback) {}

    // create a StatefulSet
    rpc CreateAppsV1beta1NamespacedStatefulSet(CreateAppsV1beta1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta1StatefulSet) {}

    // create a ControllerRevision
    rpc CreateAppsV1beta2NamespacedControllerRevision(CreateAppsV1beta2NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta2ControllerRevision) {}

    // create a DaemonSet
    rpc CreateAppsV1beta2NamespacedDaemonSet(CreateAppsV1beta2NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1beta2DaemonSet) {}

    // create a Deployment
    rpc CreateAppsV1beta2NamespacedDeployment(CreateAppsV1beta2NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta2Deployment) {}

    // create a ReplicaSet
    rpc CreateAppsV1beta2NamespacedReplicaSet(CreateAppsV1beta2NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1beta2ReplicaSet) {}

    // create a StatefulSet
    rpc CreateAppsV1beta2NamespacedStatefulSet(CreateAppsV1beta2NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta2StatefulSet) {}

    // create a TokenReview
    rpc CreateAuthenticationV1TokenReview(CreateAuthenticationV1TokenReviewRequest) returns (IoK8sApiAuthenticationV1TokenReview) {}

    // create a TokenReview
    rpc CreateAuthenticationV1beta1TokenReview(CreateAuthenticationV1beta1TokenReviewRequest) returns (IoK8sApiAuthenticationV1beta1TokenReview) {}

    // create a LocalSubjectAccessReview
    rpc CreateAuthorizationV1NamespacedLocalSubjectAccessReview(CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1LocalSubjectAccessReview) {}

    // create a SelfSubjectAccessReview
    rpc CreateAuthorizationV1SelfSubjectAccessReview(CreateAuthorizationV1SelfSubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1SelfSubjectAccessReview) {}

    // create a SelfSubjectRulesReview
    rpc CreateAuthorizationV1SelfSubjectRulesReview(CreateAuthorizationV1SelfSubjectRulesReviewRequest) returns (IoK8sApiAuthorizationV1SelfSubjectRulesReview) {}

    // create a SubjectAccessReview
    rpc CreateAuthorizationV1SubjectAccessReview(CreateAuthorizationV1SubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1SubjectAccessReview) {}

    // create a LocalSubjectAccessReview
    rpc CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReview(CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview) {}

    // create a SelfSubjectAccessReview
    rpc CreateAuthorizationV1beta1SelfSubjectAccessReview(CreateAuthorizationV1beta1SelfSubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview) {}

    // create a SelfSubjectRulesReview
    rpc CreateAuthorizationV1beta1SelfSubjectRulesReview(CreateAuthorizationV1beta1SelfSubjectRulesReviewRequest) returns (IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview) {}

    // create a SubjectAccessReview
    rpc CreateAuthorizationV1beta1SubjectAccessReview(CreateAuthorizationV1beta1SubjectAccessReviewRequest) returns (IoK8sApiAuthorizationV1beta1SubjectAccessReview) {}

    // create a HorizontalPodAutoscaler
    rpc CreateAutoscalingV1NamespacedHorizontalPodAutoscaler(CreateAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // create a HorizontalPodAutoscaler
    rpc CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler) {}

    // create a Job
    rpc CreateBatchV1NamespacedJob(CreateBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // create a CronJob
    rpc CreateBatchV1beta1NamespacedCronJob(CreateBatchV1beta1NamespacedCronJobRequest) returns (IoK8sApiBatchV1beta1CronJob) {}

    // create a CertificateSigningRequest
    rpc CreateCertificatesV1beta1CertificateSigningRequest(CreateCertificatesV1beta1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1beta1CertificateSigningRequest) {}

    // create a Namespace
    rpc CreateCoreV1Namespace(CreateCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // create a Binding
    rpc CreateCoreV1NamespacedBinding(CreateCoreV1NamespacedBindingRequest) returns (IoK8sApiCoreV1Binding) {}

    // create a ConfigMap
    rpc CreateCoreV1NamespacedConfigMap(CreateCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // create Endpoints
    rpc CreateCoreV1NamespacedEndpoints(CreateCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // create an Event
    rpc CreateCoreV1NamespacedEvent(CreateCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // create a LimitRange
    rpc CreateCoreV1NamespacedLimitRange(CreateCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // create a PersistentVolumeClaim
    rpc CreateCoreV1NamespacedPersistentVolumeClaim(CreateCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // create a Pod
    rpc CreateCoreV1NamespacedPod(CreateCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // create binding of a Pod
    rpc CreateCoreV1NamespacedPodBinding(CreateCoreV1NamespacedPodBindingRequest) returns (IoK8sApiCoreV1Binding) {}

    // create eviction of a Pod
    rpc CreateCoreV1NamespacedPodEviction(CreateCoreV1NamespacedPodEvictionRequest) returns (IoK8sApiPolicyV1beta1Eviction) {}

    // create a PodTemplate
    rpc CreateCoreV1NamespacedPodTemplate(CreateCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // create a ReplicationController
    rpc CreateCoreV1NamespacedReplicationController(CreateCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // create a ResourceQuota
    rpc CreateCoreV1NamespacedResourceQuota(CreateCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // create a Secret
    rpc CreateCoreV1NamespacedSecret(CreateCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // create a Service
    rpc CreateCoreV1NamespacedService(CreateCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // create a ServiceAccount
    rpc CreateCoreV1NamespacedServiceAccount(CreateCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // create a Node
    rpc CreateCoreV1Node(CreateCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // create a PersistentVolume
    rpc CreateCoreV1PersistentVolume(CreateCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // create a DaemonSet
    rpc CreateExtensionsV1beta1NamespacedDaemonSet(CreateExtensionsV1beta1NamespacedDaemonSetRequest) returns (IoK8sApiExtensionsV1beta1DaemonSet) {}

    // create a Deployment
    rpc CreateExtensionsV1beta1NamespacedDeployment(CreateExtensionsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiExtensionsV1beta1Deployment) {}

    // create rollback of a Deployment
    rpc CreateExtensionsV1beta1NamespacedDeploymentRollback(CreateExtensionsV1beta1NamespacedDeploymentRollbackRequest) returns (IoK8sApiExtensionsV1beta1DeploymentRollback) {}

    // create an Ingress
    rpc CreateExtensionsV1beta1NamespacedIngress(CreateExtensionsV1beta1NamespacedIngressRequest) returns (IoK8sApiExtensionsV1beta1Ingress) {}

    // create a NetworkPolicy
    rpc CreateExtensionsV1beta1NamespacedNetworkPolicy(CreateExtensionsV1beta1NamespacedNetworkPolicyRequest) returns (IoK8sApiExtensionsV1beta1NetworkPolicy) {}

    // create a ReplicaSet
    rpc CreateExtensionsV1beta1NamespacedReplicaSet(CreateExtensionsV1beta1NamespacedReplicaSetRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSet) {}

    // create a PodSecurityPolicy
    rpc CreateExtensionsV1beta1PodSecurityPolicy(CreateExtensionsV1beta1PodSecurityPolicyRequest) returns (IoK8sApiExtensionsV1beta1PodSecurityPolicy) {}

    // create a NetworkPolicy
    rpc CreateNetworkingV1NamespacedNetworkPolicy(CreateNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // create a PodDisruptionBudget
    rpc CreatePolicyV1beta1NamespacedPodDisruptionBudget(CreatePolicyV1beta1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudget) {}

    // create a ClusterRole
    rpc CreateRbacAuthorizationV1ClusterRole(CreateRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // create a ClusterRoleBinding
    rpc CreateRbacAuthorizationV1ClusterRoleBinding(CreateRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // create a Role
    rpc CreateRbacAuthorizationV1NamespacedRole(CreateRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // create a RoleBinding
    rpc CreateRbacAuthorizationV1NamespacedRoleBinding(CreateRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // create a ClusterRole
    rpc CreateRbacAuthorizationV1beta1ClusterRole(CreateRbacAuthorizationV1beta1ClusterRoleRequest) returns (IoK8sApiRbacV1beta1ClusterRole) {}

    // create a ClusterRoleBinding
    rpc CreateRbacAuthorizationV1beta1ClusterRoleBinding(CreateRbacAuthorizationV1beta1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1beta1ClusterRoleBinding) {}

    // create a Role
    rpc CreateRbacAuthorizationV1beta1NamespacedRole(CreateRbacAuthorizationV1beta1NamespacedRoleRequest) returns (IoK8sApiRbacV1beta1Role) {}

    // create a RoleBinding
    rpc CreateRbacAuthorizationV1beta1NamespacedRoleBinding(CreateRbacAuthorizationV1beta1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1beta1RoleBinding) {}

    // create a StorageClass
    rpc CreateStorageV1StorageClass(CreateStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // create a StorageClass
    rpc CreateStorageV1beta1StorageClass(CreateStorageV1beta1StorageClassRequest) returns (IoK8sApiStorageV1beta1StorageClass) {}

    // delete collection of CustomResourceDefinition
    rpc DeleteApiextensionsV1beta1CollectionCustomResourceDefinition(DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a CustomResourceDefinition
    rpc DeleteApiextensionsV1beta1CustomResourceDefinition(DeleteApiextensionsV1beta1CustomResourceDefinitionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an APIService
    rpc DeleteApiregistrationV1beta1ApiService(DeleteApiregistrationV1beta1ApiServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of APIService
    rpc DeleteApiregistrationV1beta1CollectionApiService(DeleteApiregistrationV1beta1CollectionApiServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ControllerRevision
    rpc DeleteAppsV1beta1CollectionNamespacedControllerRevision(DeleteAppsV1beta1CollectionNamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Deployment
    rpc DeleteAppsV1beta1CollectionNamespacedDeployment(DeleteAppsV1beta1CollectionNamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of StatefulSet
    rpc DeleteAppsV1beta1CollectionNamespacedStatefulSet(DeleteAppsV1beta1CollectionNamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ControllerRevision
    rpc DeleteAppsV1beta1NamespacedControllerRevision(DeleteAppsV1beta1NamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Deployment
    rpc DeleteAppsV1beta1NamespacedDeployment(DeleteAppsV1beta1NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a StatefulSet
    rpc DeleteAppsV1beta1NamespacedStatefulSet(DeleteAppsV1beta1NamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ControllerRevision
    rpc DeleteAppsV1beta2CollectionNamespacedControllerRevision(DeleteAppsV1beta2CollectionNamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of DaemonSet
    rpc DeleteAppsV1beta2CollectionNamespacedDaemonSet(DeleteAppsV1beta2CollectionNamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Deployment
    rpc DeleteAppsV1beta2CollectionNamespacedDeployment(DeleteAppsV1beta2CollectionNamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ReplicaSet
    rpc DeleteAppsV1beta2CollectionNamespacedReplicaSet(DeleteAppsV1beta2CollectionNamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of StatefulSet
    rpc DeleteAppsV1beta2CollectionNamespacedStatefulSet(DeleteAppsV1beta2CollectionNamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ControllerRevision
    rpc DeleteAppsV1beta2NamespacedControllerRevision(DeleteAppsV1beta2NamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a DaemonSet
    rpc DeleteAppsV1beta2NamespacedDaemonSet(DeleteAppsV1beta2NamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Deployment
    rpc DeleteAppsV1beta2NamespacedDeployment(DeleteAppsV1beta2NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ReplicaSet
    rpc DeleteAppsV1beta2NamespacedReplicaSet(DeleteAppsV1beta2NamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a StatefulSet
    rpc DeleteAppsV1beta2NamespacedStatefulSet(DeleteAppsV1beta2NamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of HorizontalPodAutoscaler
    rpc DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a HorizontalPodAutoscaler
    rpc DeleteAutoscalingV1NamespacedHorizontalPodAutoscaler(DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of HorizontalPodAutoscaler
    rpc DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a HorizontalPodAutoscaler
    rpc DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Job
    rpc DeleteBatchV1CollectionNamespacedJob(DeleteBatchV1CollectionNamespacedJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Job
    rpc DeleteBatchV1NamespacedJob(DeleteBatchV1NamespacedJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CronJob
    rpc DeleteBatchV1beta1CollectionNamespacedCronJob(DeleteBatchV1beta1CollectionNamespacedCronJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a CronJob
    rpc DeleteBatchV1beta1NamespacedCronJob(DeleteBatchV1beta1NamespacedCronJobRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a CertificateSigningRequest
    rpc DeleteCertificatesV1beta1CertificateSigningRequest(DeleteCertificatesV1beta1CertificateSigningRequestRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of CertificateSigningRequest
    rpc DeleteCertificatesV1beta1CollectionCertificateSigningRequest(DeleteCertificatesV1beta1CollectionCertificateSigningRequestRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ConfigMap
    rpc DeleteCoreV1CollectionNamespacedConfigMap(DeleteCoreV1CollectionNamespacedConfigMapRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Endpoints
    rpc DeleteCoreV1CollectionNamespacedEndpoints(DeleteCoreV1CollectionNamespacedEndpointsRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Event
    rpc DeleteCoreV1CollectionNamespacedEvent(DeleteCoreV1CollectionNamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of LimitRange
    rpc DeleteCoreV1CollectionNamespacedLimitRange(DeleteCoreV1CollectionNamespacedLimitRangeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PersistentVolumeClaim
    rpc DeleteCoreV1CollectionNamespacedPersistentVolumeClaim(DeleteCoreV1CollectionNamespacedPersistentVolumeClaimRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Pod
    rpc DeleteCoreV1CollectionNamespacedPod(DeleteCoreV1CollectionNamespacedPodRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PodTemplate
    rpc DeleteCoreV1CollectionNamespacedPodTemplate(DeleteCoreV1CollectionNamespacedPodTemplateRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ReplicationController
    rpc DeleteCoreV1CollectionNamespacedReplicationController(DeleteCoreV1CollectionNamespacedReplicationControllerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ResourceQuota
    rpc DeleteCoreV1CollectionNamespacedResourceQuota(DeleteCoreV1CollectionNamespacedResourceQuotaRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Secret
    rpc DeleteCoreV1CollectionNamespacedSecret(DeleteCoreV1CollectionNamespacedSecretRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ServiceAccount
    rpc DeleteCoreV1CollectionNamespacedServiceAccount(DeleteCoreV1CollectionNamespacedServiceAccountRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Node
    rpc DeleteCoreV1CollectionNode(DeleteCoreV1CollectionNodeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PersistentVolume
    rpc DeleteCoreV1CollectionPersistentVolume(DeleteCoreV1CollectionPersistentVolumeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Namespace
    rpc DeleteCoreV1Namespace(DeleteCoreV1NamespaceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ConfigMap
    rpc DeleteCoreV1NamespacedConfigMap(DeleteCoreV1NamespacedConfigMapRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete Endpoints
    rpc DeleteCoreV1NamespacedEndpoints(DeleteCoreV1NamespacedEndpointsRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an Event
    rpc DeleteCoreV1NamespacedEvent(DeleteCoreV1NamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a LimitRange
    rpc DeleteCoreV1NamespacedLimitRange(DeleteCoreV1NamespacedLimitRangeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PersistentVolumeClaim
    rpc DeleteCoreV1NamespacedPersistentVolumeClaim(DeleteCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Pod
    rpc DeleteCoreV1NamespacedPod(DeleteCoreV1NamespacedPodRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PodTemplate
    rpc DeleteCoreV1NamespacedPodTemplate(DeleteCoreV1NamespacedPodTemplateRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ReplicationController
    rpc DeleteCoreV1NamespacedReplicationController(DeleteCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ResourceQuota
    rpc DeleteCoreV1NamespacedResourceQuota(DeleteCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Secret
    rpc DeleteCoreV1NamespacedSecret(DeleteCoreV1NamespacedSecretRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Service
    rpc DeleteCoreV1NamespacedService(DeleteCoreV1NamespacedServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ServiceAccount
    rpc DeleteCoreV1NamespacedServiceAccount(DeleteCoreV1NamespacedServiceAccountRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Node
    rpc DeleteCoreV1Node(DeleteCoreV1NodeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PersistentVolume
    rpc DeleteCoreV1PersistentVolume(DeleteCoreV1PersistentVolumeRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of DaemonSet
    rpc DeleteExtensionsV1beta1CollectionNamespacedDaemonSet(DeleteExtensionsV1beta1CollectionNamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Deployment
    rpc DeleteExtensionsV1beta1CollectionNamespacedDeployment(DeleteExtensionsV1beta1CollectionNamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Ingress
    rpc DeleteExtensionsV1beta1CollectionNamespacedIngress(DeleteExtensionsV1beta1CollectionNamespacedIngressRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of NetworkPolicy
    rpc DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ReplicaSet
    rpc DeleteExtensionsV1beta1CollectionNamespacedReplicaSet(DeleteExtensionsV1beta1CollectionNamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PodSecurityPolicy
    rpc DeleteExtensionsV1beta1CollectionPodSecurityPolicy(DeleteExtensionsV1beta1CollectionPodSecurityPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a DaemonSet
    rpc DeleteExtensionsV1beta1NamespacedDaemonSet(DeleteExtensionsV1beta1NamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Deployment
    rpc DeleteExtensionsV1beta1NamespacedDeployment(DeleteExtensionsV1beta1NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete an Ingress
    rpc DeleteExtensionsV1beta1NamespacedIngress(DeleteExtensionsV1beta1NamespacedIngressRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a NetworkPolicy
    rpc DeleteExtensionsV1beta1NamespacedNetworkPolicy(DeleteExtensionsV1beta1NamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ReplicaSet
    rpc DeleteExtensionsV1beta1NamespacedReplicaSet(DeleteExtensionsV1beta1NamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PodSecurityPolicy
    rpc DeleteExtensionsV1beta1PodSecurityPolicy(DeleteExtensionsV1beta1PodSecurityPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of NetworkPolicy
    rpc DeleteNetworkingV1CollectionNamespacedNetworkPolicy(DeleteNetworkingV1CollectionNamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a NetworkPolicy
    rpc DeleteNetworkingV1NamespacedNetworkPolicy(DeleteNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of PodDisruptionBudget
    rpc DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a PodDisruptionBudget
    rpc DeletePolicyV1beta1NamespacedPodDisruptionBudget(DeletePolicyV1beta1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterRole
    rpc DeleteRbacAuthorizationV1ClusterRole(DeleteRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterRoleBinding
    rpc DeleteRbacAuthorizationV1ClusterRoleBinding(DeleteRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterRole
    rpc DeleteRbacAuthorizationV1CollectionClusterRole(DeleteRbacAuthorizationV1CollectionClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterRoleBinding
    rpc DeleteRbacAuthorizationV1CollectionClusterRoleBinding(DeleteRbacAuthorizationV1CollectionClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Role
    rpc DeleteRbacAuthorizationV1CollectionNamespacedRole(DeleteRbacAuthorizationV1CollectionNamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of RoleBinding
    rpc DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Role
    rpc DeleteRbacAuthorizationV1NamespacedRole(DeleteRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a RoleBinding
    rpc DeleteRbacAuthorizationV1NamespacedRoleBinding(DeleteRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterRole
    rpc DeleteRbacAuthorizationV1beta1ClusterRole(DeleteRbacAuthorizationV1beta1ClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a ClusterRoleBinding
    rpc DeleteRbacAuthorizationV1beta1ClusterRoleBinding(DeleteRbacAuthorizationV1beta1ClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterRole
    rpc DeleteRbacAuthorizationV1beta1CollectionClusterRole(DeleteRbacAuthorizationV1beta1CollectionClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of ClusterRoleBinding
    rpc DeleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of Role
    rpc DeleteRbacAuthorizationV1beta1CollectionNamespacedRole(DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of RoleBinding
    rpc DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a Role
    rpc DeleteRbacAuthorizationV1beta1NamespacedRole(DeleteRbacAuthorizationV1beta1NamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a RoleBinding
    rpc DeleteRbacAuthorizationV1beta1NamespacedRoleBinding(DeleteRbacAuthorizationV1beta1NamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of StorageClass
    rpc DeleteStorageV1CollectionStorageClass(DeleteStorageV1CollectionStorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a StorageClass
    rpc DeleteStorageV1StorageClass(DeleteStorageV1StorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete collection of StorageClass
    rpc DeleteStorageV1beta1CollectionStorageClass(DeleteStorageV1beta1CollectionStorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // delete a StorageClass
    rpc DeleteStorageV1beta1StorageClass(DeleteStorageV1beta1StorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1Status) {}

    // get available API versions
    rpc GetApiVersions(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroupList) {}

    // get information of a group
    rpc GetApiextensionsApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetApiextensionsV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetApiregistrationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetApiregistrationV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAppsApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAppsV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAppsV1beta2ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAuthenticationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAuthenticationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAuthenticationV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAuthorizationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAuthorizationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAuthorizationV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetAutoscalingApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetAutoscalingV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetAutoscalingV2beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetBatchApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetBatchV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetBatchV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetCertificatesApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetCertificatesV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get the code version
    rpc GetCodeVersion(google.protobuf.Empty) returns (IoK8sApimachineryPkgVersionInfo) {}

    // get available API versions
    rpc GetCoreApiVersions(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIVersions) {}

    // get available resources
    rpc GetCoreV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetExtensionsApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetExtensionsV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetNetworkingApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetNetworkingV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetPolicyApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetPolicyV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetRbacAuthorizationApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetRbacAuthorizationV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetRbacAuthorizationV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get information of a group
    rpc GetStorageApiGroup(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIGroup) {}

    // get available resources
    rpc GetStorageV1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // get available resources
    rpc GetStorageV1beta1ApiResources(google.protobuf.Empty) returns (IoK8sApimachineryPkgApisMetaV1APIResourceList) {}

    // list or watch objects of kind CustomResourceDefinition
    rpc ListApiextensionsV1beta1CustomResourceDefinition(ListApiextensionsV1beta1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList) {}

    // list or watch objects of kind APIService
    rpc ListApiregistrationV1beta1ApiService(ListApiregistrationV1beta1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIServiceList) {}

    // list or watch objects of kind ControllerRevision
    rpc ListAppsV1beta1ControllerRevisionForAllNamespaces(ListAppsV1beta1ControllerRevisionForAllNamespacesRequest) returns (IoK8sApiAppsV1beta1ControllerRevisionList) {}

    // list or watch objects of kind Deployment
    rpc ListAppsV1beta1DeploymentForAllNamespaces(ListAppsV1beta1DeploymentForAllNamespacesRequest) returns (IoK8sApiAppsV1beta1DeploymentList) {}

    // list or watch objects of kind ControllerRevision
    rpc ListAppsV1beta1NamespacedControllerRevision(ListAppsV1beta1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta1ControllerRevisionList) {}

    // list or watch objects of kind Deployment
    rpc ListAppsV1beta1NamespacedDeployment(ListAppsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta1DeploymentList) {}

    // list or watch objects of kind StatefulSet
    rpc ListAppsV1beta1NamespacedStatefulSet(ListAppsV1beta1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta1StatefulSetList) {}

    // list or watch objects of kind StatefulSet
    rpc ListAppsV1beta1StatefulSetForAllNamespaces(ListAppsV1beta1StatefulSetForAllNamespacesRequest) returns (IoK8sApiAppsV1beta1StatefulSetList) {}

    // list or watch objects of kind ControllerRevision
    rpc ListAppsV1beta2ControllerRevisionForAllNamespaces(ListAppsV1beta2ControllerRevisionForAllNamespacesRequest) returns (IoK8sApiAppsV1beta2ControllerRevisionList) {}

    // list or watch objects of kind DaemonSet
    rpc ListAppsV1beta2DaemonSetForAllNamespaces(ListAppsV1beta2DaemonSetForAllNamespacesRequest) returns (IoK8sApiAppsV1beta2DaemonSetList) {}

    // list or watch objects of kind Deployment
    rpc ListAppsV1beta2DeploymentForAllNamespaces(ListAppsV1beta2DeploymentForAllNamespacesRequest) returns (IoK8sApiAppsV1beta2DeploymentList) {}

    // list or watch objects of kind ControllerRevision
    rpc ListAppsV1beta2NamespacedControllerRevision(ListAppsV1beta2NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta2ControllerRevisionList) {}

    // list or watch objects of kind DaemonSet
    rpc ListAppsV1beta2NamespacedDaemonSet(ListAppsV1beta2NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1beta2DaemonSetList) {}

    // list or watch objects of kind Deployment
    rpc ListAppsV1beta2NamespacedDeployment(ListAppsV1beta2NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta2DeploymentList) {}

    // list or watch objects of kind ReplicaSet
    rpc ListAppsV1beta2NamespacedReplicaSet(ListAppsV1beta2NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1beta2ReplicaSetList) {}

    // list or watch objects of kind StatefulSet
    rpc ListAppsV1beta2NamespacedStatefulSet(ListAppsV1beta2NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta2StatefulSetList) {}

    // list or watch objects of kind ReplicaSet
    rpc ListAppsV1beta2ReplicaSetForAllNamespaces(ListAppsV1beta2ReplicaSetForAllNamespacesRequest) returns (IoK8sApiAppsV1beta2ReplicaSetList) {}

    // list or watch objects of kind StatefulSet
    rpc ListAppsV1beta2StatefulSetForAllNamespaces(ListAppsV1beta2StatefulSetForAllNamespacesRequest) returns (IoK8sApiAppsV1beta2StatefulSetList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscalerList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV1NamespacedHorizontalPodAutoscaler(ListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscalerList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList) {}

    // list or watch objects of kind HorizontalPodAutoscaler
    rpc ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscalerList) {}

    // list or watch objects of kind Job
    rpc ListBatchV1JobForAllNamespaces(ListBatchV1JobForAllNamespacesRequest) returns (IoK8sApiBatchV1JobList) {}

    // list or watch objects of kind Job
    rpc ListBatchV1NamespacedJob(ListBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1JobList) {}

    // list or watch objects of kind CronJob
    rpc ListBatchV1beta1CronJobForAllNamespaces(ListBatchV1beta1CronJobForAllNamespacesRequest) returns (IoK8sApiBatchV1beta1CronJobList) {}

    // list or watch objects of kind CronJob
    rpc ListBatchV1beta1NamespacedCronJob(ListBatchV1beta1NamespacedCronJobRequest) returns (IoK8sApiBatchV1beta1CronJobList) {}

    // list or watch objects of kind CertificateSigningRequest
    rpc ListCertificatesV1beta1CertificateSigningRequest(ListCertificatesV1beta1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1beta1CertificateSigningRequestList) {}

    // list objects of kind ComponentStatus
    rpc ListCoreV1ComponentStatus(ListCoreV1ComponentStatusRequest) returns (IoK8sApiCoreV1ComponentStatusList) {}

    // list or watch objects of kind ConfigMap
    rpc ListCoreV1ConfigMapForAllNamespaces(ListCoreV1ConfigMapForAllNamespacesRequest) returns (IoK8sApiCoreV1ConfigMapList) {}

    // list or watch objects of kind Endpoints
    rpc ListCoreV1EndpointsForAllNamespaces(ListCoreV1EndpointsForAllNamespacesRequest) returns (IoK8sApiCoreV1EndpointsList) {}

    // list or watch objects of kind Event
    rpc ListCoreV1EventForAllNamespaces(ListCoreV1EventForAllNamespacesRequest) returns (IoK8sApiCoreV1EventList) {}

    // list or watch objects of kind LimitRange
    rpc ListCoreV1LimitRangeForAllNamespaces(ListCoreV1LimitRangeForAllNamespacesRequest) returns (IoK8sApiCoreV1LimitRangeList) {}

    // list or watch objects of kind Namespace
    rpc ListCoreV1Namespace(ListCoreV1NamespaceRequest) returns (IoK8sApiCoreV1NamespaceList) {}

    // list or watch objects of kind ConfigMap
    rpc ListCoreV1NamespacedConfigMap(ListCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMapList) {}

    // list or watch objects of kind Endpoints
    rpc ListCoreV1NamespacedEndpoints(ListCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1EndpointsList) {}

    // list or watch objects of kind Event
    rpc ListCoreV1NamespacedEvent(ListCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1EventList) {}

    // list or watch objects of kind LimitRange
    rpc ListCoreV1NamespacedLimitRange(ListCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRangeList) {}

    // list or watch objects of kind PersistentVolumeClaim
    rpc ListCoreV1NamespacedPersistentVolumeClaim(ListCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaimList) {}

    // list or watch objects of kind Pod
    rpc ListCoreV1NamespacedPod(ListCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1PodList) {}

    // list or watch objects of kind PodTemplate
    rpc ListCoreV1NamespacedPodTemplate(ListCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplateList) {}

    // list or watch objects of kind ReplicationController
    rpc ListCoreV1NamespacedReplicationController(ListCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationControllerList) {}

    // list or watch objects of kind ResourceQuota
    rpc ListCoreV1NamespacedResourceQuota(ListCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuotaList) {}

    // list or watch objects of kind Secret
    rpc ListCoreV1NamespacedSecret(ListCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1SecretList) {}

    // list or watch objects of kind Service
    rpc ListCoreV1NamespacedService(ListCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1ServiceList) {}

    // list or watch objects of kind ServiceAccount
    rpc ListCoreV1NamespacedServiceAccount(ListCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccountList) {}

    // list or watch objects of kind Node
    rpc ListCoreV1Node(ListCoreV1NodeRequest) returns (IoK8sApiCoreV1NodeList) {}

    // list or watch objects of kind PersistentVolume
    rpc ListCoreV1PersistentVolume(ListCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolumeList) {}

    // list or watch objects of kind PersistentVolumeClaim
    rpc ListCoreV1PersistentVolumeClaimForAllNamespaces(ListCoreV1PersistentVolumeClaimForAllNamespacesRequest) returns (IoK8sApiCoreV1PersistentVolumeClaimList) {}

    // list or watch objects of kind Pod
    rpc ListCoreV1PodForAllNamespaces(ListCoreV1PodForAllNamespacesRequest) returns (IoK8sApiCoreV1PodList) {}

    // list or watch objects of kind PodTemplate
    rpc ListCoreV1PodTemplateForAllNamespaces(ListCoreV1PodTemplateForAllNamespacesRequest) returns (IoK8sApiCoreV1PodTemplateList) {}

    // list or watch objects of kind ReplicationController
    rpc ListCoreV1ReplicationControllerForAllNamespaces(ListCoreV1ReplicationControllerForAllNamespacesRequest) returns (IoK8sApiCoreV1ReplicationControllerList) {}

    // list or watch objects of kind ResourceQuota
    rpc ListCoreV1ResourceQuotaForAllNamespaces(ListCoreV1ResourceQuotaForAllNamespacesRequest) returns (IoK8sApiCoreV1ResourceQuotaList) {}

    // list or watch objects of kind Secret
    rpc ListCoreV1SecretForAllNamespaces(ListCoreV1SecretForAllNamespacesRequest) returns (IoK8sApiCoreV1SecretList) {}

    // list or watch objects of kind ServiceAccount
    rpc ListCoreV1ServiceAccountForAllNamespaces(ListCoreV1ServiceAccountForAllNamespacesRequest) returns (IoK8sApiCoreV1ServiceAccountList) {}

    // list or watch objects of kind Service
    rpc ListCoreV1ServiceForAllNamespaces(ListCoreV1ServiceForAllNamespacesRequest) returns (IoK8sApiCoreV1ServiceList) {}

    // list or watch objects of kind DaemonSet
    rpc ListExtensionsV1beta1DaemonSetForAllNamespaces(ListExtensionsV1beta1DaemonSetForAllNamespacesRequest) returns (IoK8sApiExtensionsV1beta1DaemonSetList) {}

    // list or watch objects of kind Deployment
    rpc ListExtensionsV1beta1DeploymentForAllNamespaces(ListExtensionsV1beta1DeploymentForAllNamespacesRequest) returns (IoK8sApiExtensionsV1beta1DeploymentList) {}

    // list or watch objects of kind Ingress
    rpc ListExtensionsV1beta1IngressForAllNamespaces(ListExtensionsV1beta1IngressForAllNamespacesRequest) returns (IoK8sApiExtensionsV1beta1IngressList) {}

    // list or watch objects of kind DaemonSet
    rpc ListExtensionsV1beta1NamespacedDaemonSet(ListExtensionsV1beta1NamespacedDaemonSetRequest) returns (IoK8sApiExtensionsV1beta1DaemonSetList) {}

    // list or watch objects of kind Deployment
    rpc ListExtensionsV1beta1NamespacedDeployment(ListExtensionsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiExtensionsV1beta1DeploymentList) {}

    // list or watch objects of kind Ingress
    rpc ListExtensionsV1beta1NamespacedIngress(ListExtensionsV1beta1NamespacedIngressRequest) returns (IoK8sApiExtensionsV1beta1IngressList) {}

    // list or watch objects of kind NetworkPolicy
    rpc ListExtensionsV1beta1NamespacedNetworkPolicy(ListExtensionsV1beta1NamespacedNetworkPolicyRequest) returns (IoK8sApiExtensionsV1beta1NetworkPolicyList) {}

    // list or watch objects of kind ReplicaSet
    rpc ListExtensionsV1beta1NamespacedReplicaSet(ListExtensionsV1beta1NamespacedReplicaSetRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSetList) {}

    // list or watch objects of kind NetworkPolicy
    rpc ListExtensionsV1beta1NetworkPolicyForAllNamespaces(ListExtensionsV1beta1NetworkPolicyForAllNamespacesRequest) returns (IoK8sApiExtensionsV1beta1NetworkPolicyList) {}

    // list or watch objects of kind PodSecurityPolicy
    rpc ListExtensionsV1beta1PodSecurityPolicy(ListExtensionsV1beta1PodSecurityPolicyRequest) returns (IoK8sApiExtensionsV1beta1PodSecurityPolicyList) {}

    // list or watch objects of kind ReplicaSet
    rpc ListExtensionsV1beta1ReplicaSetForAllNamespaces(ListExtensionsV1beta1ReplicaSetForAllNamespacesRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSetList) {}

    // list or watch objects of kind NetworkPolicy
    rpc ListNetworkingV1NamespacedNetworkPolicy(ListNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicyList) {}

    // list or watch objects of kind NetworkPolicy
    rpc ListNetworkingV1NetworkPolicyForAllNamespaces(ListNetworkingV1NetworkPolicyForAllNamespacesRequest) returns (IoK8sApiNetworkingV1NetworkPolicyList) {}

    // list or watch objects of kind PodDisruptionBudget
    rpc ListPolicyV1beta1NamespacedPodDisruptionBudget(ListPolicyV1beta1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudgetList) {}

    // list or watch objects of kind PodDisruptionBudget
    rpc ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces(ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudgetList) {}

    // list or watch objects of kind ClusterRole
    rpc ListRbacAuthorizationV1ClusterRole(ListRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRoleList) {}

    // list or watch objects of kind ClusterRoleBinding
    rpc ListRbacAuthorizationV1ClusterRoleBinding(ListRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBindingList) {}

    // list or watch objects of kind Role
    rpc ListRbacAuthorizationV1NamespacedRole(ListRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1RoleList) {}

    // list or watch objects of kind RoleBinding
    rpc ListRbacAuthorizationV1NamespacedRoleBinding(ListRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBindingList) {}

    // list or watch objects of kind RoleBinding
    rpc ListRbacAuthorizationV1RoleBindingForAllNamespaces(ListRbacAuthorizationV1RoleBindingForAllNamespacesRequest) returns (IoK8sApiRbacV1RoleBindingList) {}

    // list or watch objects of kind Role
    rpc ListRbacAuthorizationV1RoleForAllNamespaces(ListRbacAuthorizationV1RoleForAllNamespacesRequest) returns (IoK8sApiRbacV1RoleList) {}

    // list or watch objects of kind ClusterRole
    rpc ListRbacAuthorizationV1beta1ClusterRole(ListRbacAuthorizationV1beta1ClusterRoleRequest) returns (IoK8sApiRbacV1beta1ClusterRoleList) {}

    // list or watch objects of kind ClusterRoleBinding
    rpc ListRbacAuthorizationV1beta1ClusterRoleBinding(ListRbacAuthorizationV1beta1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1beta1ClusterRoleBindingList) {}

    // list or watch objects of kind Role
    rpc ListRbacAuthorizationV1beta1NamespacedRole(ListRbacAuthorizationV1beta1NamespacedRoleRequest) returns (IoK8sApiRbacV1beta1RoleList) {}

    // list or watch objects of kind RoleBinding
    rpc ListRbacAuthorizationV1beta1NamespacedRoleBinding(ListRbacAuthorizationV1beta1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1beta1RoleBindingList) {}

    // list or watch objects of kind RoleBinding
    rpc ListRbacAuthorizationV1beta1RoleBindingForAllNamespaces(ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesRequest) returns (IoK8sApiRbacV1beta1RoleBindingList) {}

    // list or watch objects of kind Role
    rpc ListRbacAuthorizationV1beta1RoleForAllNamespaces(ListRbacAuthorizationV1beta1RoleForAllNamespacesRequest) returns (IoK8sApiRbacV1beta1RoleList) {}

    // list or watch objects of kind StorageClass
    rpc ListStorageV1StorageClass(ListStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClassList) {}

    // list or watch objects of kind StorageClass
    rpc ListStorageV1beta1StorageClass(ListStorageV1beta1StorageClassRequest) returns (IoK8sApiStorageV1beta1StorageClassList) {}

    rpc LogFileHandler(LogFileHandlerRequest) returns (google.protobuf.Empty) {}

    rpc LogFileListHandler(google.protobuf.Empty) returns (google.protobuf.Empty) {}

    // partially update the specified CustomResourceDefinition
    rpc PatchApiextensionsV1beta1CustomResourceDefinition(PatchApiextensionsV1beta1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition) {}

    // partially update the specified APIService
    rpc PatchApiregistrationV1beta1ApiService(PatchApiregistrationV1beta1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService) {}

    // partially update the specified ControllerRevision
    rpc PatchAppsV1beta1NamespacedControllerRevision(PatchAppsV1beta1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta1ControllerRevision) {}

    // partially update the specified Deployment
    rpc PatchAppsV1beta1NamespacedDeployment(PatchAppsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta1Deployment) {}

    // partially update scale of the specified Deployment
    rpc PatchAppsV1beta1NamespacedDeploymentScale(PatchAppsV1beta1NamespacedDeploymentScaleRequest) returns (IoK8sApiAppsV1beta1Scale) {}

    // partially update status of the specified Deployment
    rpc PatchAppsV1beta1NamespacedDeploymentStatus(PatchAppsV1beta1NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1beta1Deployment) {}

    // partially update the specified StatefulSet
    rpc PatchAppsV1beta1NamespacedStatefulSet(PatchAppsV1beta1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta1StatefulSet) {}

    // partially update scale of the specified StatefulSet
    rpc PatchAppsV1beta1NamespacedStatefulSetScale(PatchAppsV1beta1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAppsV1beta1Scale) {}

    // partially update status of the specified StatefulSet
    rpc PatchAppsV1beta1NamespacedStatefulSetStatus(PatchAppsV1beta1NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1beta1StatefulSet) {}

    // partially update the specified ControllerRevision
    rpc PatchAppsV1beta2NamespacedControllerRevision(PatchAppsV1beta2NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta2ControllerRevision) {}

    // partially update the specified DaemonSet
    rpc PatchAppsV1beta2NamespacedDaemonSet(PatchAppsV1beta2NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1beta2DaemonSet) {}

    // partially update status of the specified DaemonSet
    rpc PatchAppsV1beta2NamespacedDaemonSetStatus(PatchAppsV1beta2NamespacedDaemonSetStatusRequest) returns (IoK8sApiAppsV1beta2DaemonSet) {}

    // partially update the specified Deployment
    rpc PatchAppsV1beta2NamespacedDeployment(PatchAppsV1beta2NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta2Deployment) {}

    // partially update scale of the specified Deployment
    rpc PatchAppsV1beta2NamespacedDeploymentScale(PatchAppsV1beta2NamespacedDeploymentScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // partially update status of the specified Deployment
    rpc PatchAppsV1beta2NamespacedDeploymentStatus(PatchAppsV1beta2NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1beta2Deployment) {}

    // partially update the specified ReplicaSet
    rpc PatchAppsV1beta2NamespacedReplicaSet(PatchAppsV1beta2NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1beta2ReplicaSet) {}

    // partially update scale of the specified ReplicaSet
    rpc PatchAppsV1beta2NamespacedReplicaSetScale(PatchAppsV1beta2NamespacedReplicaSetScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // partially update status of the specified ReplicaSet
    rpc PatchAppsV1beta2NamespacedReplicaSetStatus(PatchAppsV1beta2NamespacedReplicaSetStatusRequest) returns (IoK8sApiAppsV1beta2ReplicaSet) {}

    // partially update the specified StatefulSet
    rpc PatchAppsV1beta2NamespacedStatefulSet(PatchAppsV1beta2NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta2StatefulSet) {}

    // partially update scale of the specified StatefulSet
    rpc PatchAppsV1beta2NamespacedStatefulSetScale(PatchAppsV1beta2NamespacedStatefulSetScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // partially update status of the specified StatefulSet
    rpc PatchAppsV1beta2NamespacedStatefulSetStatus(PatchAppsV1beta2NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1beta2StatefulSet) {}

    // partially update the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV1NamespacedHorizontalPodAutoscaler(PatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // partially update status of the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // partially update the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler) {}

    // partially update status of the specified HorizontalPodAutoscaler
    rpc PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler) {}

    // partially update the specified Job
    rpc PatchBatchV1NamespacedJob(PatchBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // partially update status of the specified Job
    rpc PatchBatchV1NamespacedJobStatus(PatchBatchV1NamespacedJobStatusRequest) returns (IoK8sApiBatchV1Job) {}

    // partially update the specified CronJob
    rpc PatchBatchV1beta1NamespacedCronJob(PatchBatchV1beta1NamespacedCronJobRequest) returns (IoK8sApiBatchV1beta1CronJob) {}

    // partially update status of the specified CronJob
    rpc PatchBatchV1beta1NamespacedCronJobStatus(PatchBatchV1beta1NamespacedCronJobStatusRequest) returns (IoK8sApiBatchV1beta1CronJob) {}

    // partially update the specified CertificateSigningRequest
    rpc PatchCertificatesV1beta1CertificateSigningRequest(PatchCertificatesV1beta1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1beta1CertificateSigningRequest) {}

    // partially update the specified Namespace
    rpc PatchCoreV1Namespace(PatchCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // partially update status of the specified Namespace
    rpc PatchCoreV1NamespaceStatus(PatchCoreV1NamespaceStatusRequest) returns (IoK8sApiCoreV1Namespace) {}

    // partially update the specified ConfigMap
    rpc PatchCoreV1NamespacedConfigMap(PatchCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // partially update the specified Endpoints
    rpc PatchCoreV1NamespacedEndpoints(PatchCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // partially update the specified Event
    rpc PatchCoreV1NamespacedEvent(PatchCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // partially update the specified LimitRange
    rpc PatchCoreV1NamespacedLimitRange(PatchCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // partially update the specified PersistentVolumeClaim
    rpc PatchCoreV1NamespacedPersistentVolumeClaim(PatchCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // partially update status of the specified PersistentVolumeClaim
    rpc PatchCoreV1NamespacedPersistentVolumeClaimStatus(PatchCoreV1NamespacedPersistentVolumeClaimStatusRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // partially update the specified Pod
    rpc PatchCoreV1NamespacedPod(PatchCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // partially update status of the specified Pod
    rpc PatchCoreV1NamespacedPodStatus(PatchCoreV1NamespacedPodStatusRequest) returns (IoK8sApiCoreV1Pod) {}

    // partially update the specified PodTemplate
    rpc PatchCoreV1NamespacedPodTemplate(PatchCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // partially update the specified ReplicationController
    rpc PatchCoreV1NamespacedReplicationController(PatchCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // partially update scale of the specified ReplicationController
    rpc PatchCoreV1NamespacedReplicationControllerScale(PatchCoreV1NamespacedReplicationControllerScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // partially update status of the specified ReplicationController
    rpc PatchCoreV1NamespacedReplicationControllerStatus(PatchCoreV1NamespacedReplicationControllerStatusRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // partially update the specified ResourceQuota
    rpc PatchCoreV1NamespacedResourceQuota(PatchCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // partially update status of the specified ResourceQuota
    rpc PatchCoreV1NamespacedResourceQuotaStatus(PatchCoreV1NamespacedResourceQuotaStatusRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // partially update the specified Secret
    rpc PatchCoreV1NamespacedSecret(PatchCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // partially update the specified Service
    rpc PatchCoreV1NamespacedService(PatchCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // partially update the specified ServiceAccount
    rpc PatchCoreV1NamespacedServiceAccount(PatchCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // partially update status of the specified Service
    rpc PatchCoreV1NamespacedServiceStatus(PatchCoreV1NamespacedServiceStatusRequest) returns (IoK8sApiCoreV1Service) {}

    // partially update the specified Node
    rpc PatchCoreV1Node(PatchCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // partially update status of the specified Node
    rpc PatchCoreV1NodeStatus(PatchCoreV1NodeStatusRequest) returns (IoK8sApiCoreV1Node) {}

    // partially update the specified PersistentVolume
    rpc PatchCoreV1PersistentVolume(PatchCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // partially update status of the specified PersistentVolume
    rpc PatchCoreV1PersistentVolumeStatus(PatchCoreV1PersistentVolumeStatusRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // partially update the specified DaemonSet
    rpc PatchExtensionsV1beta1NamespacedDaemonSet(PatchExtensionsV1beta1NamespacedDaemonSetRequest) returns (IoK8sApiExtensionsV1beta1DaemonSet) {}

    // partially update status of the specified DaemonSet
    rpc PatchExtensionsV1beta1NamespacedDaemonSetStatus(PatchExtensionsV1beta1NamespacedDaemonSetStatusRequest) returns (IoK8sApiExtensionsV1beta1DaemonSet) {}

    // partially update the specified Deployment
    rpc PatchExtensionsV1beta1NamespacedDeployment(PatchExtensionsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiExtensionsV1beta1Deployment) {}

    // partially update scale of the specified Deployment
    rpc PatchExtensionsV1beta1NamespacedDeploymentScale(PatchExtensionsV1beta1NamespacedDeploymentScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // partially update status of the specified Deployment
    rpc PatchExtensionsV1beta1NamespacedDeploymentStatus(PatchExtensionsV1beta1NamespacedDeploymentStatusRequest) returns (IoK8sApiExtensionsV1beta1Deployment) {}

    // partially update the specified Ingress
    rpc PatchExtensionsV1beta1NamespacedIngress(PatchExtensionsV1beta1NamespacedIngressRequest) returns (IoK8sApiExtensionsV1beta1Ingress) {}

    // partially update status of the specified Ingress
    rpc PatchExtensionsV1beta1NamespacedIngressStatus(PatchExtensionsV1beta1NamespacedIngressStatusRequest) returns (IoK8sApiExtensionsV1beta1Ingress) {}

    // partially update the specified NetworkPolicy
    rpc PatchExtensionsV1beta1NamespacedNetworkPolicy(PatchExtensionsV1beta1NamespacedNetworkPolicyRequest) returns (IoK8sApiExtensionsV1beta1NetworkPolicy) {}

    // partially update the specified ReplicaSet
    rpc PatchExtensionsV1beta1NamespacedReplicaSet(PatchExtensionsV1beta1NamespacedReplicaSetRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSet) {}

    // partially update scale of the specified ReplicaSet
    rpc PatchExtensionsV1beta1NamespacedReplicaSetScale(PatchExtensionsV1beta1NamespacedReplicaSetScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // partially update status of the specified ReplicaSet
    rpc PatchExtensionsV1beta1NamespacedReplicaSetStatus(PatchExtensionsV1beta1NamespacedReplicaSetStatusRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSet) {}

    // partially update scale of the specified ReplicationControllerDummy
    rpc PatchExtensionsV1beta1NamespacedReplicationControllerDummyScale(PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // partially update the specified PodSecurityPolicy
    rpc PatchExtensionsV1beta1PodSecurityPolicy(PatchExtensionsV1beta1PodSecurityPolicyRequest) returns (IoK8sApiExtensionsV1beta1PodSecurityPolicy) {}

    // partially update the specified NetworkPolicy
    rpc PatchNetworkingV1NamespacedNetworkPolicy(PatchNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // partially update the specified PodDisruptionBudget
    rpc PatchPolicyV1beta1NamespacedPodDisruptionBudget(PatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudget) {}

    // partially update status of the specified PodDisruptionBudget
    rpc PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudget) {}

    // partially update the specified ClusterRole
    rpc PatchRbacAuthorizationV1ClusterRole(PatchRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // partially update the specified ClusterRoleBinding
    rpc PatchRbacAuthorizationV1ClusterRoleBinding(PatchRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // partially update the specified Role
    rpc PatchRbacAuthorizationV1NamespacedRole(PatchRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // partially update the specified RoleBinding
    rpc PatchRbacAuthorizationV1NamespacedRoleBinding(PatchRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // partially update the specified ClusterRole
    rpc PatchRbacAuthorizationV1beta1ClusterRole(PatchRbacAuthorizationV1beta1ClusterRoleRequest) returns (IoK8sApiRbacV1beta1ClusterRole) {}

    // partially update the specified ClusterRoleBinding
    rpc PatchRbacAuthorizationV1beta1ClusterRoleBinding(PatchRbacAuthorizationV1beta1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1beta1ClusterRoleBinding) {}

    // partially update the specified Role
    rpc PatchRbacAuthorizationV1beta1NamespacedRole(PatchRbacAuthorizationV1beta1NamespacedRoleRequest) returns (IoK8sApiRbacV1beta1Role) {}

    // partially update the specified RoleBinding
    rpc PatchRbacAuthorizationV1beta1NamespacedRoleBinding(PatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1beta1RoleBinding) {}

    // partially update the specified StorageClass
    rpc PatchStorageV1StorageClass(PatchStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // partially update the specified StorageClass
    rpc PatchStorageV1beta1StorageClass(PatchStorageV1beta1StorageClassRequest) returns (IoK8sApiStorageV1beta1StorageClass) {}

    // proxy DELETE requests to Pod
    rpc ProxyCoreV1DeleteNamespacedPod(ProxyCoreV1DeleteNamespacedPodRequest) returns (google.protobuf.StringValue) {}

    // proxy DELETE requests to Pod
    rpc ProxyCoreV1DeleteNamespacedPodWithPath(ProxyCoreV1DeleteNamespacedPodWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy DELETE requests to Service
    rpc ProxyCoreV1DeleteNamespacedService(ProxyCoreV1DeleteNamespacedServiceRequest) returns (google.protobuf.StringValue) {}

    // proxy DELETE requests to Service
    rpc ProxyCoreV1DeleteNamespacedServiceWithPath(ProxyCoreV1DeleteNamespacedServiceWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy DELETE requests to Node
    rpc ProxyCoreV1DeleteNode(ProxyCoreV1DeleteNodeRequest) returns (google.protobuf.StringValue) {}

    // proxy DELETE requests to Node
    rpc ProxyCoreV1DeleteNodeWithPath(ProxyCoreV1DeleteNodeWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy GET requests to Pod
    rpc ProxyCoreV1GetNamespacedPod(ProxyCoreV1GetNamespacedPodRequest) returns (google.protobuf.StringValue) {}

    // proxy GET requests to Pod
    rpc ProxyCoreV1GetNamespacedPodWithPath(ProxyCoreV1GetNamespacedPodWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy GET requests to Service
    rpc ProxyCoreV1GetNamespacedService(ProxyCoreV1GetNamespacedServiceRequest) returns (google.protobuf.StringValue) {}

    // proxy GET requests to Service
    rpc ProxyCoreV1GetNamespacedServiceWithPath(ProxyCoreV1GetNamespacedServiceWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy GET requests to Node
    rpc ProxyCoreV1GetNode(ProxyCoreV1GetNodeRequest) returns (google.protobuf.StringValue) {}

    // proxy GET requests to Node
    rpc ProxyCoreV1GetNodeWithPath(ProxyCoreV1GetNodeWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy PATCH requests to Pod
    rpc ProxyCoreV1PatchNamespacedPod(ProxyCoreV1PatchNamespacedPodRequest) returns (google.protobuf.StringValue) {}

    // proxy PATCH requests to Pod
    rpc ProxyCoreV1PatchNamespacedPodWithPath(ProxyCoreV1PatchNamespacedPodWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy PATCH requests to Service
    rpc ProxyCoreV1PatchNamespacedService(ProxyCoreV1PatchNamespacedServiceRequest) returns (google.protobuf.StringValue) {}

    // proxy PATCH requests to Service
    rpc ProxyCoreV1PatchNamespacedServiceWithPath(ProxyCoreV1PatchNamespacedServiceWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy PATCH requests to Node
    rpc ProxyCoreV1PatchNode(ProxyCoreV1PatchNodeRequest) returns (google.protobuf.StringValue) {}

    // proxy PATCH requests to Node
    rpc ProxyCoreV1PatchNodeWithPath(ProxyCoreV1PatchNodeWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy POST requests to Pod
    rpc ProxyCoreV1PostNamespacedPod(ProxyCoreV1PostNamespacedPodRequest) returns (google.protobuf.StringValue) {}

    // proxy POST requests to Pod
    rpc ProxyCoreV1PostNamespacedPodWithPath(ProxyCoreV1PostNamespacedPodWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy POST requests to Service
    rpc ProxyCoreV1PostNamespacedService(ProxyCoreV1PostNamespacedServiceRequest) returns (google.protobuf.StringValue) {}

    // proxy POST requests to Service
    rpc ProxyCoreV1PostNamespacedServiceWithPath(ProxyCoreV1PostNamespacedServiceWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy POST requests to Node
    rpc ProxyCoreV1PostNode(ProxyCoreV1PostNodeRequest) returns (google.protobuf.StringValue) {}

    // proxy POST requests to Node
    rpc ProxyCoreV1PostNodeWithPath(ProxyCoreV1PostNodeWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy PUT requests to Pod
    rpc ProxyCoreV1PutNamespacedPod(ProxyCoreV1PutNamespacedPodRequest) returns (google.protobuf.StringValue) {}

    // proxy PUT requests to Pod
    rpc ProxyCoreV1PutNamespacedPodWithPath(ProxyCoreV1PutNamespacedPodWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy PUT requests to Service
    rpc ProxyCoreV1PutNamespacedService(ProxyCoreV1PutNamespacedServiceRequest) returns (google.protobuf.StringValue) {}

    // proxy PUT requests to Service
    rpc ProxyCoreV1PutNamespacedServiceWithPath(ProxyCoreV1PutNamespacedServiceWithPathRequest) returns (google.protobuf.StringValue) {}

    // proxy PUT requests to Node
    rpc ProxyCoreV1PutNode(ProxyCoreV1PutNodeRequest) returns (google.protobuf.StringValue) {}

    // proxy PUT requests to Node
    rpc ProxyCoreV1PutNodeWithPath(ProxyCoreV1PutNodeWithPathRequest) returns (google.protobuf.StringValue) {}

    // read the specified CustomResourceDefinition
    rpc ReadApiextensionsV1beta1CustomResourceDefinition(ReadApiextensionsV1beta1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition) {}

    // read the specified APIService
    rpc ReadApiregistrationV1beta1ApiService(ReadApiregistrationV1beta1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService) {}

    // read the specified ControllerRevision
    rpc ReadAppsV1beta1NamespacedControllerRevision(ReadAppsV1beta1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta1ControllerRevision) {}

    // read the specified Deployment
    rpc ReadAppsV1beta1NamespacedDeployment(ReadAppsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta1Deployment) {}

    // read scale of the specified Deployment
    rpc ReadAppsV1beta1NamespacedDeploymentScale(ReadAppsV1beta1NamespacedDeploymentScaleRequest) returns (IoK8sApiAppsV1beta1Scale) {}

    // read status of the specified Deployment
    rpc ReadAppsV1beta1NamespacedDeploymentStatus(ReadAppsV1beta1NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1beta1Deployment) {}

    // read the specified StatefulSet
    rpc ReadAppsV1beta1NamespacedStatefulSet(ReadAppsV1beta1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta1StatefulSet) {}

    // read scale of the specified StatefulSet
    rpc ReadAppsV1beta1NamespacedStatefulSetScale(ReadAppsV1beta1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAppsV1beta1Scale) {}

    // read status of the specified StatefulSet
    rpc ReadAppsV1beta1NamespacedStatefulSetStatus(ReadAppsV1beta1NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1beta1StatefulSet) {}

    // read the specified ControllerRevision
    rpc ReadAppsV1beta2NamespacedControllerRevision(ReadAppsV1beta2NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta2ControllerRevision) {}

    // read the specified DaemonSet
    rpc ReadAppsV1beta2NamespacedDaemonSet(ReadAppsV1beta2NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1beta2DaemonSet) {}

    // read status of the specified DaemonSet
    rpc ReadAppsV1beta2NamespacedDaemonSetStatus(ReadAppsV1beta2NamespacedDaemonSetStatusRequest) returns (IoK8sApiAppsV1beta2DaemonSet) {}

    // read the specified Deployment
    rpc ReadAppsV1beta2NamespacedDeployment(ReadAppsV1beta2NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta2Deployment) {}

    // read scale of the specified Deployment
    rpc ReadAppsV1beta2NamespacedDeploymentScale(ReadAppsV1beta2NamespacedDeploymentScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // read status of the specified Deployment
    rpc ReadAppsV1beta2NamespacedDeploymentStatus(ReadAppsV1beta2NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1beta2Deployment) {}

    // read the specified ReplicaSet
    rpc ReadAppsV1beta2NamespacedReplicaSet(ReadAppsV1beta2NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1beta2ReplicaSet) {}

    // read scale of the specified ReplicaSet
    rpc ReadAppsV1beta2NamespacedReplicaSetScale(ReadAppsV1beta2NamespacedReplicaSetScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // read status of the specified ReplicaSet
    rpc ReadAppsV1beta2NamespacedReplicaSetStatus(ReadAppsV1beta2NamespacedReplicaSetStatusRequest) returns (IoK8sApiAppsV1beta2ReplicaSet) {}

    // read the specified StatefulSet
    rpc ReadAppsV1beta2NamespacedStatefulSet(ReadAppsV1beta2NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta2StatefulSet) {}

    // read scale of the specified StatefulSet
    rpc ReadAppsV1beta2NamespacedStatefulSetScale(ReadAppsV1beta2NamespacedStatefulSetScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // read status of the specified StatefulSet
    rpc ReadAppsV1beta2NamespacedStatefulSetStatus(ReadAppsV1beta2NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1beta2StatefulSet) {}

    // read the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV1NamespacedHorizontalPodAutoscaler(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // read status of the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // read the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler) {}

    // read status of the specified HorizontalPodAutoscaler
    rpc ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler) {}

    // read the specified Job
    rpc ReadBatchV1NamespacedJob(ReadBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // read status of the specified Job
    rpc ReadBatchV1NamespacedJobStatus(ReadBatchV1NamespacedJobStatusRequest) returns (IoK8sApiBatchV1Job) {}

    // read the specified CronJob
    rpc ReadBatchV1beta1NamespacedCronJob(ReadBatchV1beta1NamespacedCronJobRequest) returns (IoK8sApiBatchV1beta1CronJob) {}

    // read status of the specified CronJob
    rpc ReadBatchV1beta1NamespacedCronJobStatus(ReadBatchV1beta1NamespacedCronJobStatusRequest) returns (IoK8sApiBatchV1beta1CronJob) {}

    // read the specified CertificateSigningRequest
    rpc ReadCertificatesV1beta1CertificateSigningRequest(ReadCertificatesV1beta1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1beta1CertificateSigningRequest) {}

    // read the specified ComponentStatus
    rpc ReadCoreV1ComponentStatus(ReadCoreV1ComponentStatusRequest) returns (IoK8sApiCoreV1ComponentStatus) {}

    // read the specified Namespace
    rpc ReadCoreV1Namespace(ReadCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // read status of the specified Namespace
    rpc ReadCoreV1NamespaceStatus(ReadCoreV1NamespaceStatusRequest) returns (IoK8sApiCoreV1Namespace) {}

    // read the specified ConfigMap
    rpc ReadCoreV1NamespacedConfigMap(ReadCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // read the specified Endpoints
    rpc ReadCoreV1NamespacedEndpoints(ReadCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // read the specified Event
    rpc ReadCoreV1NamespacedEvent(ReadCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // read the specified LimitRange
    rpc ReadCoreV1NamespacedLimitRange(ReadCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // read the specified PersistentVolumeClaim
    rpc ReadCoreV1NamespacedPersistentVolumeClaim(ReadCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // read status of the specified PersistentVolumeClaim
    rpc ReadCoreV1NamespacedPersistentVolumeClaimStatus(ReadCoreV1NamespacedPersistentVolumeClaimStatusRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // read the specified Pod
    rpc ReadCoreV1NamespacedPod(ReadCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // read log of the specified Pod
    rpc ReadCoreV1NamespacedPodLog(ReadCoreV1NamespacedPodLogRequest) returns (google.protobuf.StringValue) {}

    // read status of the specified Pod
    rpc ReadCoreV1NamespacedPodStatus(ReadCoreV1NamespacedPodStatusRequest) returns (IoK8sApiCoreV1Pod) {}

    // read the specified PodTemplate
    rpc ReadCoreV1NamespacedPodTemplate(ReadCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // read the specified ReplicationController
    rpc ReadCoreV1NamespacedReplicationController(ReadCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // read scale of the specified ReplicationController
    rpc ReadCoreV1NamespacedReplicationControllerScale(ReadCoreV1NamespacedReplicationControllerScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // read status of the specified ReplicationController
    rpc ReadCoreV1NamespacedReplicationControllerStatus(ReadCoreV1NamespacedReplicationControllerStatusRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // read the specified ResourceQuota
    rpc ReadCoreV1NamespacedResourceQuota(ReadCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // read status of the specified ResourceQuota
    rpc ReadCoreV1NamespacedResourceQuotaStatus(ReadCoreV1NamespacedResourceQuotaStatusRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // read the specified Secret
    rpc ReadCoreV1NamespacedSecret(ReadCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // read the specified Service
    rpc ReadCoreV1NamespacedService(ReadCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // read the specified ServiceAccount
    rpc ReadCoreV1NamespacedServiceAccount(ReadCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // read status of the specified Service
    rpc ReadCoreV1NamespacedServiceStatus(ReadCoreV1NamespacedServiceStatusRequest) returns (IoK8sApiCoreV1Service) {}

    // read the specified Node
    rpc ReadCoreV1Node(ReadCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // read status of the specified Node
    rpc ReadCoreV1NodeStatus(ReadCoreV1NodeStatusRequest) returns (IoK8sApiCoreV1Node) {}

    // read the specified PersistentVolume
    rpc ReadCoreV1PersistentVolume(ReadCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // read status of the specified PersistentVolume
    rpc ReadCoreV1PersistentVolumeStatus(ReadCoreV1PersistentVolumeStatusRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // read the specified DaemonSet
    rpc ReadExtensionsV1beta1NamespacedDaemonSet(ReadExtensionsV1beta1NamespacedDaemonSetRequest) returns (IoK8sApiExtensionsV1beta1DaemonSet) {}

    // read status of the specified DaemonSet
    rpc ReadExtensionsV1beta1NamespacedDaemonSetStatus(ReadExtensionsV1beta1NamespacedDaemonSetStatusRequest) returns (IoK8sApiExtensionsV1beta1DaemonSet) {}

    // read the specified Deployment
    rpc ReadExtensionsV1beta1NamespacedDeployment(ReadExtensionsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiExtensionsV1beta1Deployment) {}

    // read scale of the specified Deployment
    rpc ReadExtensionsV1beta1NamespacedDeploymentScale(ReadExtensionsV1beta1NamespacedDeploymentScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // read status of the specified Deployment
    rpc ReadExtensionsV1beta1NamespacedDeploymentStatus(ReadExtensionsV1beta1NamespacedDeploymentStatusRequest) returns (IoK8sApiExtensionsV1beta1Deployment) {}

    // read the specified Ingress
    rpc ReadExtensionsV1beta1NamespacedIngress(ReadExtensionsV1beta1NamespacedIngressRequest) returns (IoK8sApiExtensionsV1beta1Ingress) {}

    // read status of the specified Ingress
    rpc ReadExtensionsV1beta1NamespacedIngressStatus(ReadExtensionsV1beta1NamespacedIngressStatusRequest) returns (IoK8sApiExtensionsV1beta1Ingress) {}

    // read the specified NetworkPolicy
    rpc ReadExtensionsV1beta1NamespacedNetworkPolicy(ReadExtensionsV1beta1NamespacedNetworkPolicyRequest) returns (IoK8sApiExtensionsV1beta1NetworkPolicy) {}

    // read the specified ReplicaSet
    rpc ReadExtensionsV1beta1NamespacedReplicaSet(ReadExtensionsV1beta1NamespacedReplicaSetRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSet) {}

    // read scale of the specified ReplicaSet
    rpc ReadExtensionsV1beta1NamespacedReplicaSetScale(ReadExtensionsV1beta1NamespacedReplicaSetScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // read status of the specified ReplicaSet
    rpc ReadExtensionsV1beta1NamespacedReplicaSetStatus(ReadExtensionsV1beta1NamespacedReplicaSetStatusRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSet) {}

    // read scale of the specified ReplicationControllerDummy
    rpc ReadExtensionsV1beta1NamespacedReplicationControllerDummyScale(ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // read the specified PodSecurityPolicy
    rpc ReadExtensionsV1beta1PodSecurityPolicy(ReadExtensionsV1beta1PodSecurityPolicyRequest) returns (IoK8sApiExtensionsV1beta1PodSecurityPolicy) {}

    // read the specified NetworkPolicy
    rpc ReadNetworkingV1NamespacedNetworkPolicy(ReadNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // read the specified PodDisruptionBudget
    rpc ReadPolicyV1beta1NamespacedPodDisruptionBudget(ReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudget) {}

    // read status of the specified PodDisruptionBudget
    rpc ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus(ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudget) {}

    // read the specified ClusterRole
    rpc ReadRbacAuthorizationV1ClusterRole(ReadRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // read the specified ClusterRoleBinding
    rpc ReadRbacAuthorizationV1ClusterRoleBinding(ReadRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // read the specified Role
    rpc ReadRbacAuthorizationV1NamespacedRole(ReadRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // read the specified RoleBinding
    rpc ReadRbacAuthorizationV1NamespacedRoleBinding(ReadRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // read the specified ClusterRole
    rpc ReadRbacAuthorizationV1beta1ClusterRole(ReadRbacAuthorizationV1beta1ClusterRoleRequest) returns (IoK8sApiRbacV1beta1ClusterRole) {}

    // read the specified ClusterRoleBinding
    rpc ReadRbacAuthorizationV1beta1ClusterRoleBinding(ReadRbacAuthorizationV1beta1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1beta1ClusterRoleBinding) {}

    // read the specified Role
    rpc ReadRbacAuthorizationV1beta1NamespacedRole(ReadRbacAuthorizationV1beta1NamespacedRoleRequest) returns (IoK8sApiRbacV1beta1Role) {}

    // read the specified RoleBinding
    rpc ReadRbacAuthorizationV1beta1NamespacedRoleBinding(ReadRbacAuthorizationV1beta1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1beta1RoleBinding) {}

    // read the specified StorageClass
    rpc ReadStorageV1StorageClass(ReadStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // read the specified StorageClass
    rpc ReadStorageV1beta1StorageClass(ReadStorageV1beta1StorageClassRequest) returns (IoK8sApiStorageV1beta1StorageClass) {}

    // replace the specified CustomResourceDefinition
    rpc ReplaceApiextensionsV1beta1CustomResourceDefinition(ReplaceApiextensionsV1beta1CustomResourceDefinitionRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition) {}

    // replace status of the specified CustomResourceDefinition
    rpc ReplaceApiextensionsV1beta1CustomResourceDefinitionStatus(ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusRequest) returns (IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition) {}

    // replace the specified APIService
    rpc ReplaceApiregistrationV1beta1ApiService(ReplaceApiregistrationV1beta1ApiServiceRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService) {}

    // replace status of the specified APIService
    rpc ReplaceApiregistrationV1beta1ApiServiceStatus(ReplaceApiregistrationV1beta1ApiServiceStatusRequest) returns (IoK8sKubeAggregatorPkgApisApiregistrationV1beta1APIService) {}

    // replace the specified ControllerRevision
    rpc ReplaceAppsV1beta1NamespacedControllerRevision(ReplaceAppsV1beta1NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta1ControllerRevision) {}

    // replace the specified Deployment
    rpc ReplaceAppsV1beta1NamespacedDeployment(ReplaceAppsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta1Deployment) {}

    // replace scale of the specified Deployment
    rpc ReplaceAppsV1beta1NamespacedDeploymentScale(ReplaceAppsV1beta1NamespacedDeploymentScaleRequest) returns (IoK8sApiAppsV1beta1Scale) {}

    // replace status of the specified Deployment
    rpc ReplaceAppsV1beta1NamespacedDeploymentStatus(ReplaceAppsV1beta1NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1beta1Deployment) {}

    // replace the specified StatefulSet
    rpc ReplaceAppsV1beta1NamespacedStatefulSet(ReplaceAppsV1beta1NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta1StatefulSet) {}

    // replace scale of the specified StatefulSet
    rpc ReplaceAppsV1beta1NamespacedStatefulSetScale(ReplaceAppsV1beta1NamespacedStatefulSetScaleRequest) returns (IoK8sApiAppsV1beta1Scale) {}

    // replace status of the specified StatefulSet
    rpc ReplaceAppsV1beta1NamespacedStatefulSetStatus(ReplaceAppsV1beta1NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1beta1StatefulSet) {}

    // replace the specified ControllerRevision
    rpc ReplaceAppsV1beta2NamespacedControllerRevision(ReplaceAppsV1beta2NamespacedControllerRevisionRequest) returns (IoK8sApiAppsV1beta2ControllerRevision) {}

    // replace the specified DaemonSet
    rpc ReplaceAppsV1beta2NamespacedDaemonSet(ReplaceAppsV1beta2NamespacedDaemonSetRequest) returns (IoK8sApiAppsV1beta2DaemonSet) {}

    // replace status of the specified DaemonSet
    rpc ReplaceAppsV1beta2NamespacedDaemonSetStatus(ReplaceAppsV1beta2NamespacedDaemonSetStatusRequest) returns (IoK8sApiAppsV1beta2DaemonSet) {}

    // replace the specified Deployment
    rpc ReplaceAppsV1beta2NamespacedDeployment(ReplaceAppsV1beta2NamespacedDeploymentRequest) returns (IoK8sApiAppsV1beta2Deployment) {}

    // replace scale of the specified Deployment
    rpc ReplaceAppsV1beta2NamespacedDeploymentScale(ReplaceAppsV1beta2NamespacedDeploymentScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // replace status of the specified Deployment
    rpc ReplaceAppsV1beta2NamespacedDeploymentStatus(ReplaceAppsV1beta2NamespacedDeploymentStatusRequest) returns (IoK8sApiAppsV1beta2Deployment) {}

    // replace the specified ReplicaSet
    rpc ReplaceAppsV1beta2NamespacedReplicaSet(ReplaceAppsV1beta2NamespacedReplicaSetRequest) returns (IoK8sApiAppsV1beta2ReplicaSet) {}

    // replace scale of the specified ReplicaSet
    rpc ReplaceAppsV1beta2NamespacedReplicaSetScale(ReplaceAppsV1beta2NamespacedReplicaSetScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // replace status of the specified ReplicaSet
    rpc ReplaceAppsV1beta2NamespacedReplicaSetStatus(ReplaceAppsV1beta2NamespacedReplicaSetStatusRequest) returns (IoK8sApiAppsV1beta2ReplicaSet) {}

    // replace the specified StatefulSet
    rpc ReplaceAppsV1beta2NamespacedStatefulSet(ReplaceAppsV1beta2NamespacedStatefulSetRequest) returns (IoK8sApiAppsV1beta2StatefulSet) {}

    // replace scale of the specified StatefulSet
    rpc ReplaceAppsV1beta2NamespacedStatefulSetScale(ReplaceAppsV1beta2NamespacedStatefulSetScaleRequest) returns (IoK8sApiAppsV1beta2Scale) {}

    // replace status of the specified StatefulSet
    rpc ReplaceAppsV1beta2NamespacedStatefulSetStatus(ReplaceAppsV1beta2NamespacedStatefulSetStatusRequest) returns (IoK8sApiAppsV1beta2StatefulSet) {}

    // replace the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler(ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // replace status of the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV1HorizontalPodAutoscaler) {}

    // replace the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler) {}

    // replace status of the specified HorizontalPodAutoscaler
    rpc ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest) returns (IoK8sApiAutoscalingV2beta1HorizontalPodAutoscaler) {}

    // replace the specified Job
    rpc ReplaceBatchV1NamespacedJob(ReplaceBatchV1NamespacedJobRequest) returns (IoK8sApiBatchV1Job) {}

    // replace status of the specified Job
    rpc ReplaceBatchV1NamespacedJobStatus(ReplaceBatchV1NamespacedJobStatusRequest) returns (IoK8sApiBatchV1Job) {}

    // replace the specified CronJob
    rpc ReplaceBatchV1beta1NamespacedCronJob(ReplaceBatchV1beta1NamespacedCronJobRequest) returns (IoK8sApiBatchV1beta1CronJob) {}

    // replace status of the specified CronJob
    rpc ReplaceBatchV1beta1NamespacedCronJobStatus(ReplaceBatchV1beta1NamespacedCronJobStatusRequest) returns (IoK8sApiBatchV1beta1CronJob) {}

    // replace the specified CertificateSigningRequest
    rpc ReplaceCertificatesV1beta1CertificateSigningRequest(ReplaceCertificatesV1beta1CertificateSigningRequestRequest) returns (IoK8sApiCertificatesV1beta1CertificateSigningRequest) {}

    // replace approval of the specified CertificateSigningRequest
    rpc ReplaceCertificatesV1beta1CertificateSigningRequestApproval(ReplaceCertificatesV1beta1CertificateSigningRequestApprovalRequest) returns (IoK8sApiCertificatesV1beta1CertificateSigningRequest) {}

    // replace status of the specified CertificateSigningRequest
    rpc ReplaceCertificatesV1beta1CertificateSigningRequestStatus(ReplaceCertificatesV1beta1CertificateSigningRequestStatusRequest) returns (IoK8sApiCertificatesV1beta1CertificateSigningRequest) {}

    // replace the specified Namespace
    rpc ReplaceCoreV1Namespace(ReplaceCoreV1NamespaceRequest) returns (IoK8sApiCoreV1Namespace) {}

    // replace finalize of the specified Namespace
    rpc ReplaceCoreV1NamespaceFinalize(ReplaceCoreV1NamespaceFinalizeRequest) returns (IoK8sApiCoreV1Namespace) {}

    // replace status of the specified Namespace
    rpc ReplaceCoreV1NamespaceStatus(ReplaceCoreV1NamespaceStatusRequest) returns (IoK8sApiCoreV1Namespace) {}

    // replace the specified ConfigMap
    rpc ReplaceCoreV1NamespacedConfigMap(ReplaceCoreV1NamespacedConfigMapRequest) returns (IoK8sApiCoreV1ConfigMap) {}

    // replace the specified Endpoints
    rpc ReplaceCoreV1NamespacedEndpoints(ReplaceCoreV1NamespacedEndpointsRequest) returns (IoK8sApiCoreV1Endpoints) {}

    // replace the specified Event
    rpc ReplaceCoreV1NamespacedEvent(ReplaceCoreV1NamespacedEventRequest) returns (IoK8sApiCoreV1Event) {}

    // replace the specified LimitRange
    rpc ReplaceCoreV1NamespacedLimitRange(ReplaceCoreV1NamespacedLimitRangeRequest) returns (IoK8sApiCoreV1LimitRange) {}

    // replace the specified PersistentVolumeClaim
    rpc ReplaceCoreV1NamespacedPersistentVolumeClaim(ReplaceCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // replace status of the specified PersistentVolumeClaim
    rpc ReplaceCoreV1NamespacedPersistentVolumeClaimStatus(ReplaceCoreV1NamespacedPersistentVolumeClaimStatusRequest) returns (IoK8sApiCoreV1PersistentVolumeClaim) {}

    // replace the specified Pod
    rpc ReplaceCoreV1NamespacedPod(ReplaceCoreV1NamespacedPodRequest) returns (IoK8sApiCoreV1Pod) {}

    // replace status of the specified Pod
    rpc ReplaceCoreV1NamespacedPodStatus(ReplaceCoreV1NamespacedPodStatusRequest) returns (IoK8sApiCoreV1Pod) {}

    // replace the specified PodTemplate
    rpc ReplaceCoreV1NamespacedPodTemplate(ReplaceCoreV1NamespacedPodTemplateRequest) returns (IoK8sApiCoreV1PodTemplate) {}

    // replace the specified ReplicationController
    rpc ReplaceCoreV1NamespacedReplicationController(ReplaceCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // replace scale of the specified ReplicationController
    rpc ReplaceCoreV1NamespacedReplicationControllerScale(ReplaceCoreV1NamespacedReplicationControllerScaleRequest) returns (IoK8sApiAutoscalingV1Scale) {}

    // replace status of the specified ReplicationController
    rpc ReplaceCoreV1NamespacedReplicationControllerStatus(ReplaceCoreV1NamespacedReplicationControllerStatusRequest) returns (IoK8sApiCoreV1ReplicationController) {}

    // replace the specified ResourceQuota
    rpc ReplaceCoreV1NamespacedResourceQuota(ReplaceCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // replace status of the specified ResourceQuota
    rpc ReplaceCoreV1NamespacedResourceQuotaStatus(ReplaceCoreV1NamespacedResourceQuotaStatusRequest) returns (IoK8sApiCoreV1ResourceQuota) {}

    // replace the specified Secret
    rpc ReplaceCoreV1NamespacedSecret(ReplaceCoreV1NamespacedSecretRequest) returns (IoK8sApiCoreV1Secret) {}

    // replace the specified Service
    rpc ReplaceCoreV1NamespacedService(ReplaceCoreV1NamespacedServiceRequest) returns (IoK8sApiCoreV1Service) {}

    // replace the specified ServiceAccount
    rpc ReplaceCoreV1NamespacedServiceAccount(ReplaceCoreV1NamespacedServiceAccountRequest) returns (IoK8sApiCoreV1ServiceAccount) {}

    // replace status of the specified Service
    rpc ReplaceCoreV1NamespacedServiceStatus(ReplaceCoreV1NamespacedServiceStatusRequest) returns (IoK8sApiCoreV1Service) {}

    // replace the specified Node
    rpc ReplaceCoreV1Node(ReplaceCoreV1NodeRequest) returns (IoK8sApiCoreV1Node) {}

    // replace status of the specified Node
    rpc ReplaceCoreV1NodeStatus(ReplaceCoreV1NodeStatusRequest) returns (IoK8sApiCoreV1Node) {}

    // replace the specified PersistentVolume
    rpc ReplaceCoreV1PersistentVolume(ReplaceCoreV1PersistentVolumeRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // replace status of the specified PersistentVolume
    rpc ReplaceCoreV1PersistentVolumeStatus(ReplaceCoreV1PersistentVolumeStatusRequest) returns (IoK8sApiCoreV1PersistentVolume) {}

    // replace the specified DaemonSet
    rpc ReplaceExtensionsV1beta1NamespacedDaemonSet(ReplaceExtensionsV1beta1NamespacedDaemonSetRequest) returns (IoK8sApiExtensionsV1beta1DaemonSet) {}

    // replace status of the specified DaemonSet
    rpc ReplaceExtensionsV1beta1NamespacedDaemonSetStatus(ReplaceExtensionsV1beta1NamespacedDaemonSetStatusRequest) returns (IoK8sApiExtensionsV1beta1DaemonSet) {}

    // replace the specified Deployment
    rpc ReplaceExtensionsV1beta1NamespacedDeployment(ReplaceExtensionsV1beta1NamespacedDeploymentRequest) returns (IoK8sApiExtensionsV1beta1Deployment) {}

    // replace scale of the specified Deployment
    rpc ReplaceExtensionsV1beta1NamespacedDeploymentScale(ReplaceExtensionsV1beta1NamespacedDeploymentScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // replace status of the specified Deployment
    rpc ReplaceExtensionsV1beta1NamespacedDeploymentStatus(ReplaceExtensionsV1beta1NamespacedDeploymentStatusRequest) returns (IoK8sApiExtensionsV1beta1Deployment) {}

    // replace the specified Ingress
    rpc ReplaceExtensionsV1beta1NamespacedIngress(ReplaceExtensionsV1beta1NamespacedIngressRequest) returns (IoK8sApiExtensionsV1beta1Ingress) {}

    // replace status of the specified Ingress
    rpc ReplaceExtensionsV1beta1NamespacedIngressStatus(ReplaceExtensionsV1beta1NamespacedIngressStatusRequest) returns (IoK8sApiExtensionsV1beta1Ingress) {}

    // replace the specified NetworkPolicy
    rpc ReplaceExtensionsV1beta1NamespacedNetworkPolicy(ReplaceExtensionsV1beta1NamespacedNetworkPolicyRequest) returns (IoK8sApiExtensionsV1beta1NetworkPolicy) {}

    // replace the specified ReplicaSet
    rpc ReplaceExtensionsV1beta1NamespacedReplicaSet(ReplaceExtensionsV1beta1NamespacedReplicaSetRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSet) {}

    // replace scale of the specified ReplicaSet
    rpc ReplaceExtensionsV1beta1NamespacedReplicaSetScale(ReplaceExtensionsV1beta1NamespacedReplicaSetScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // replace status of the specified ReplicaSet
    rpc ReplaceExtensionsV1beta1NamespacedReplicaSetStatus(ReplaceExtensionsV1beta1NamespacedReplicaSetStatusRequest) returns (IoK8sApiExtensionsV1beta1ReplicaSet) {}

    // replace scale of the specified ReplicationControllerDummy
    rpc ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest) returns (IoK8sApiExtensionsV1beta1Scale) {}

    // replace the specified PodSecurityPolicy
    rpc ReplaceExtensionsV1beta1PodSecurityPolicy(ReplaceExtensionsV1beta1PodSecurityPolicyRequest) returns (IoK8sApiExtensionsV1beta1PodSecurityPolicy) {}

    // replace the specified NetworkPolicy
    rpc ReplaceNetworkingV1NamespacedNetworkPolicy(ReplaceNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApiNetworkingV1NetworkPolicy) {}

    // replace the specified PodDisruptionBudget
    rpc ReplacePolicyV1beta1NamespacedPodDisruptionBudget(ReplacePolicyV1beta1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudget) {}

    // replace status of the specified PodDisruptionBudget
    rpc ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest) returns (IoK8sApiPolicyV1beta1PodDisruptionBudget) {}

    // replace the specified ClusterRole
    rpc ReplaceRbacAuthorizationV1ClusterRole(ReplaceRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApiRbacV1ClusterRole) {}

    // replace the specified ClusterRoleBinding
    rpc ReplaceRbacAuthorizationV1ClusterRoleBinding(ReplaceRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1ClusterRoleBinding) {}

    // replace the specified Role
    rpc ReplaceRbacAuthorizationV1NamespacedRole(ReplaceRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApiRbacV1Role) {}

    // replace the specified RoleBinding
    rpc ReplaceRbacAuthorizationV1NamespacedRoleBinding(ReplaceRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1RoleBinding) {}

    // replace the specified ClusterRole
    rpc ReplaceRbacAuthorizationV1beta1ClusterRole(ReplaceRbacAuthorizationV1beta1ClusterRoleRequest) returns (IoK8sApiRbacV1beta1ClusterRole) {}

    // replace the specified ClusterRoleBinding
    rpc ReplaceRbacAuthorizationV1beta1ClusterRoleBinding(ReplaceRbacAuthorizationV1beta1ClusterRoleBindingRequest) returns (IoK8sApiRbacV1beta1ClusterRoleBinding) {}

    // replace the specified Role
    rpc ReplaceRbacAuthorizationV1beta1NamespacedRole(ReplaceRbacAuthorizationV1beta1NamespacedRoleRequest) returns (IoK8sApiRbacV1beta1Role) {}

    // replace the specified RoleBinding
    rpc ReplaceRbacAuthorizationV1beta1NamespacedRoleBinding(ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingRequest) returns (IoK8sApiRbacV1beta1RoleBinding) {}

    // replace the specified StorageClass
    rpc ReplaceStorageV1StorageClass(ReplaceStorageV1StorageClassRequest) returns (IoK8sApiStorageV1StorageClass) {}

    // replace the specified StorageClass
    rpc ReplaceStorageV1beta1StorageClass(ReplaceStorageV1beta1StorageClassRequest) returns (IoK8sApiStorageV1beta1StorageClass) {}

    // watch changes to an object of kind CustomResourceDefinition
    rpc WatchApiextensionsV1beta1CustomResourceDefinition(WatchApiextensionsV1beta1CustomResourceDefinitionRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CustomResourceDefinition
    rpc WatchApiextensionsV1beta1CustomResourceDefinitionList(WatchApiextensionsV1beta1CustomResourceDefinitionListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind APIService
    rpc WatchApiregistrationV1beta1ApiService(WatchApiregistrationV1beta1ApiServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of APIService
    rpc WatchApiregistrationV1beta1ApiServiceList(WatchApiregistrationV1beta1ApiServiceListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ControllerRevision
    rpc WatchAppsV1beta1ControllerRevisionListForAllNamespaces(WatchAppsV1beta1ControllerRevisionListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment
    rpc WatchAppsV1beta1DeploymentListForAllNamespaces(WatchAppsV1beta1DeploymentListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ControllerRevision
    rpc WatchAppsV1beta1NamespacedControllerRevision(WatchAppsV1beta1NamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ControllerRevision
    rpc WatchAppsV1beta1NamespacedControllerRevisionList(WatchAppsV1beta1NamespacedControllerRevisionListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Deployment
    rpc WatchAppsV1beta1NamespacedDeployment(WatchAppsV1beta1NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment
    rpc WatchAppsV1beta1NamespacedDeploymentList(WatchAppsV1beta1NamespacedDeploymentListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind StatefulSet
    rpc WatchAppsV1beta1NamespacedStatefulSet(WatchAppsV1beta1NamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StatefulSet
    rpc WatchAppsV1beta1NamespacedStatefulSetList(WatchAppsV1beta1NamespacedStatefulSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StatefulSet
    rpc WatchAppsV1beta1StatefulSetListForAllNamespaces(WatchAppsV1beta1StatefulSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ControllerRevision
    rpc WatchAppsV1beta2ControllerRevisionListForAllNamespaces(WatchAppsV1beta2ControllerRevisionListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of DaemonSet
    rpc WatchAppsV1beta2DaemonSetListForAllNamespaces(WatchAppsV1beta2DaemonSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment
    rpc WatchAppsV1beta2DeploymentListForAllNamespaces(WatchAppsV1beta2DeploymentListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ControllerRevision
    rpc WatchAppsV1beta2NamespacedControllerRevision(WatchAppsV1beta2NamespacedControllerRevisionRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ControllerRevision
    rpc WatchAppsV1beta2NamespacedControllerRevisionList(WatchAppsV1beta2NamespacedControllerRevisionListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind DaemonSet
    rpc WatchAppsV1beta2NamespacedDaemonSet(WatchAppsV1beta2NamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of DaemonSet
    rpc WatchAppsV1beta2NamespacedDaemonSetList(WatchAppsV1beta2NamespacedDaemonSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Deployment
    rpc WatchAppsV1beta2NamespacedDeployment(WatchAppsV1beta2NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment
    rpc WatchAppsV1beta2NamespacedDeploymentList(WatchAppsV1beta2NamespacedDeploymentListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ReplicaSet
    rpc WatchAppsV1beta2NamespacedReplicaSet(WatchAppsV1beta2NamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicaSet
    rpc WatchAppsV1beta2NamespacedReplicaSetList(WatchAppsV1beta2NamespacedReplicaSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind StatefulSet
    rpc WatchAppsV1beta2NamespacedStatefulSet(WatchAppsV1beta2NamespacedStatefulSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StatefulSet
    rpc WatchAppsV1beta2NamespacedStatefulSetList(WatchAppsV1beta2NamespacedStatefulSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicaSet
    rpc WatchAppsV1beta2ReplicaSetListForAllNamespaces(WatchAppsV1beta2ReplicaSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StatefulSet
    rpc WatchAppsV1beta2StatefulSetListForAllNamespaces(WatchAppsV1beta2StatefulSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler
    rpc WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind HorizontalPodAutoscaler
    rpc WatchAutoscalingV1NamespacedHorizontalPodAutoscaler(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler
    rpc WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler
    rpc WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind HorizontalPodAutoscaler
    rpc WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of HorizontalPodAutoscaler
    rpc WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Job
    rpc WatchBatchV1JobListForAllNamespaces(WatchBatchV1JobListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Job
    rpc WatchBatchV1NamespacedJob(WatchBatchV1NamespacedJobRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Job
    rpc WatchBatchV1NamespacedJobList(WatchBatchV1NamespacedJobListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CronJob
    rpc WatchBatchV1beta1CronJobListForAllNamespaces(WatchBatchV1beta1CronJobListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CronJob
    rpc WatchBatchV1beta1NamespacedCronJob(WatchBatchV1beta1NamespacedCronJobRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CronJob
    rpc WatchBatchV1beta1NamespacedCronJobList(WatchBatchV1beta1NamespacedCronJobListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind CertificateSigningRequest
    rpc WatchCertificatesV1beta1CertificateSigningRequest(WatchCertificatesV1beta1CertificateSigningRequestRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of CertificateSigningRequest
    rpc WatchCertificatesV1beta1CertificateSigningRequestList(WatchCertificatesV1beta1CertificateSigningRequestListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ConfigMap
    rpc WatchCoreV1ConfigMapListForAllNamespaces(WatchCoreV1ConfigMapListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Endpoints
    rpc WatchCoreV1EndpointsListForAllNamespaces(WatchCoreV1EndpointsListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Event
    rpc WatchCoreV1EventListForAllNamespaces(WatchCoreV1EventListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of LimitRange
    rpc WatchCoreV1LimitRangeListForAllNamespaces(WatchCoreV1LimitRangeListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Namespace
    rpc WatchCoreV1Namespace(WatchCoreV1NamespaceRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Namespace
    rpc WatchCoreV1NamespaceList(WatchCoreV1NamespaceListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ConfigMap
    rpc WatchCoreV1NamespacedConfigMap(WatchCoreV1NamespacedConfigMapRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ConfigMap
    rpc WatchCoreV1NamespacedConfigMapList(WatchCoreV1NamespacedConfigMapListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Endpoints
    rpc WatchCoreV1NamespacedEndpoints(WatchCoreV1NamespacedEndpointsRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Endpoints
    rpc WatchCoreV1NamespacedEndpointsList(WatchCoreV1NamespacedEndpointsListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Event
    rpc WatchCoreV1NamespacedEvent(WatchCoreV1NamespacedEventRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Event
    rpc WatchCoreV1NamespacedEventList(WatchCoreV1NamespacedEventListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind LimitRange
    rpc WatchCoreV1NamespacedLimitRange(WatchCoreV1NamespacedLimitRangeRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of LimitRange
    rpc WatchCoreV1NamespacedLimitRangeList(WatchCoreV1NamespacedLimitRangeListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PersistentVolumeClaim
    rpc WatchCoreV1NamespacedPersistentVolumeClaim(WatchCoreV1NamespacedPersistentVolumeClaimRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PersistentVolumeClaim
    rpc WatchCoreV1NamespacedPersistentVolumeClaimList(WatchCoreV1NamespacedPersistentVolumeClaimListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Pod
    rpc WatchCoreV1NamespacedPod(WatchCoreV1NamespacedPodRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Pod
    rpc WatchCoreV1NamespacedPodList(WatchCoreV1NamespacedPodListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PodTemplate
    rpc WatchCoreV1NamespacedPodTemplate(WatchCoreV1NamespacedPodTemplateRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodTemplate
    rpc WatchCoreV1NamespacedPodTemplateList(WatchCoreV1NamespacedPodTemplateListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ReplicationController
    rpc WatchCoreV1NamespacedReplicationController(WatchCoreV1NamespacedReplicationControllerRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicationController
    rpc WatchCoreV1NamespacedReplicationControllerList(WatchCoreV1NamespacedReplicationControllerListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ResourceQuota
    rpc WatchCoreV1NamespacedResourceQuota(WatchCoreV1NamespacedResourceQuotaRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceQuota
    rpc WatchCoreV1NamespacedResourceQuotaList(WatchCoreV1NamespacedResourceQuotaListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Secret
    rpc WatchCoreV1NamespacedSecret(WatchCoreV1NamespacedSecretRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Secret
    rpc WatchCoreV1NamespacedSecretList(WatchCoreV1NamespacedSecretListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Service
    rpc WatchCoreV1NamespacedService(WatchCoreV1NamespacedServiceRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ServiceAccount
    rpc WatchCoreV1NamespacedServiceAccount(WatchCoreV1NamespacedServiceAccountRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ServiceAccount
    rpc WatchCoreV1NamespacedServiceAccountList(WatchCoreV1NamespacedServiceAccountListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Service
    rpc WatchCoreV1NamespacedServiceList(WatchCoreV1NamespacedServiceListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Node
    rpc WatchCoreV1Node(WatchCoreV1NodeRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Node
    rpc WatchCoreV1NodeList(WatchCoreV1NodeListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PersistentVolume
    rpc WatchCoreV1PersistentVolume(WatchCoreV1PersistentVolumeRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PersistentVolumeClaim
    rpc WatchCoreV1PersistentVolumeClaimListForAllNamespaces(WatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PersistentVolume
    rpc WatchCoreV1PersistentVolumeList(WatchCoreV1PersistentVolumeListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Pod
    rpc WatchCoreV1PodListForAllNamespaces(WatchCoreV1PodListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodTemplate
    rpc WatchCoreV1PodTemplateListForAllNamespaces(WatchCoreV1PodTemplateListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicationController
    rpc WatchCoreV1ReplicationControllerListForAllNamespaces(WatchCoreV1ReplicationControllerListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ResourceQuota
    rpc WatchCoreV1ResourceQuotaListForAllNamespaces(WatchCoreV1ResourceQuotaListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Secret
    rpc WatchCoreV1SecretListForAllNamespaces(WatchCoreV1SecretListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ServiceAccount
    rpc WatchCoreV1ServiceAccountListForAllNamespaces(WatchCoreV1ServiceAccountListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Service
    rpc WatchCoreV1ServiceListForAllNamespaces(WatchCoreV1ServiceListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of DaemonSet
    rpc WatchExtensionsV1beta1DaemonSetListForAllNamespaces(WatchExtensionsV1beta1DaemonSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment
    rpc WatchExtensionsV1beta1DeploymentListForAllNamespaces(WatchExtensionsV1beta1DeploymentListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Ingress
    rpc WatchExtensionsV1beta1IngressListForAllNamespaces(WatchExtensionsV1beta1IngressListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind DaemonSet
    rpc WatchExtensionsV1beta1NamespacedDaemonSet(WatchExtensionsV1beta1NamespacedDaemonSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of DaemonSet
    rpc WatchExtensionsV1beta1NamespacedDaemonSetList(WatchExtensionsV1beta1NamespacedDaemonSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Deployment
    rpc WatchExtensionsV1beta1NamespacedDeployment(WatchExtensionsV1beta1NamespacedDeploymentRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Deployment
    rpc WatchExtensionsV1beta1NamespacedDeploymentList(WatchExtensionsV1beta1NamespacedDeploymentListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Ingress
    rpc WatchExtensionsV1beta1NamespacedIngress(WatchExtensionsV1beta1NamespacedIngressRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Ingress
    rpc WatchExtensionsV1beta1NamespacedIngressList(WatchExtensionsV1beta1NamespacedIngressListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind NetworkPolicy
    rpc WatchExtensionsV1beta1NamespacedNetworkPolicy(WatchExtensionsV1beta1NamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of NetworkPolicy
    rpc WatchExtensionsV1beta1NamespacedNetworkPolicyList(WatchExtensionsV1beta1NamespacedNetworkPolicyListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ReplicaSet
    rpc WatchExtensionsV1beta1NamespacedReplicaSet(WatchExtensionsV1beta1NamespacedReplicaSetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicaSet
    rpc WatchExtensionsV1beta1NamespacedReplicaSetList(WatchExtensionsV1beta1NamespacedReplicaSetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of NetworkPolicy
    rpc WatchExtensionsV1beta1NetworkPolicyListForAllNamespaces(WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PodSecurityPolicy
    rpc WatchExtensionsV1beta1PodSecurityPolicy(WatchExtensionsV1beta1PodSecurityPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodSecurityPolicy
    rpc WatchExtensionsV1beta1PodSecurityPolicyList(WatchExtensionsV1beta1PodSecurityPolicyListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ReplicaSet
    rpc WatchExtensionsV1beta1ReplicaSetListForAllNamespaces(WatchExtensionsV1beta1ReplicaSetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind NetworkPolicy
    rpc WatchNetworkingV1NamespacedNetworkPolicy(WatchNetworkingV1NamespacedNetworkPolicyRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of NetworkPolicy
    rpc WatchNetworkingV1NamespacedNetworkPolicyList(WatchNetworkingV1NamespacedNetworkPolicyListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of NetworkPolicy
    rpc WatchNetworkingV1NetworkPolicyListForAllNamespaces(WatchNetworkingV1NetworkPolicyListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind PodDisruptionBudget
    rpc WatchPolicyV1beta1NamespacedPodDisruptionBudget(WatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodDisruptionBudget
    rpc WatchPolicyV1beta1NamespacedPodDisruptionBudgetList(WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of PodDisruptionBudget
    rpc WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterRole
    rpc WatchRbacAuthorizationV1ClusterRole(WatchRbacAuthorizationV1ClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterRoleBinding
    rpc WatchRbacAuthorizationV1ClusterRoleBinding(WatchRbacAuthorizationV1ClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterRoleBinding
    rpc WatchRbacAuthorizationV1ClusterRoleBindingList(WatchRbacAuthorizationV1ClusterRoleBindingListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterRole
    rpc WatchRbacAuthorizationV1ClusterRoleList(WatchRbacAuthorizationV1ClusterRoleListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Role
    rpc WatchRbacAuthorizationV1NamespacedRole(WatchRbacAuthorizationV1NamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind RoleBinding
    rpc WatchRbacAuthorizationV1NamespacedRoleBinding(WatchRbacAuthorizationV1NamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of RoleBinding
    rpc WatchRbacAuthorizationV1NamespacedRoleBindingList(WatchRbacAuthorizationV1NamespacedRoleBindingListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Role
    rpc WatchRbacAuthorizationV1NamespacedRoleList(WatchRbacAuthorizationV1NamespacedRoleListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of RoleBinding
    rpc WatchRbacAuthorizationV1RoleBindingListForAllNamespaces(WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Role
    rpc WatchRbacAuthorizationV1RoleListForAllNamespaces(WatchRbacAuthorizationV1RoleListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterRole
    rpc WatchRbacAuthorizationV1beta1ClusterRole(WatchRbacAuthorizationV1beta1ClusterRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind ClusterRoleBinding
    rpc WatchRbacAuthorizationV1beta1ClusterRoleBinding(WatchRbacAuthorizationV1beta1ClusterRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterRoleBinding
    rpc WatchRbacAuthorizationV1beta1ClusterRoleBindingList(WatchRbacAuthorizationV1beta1ClusterRoleBindingListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of ClusterRole
    rpc WatchRbacAuthorizationV1beta1ClusterRoleList(WatchRbacAuthorizationV1beta1ClusterRoleListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind Role
    rpc WatchRbacAuthorizationV1beta1NamespacedRole(WatchRbacAuthorizationV1beta1NamespacedRoleRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind RoleBinding
    rpc WatchRbacAuthorizationV1beta1NamespacedRoleBinding(WatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of RoleBinding
    rpc WatchRbacAuthorizationV1beta1NamespacedRoleBindingList(WatchRbacAuthorizationV1beta1NamespacedRoleBindingListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Role
    rpc WatchRbacAuthorizationV1beta1NamespacedRoleList(WatchRbacAuthorizationV1beta1NamespacedRoleListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of RoleBinding
    rpc WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of Role
    rpc WatchRbacAuthorizationV1beta1RoleListForAllNamespaces(WatchRbacAuthorizationV1beta1RoleListForAllNamespacesRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind StorageClass
    rpc WatchStorageV1StorageClass(WatchStorageV1StorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StorageClass
    rpc WatchStorageV1StorageClassList(WatchStorageV1StorageClassListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch changes to an object of kind StorageClass
    rpc WatchStorageV1beta1StorageClass(WatchStorageV1beta1StorageClassRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}

    // watch individual changes to a list of StorageClass
    rpc WatchStorageV1beta1StorageClassList(WatchStorageV1beta1StorageClassListRequest) returns (IoK8sApimachineryPkgApisMetaV1WatchEvent) {}
}